
testeADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036d4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003868  08003868  00013868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003898  08003898  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003898  08003898  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003898  08003898  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003898  08003898  00013898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800389c  0800389c  0001389c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080038a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000007c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000088  20000088  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007d62  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000162f  00000000  00000000  00027d9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000600  00000000  00000000  000293d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000548  00000000  00000000  000299d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f637  00000000  00000000  00029f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000923c  00000000  00000000  0004954f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4208  00000000  00000000  0005278b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00116993  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001684  00000000  00000000  001169e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003850 	.word	0x08003850

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003850 	.word	0x08003850

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 fa8e 	bl	80006f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f832 	bl	8000244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f8fe 	bl	80003e0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80001e4:	f000 f88c 	bl	8000300 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0 && button_status == 0)
 80001e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ec:	4811      	ldr	r0, [pc, #68]	; (8000234 <main+0x60>)
 80001ee:	f001 fe93 	bl	8001f18 <HAL_GPIO_ReadPin>
 80001f2:	4603      	mov	r3, r0
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d10c      	bne.n	8000212 <main+0x3e>
 80001f8:	4b0f      	ldr	r3, [pc, #60]	; (8000238 <main+0x64>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d108      	bne.n	8000212 <main+0x3e>
	  {
		  button_status = 1;
 8000200:	4b0d      	ldr	r3, [pc, #52]	; (8000238 <main+0x64>)
 8000202:	2201      	movs	r2, #1
 8000204:	601a      	str	r2, [r3, #0]
		  tensao_media = teste_ADC(&hadc1);
 8000206:	480d      	ldr	r0, [pc, #52]	; (800023c <main+0x68>)
 8000208:	f000 f9f8 	bl	80005fc <teste_ADC>
 800020c:	4603      	mov	r3, r0
 800020e:	4a0c      	ldr	r2, [pc, #48]	; (8000240 <main+0x6c>)
 8000210:	6013      	str	r3, [r2, #0]
	  }
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1 && button_status == 1)
 8000212:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000216:	4807      	ldr	r0, [pc, #28]	; (8000234 <main+0x60>)
 8000218:	f001 fe7e 	bl	8001f18 <HAL_GPIO_ReadPin>
 800021c:	4603      	mov	r3, r0
 800021e:	2b01      	cmp	r3, #1
 8000220:	d1e2      	bne.n	80001e8 <main+0x14>
 8000222:	4b05      	ldr	r3, [pc, #20]	; (8000238 <main+0x64>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b01      	cmp	r3, #1
 8000228:	d1de      	bne.n	80001e8 <main+0x14>
	  {
		  button_status = 0;
 800022a:	4b03      	ldr	r3, [pc, #12]	; (8000238 <main+0x64>)
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0 && button_status == 0)
 8000230:	e7da      	b.n	80001e8 <main+0x14>
 8000232:	bf00      	nop
 8000234:	48000800 	.word	0x48000800
 8000238:	2000007c 	.word	0x2000007c
 800023c:	20000028 	.word	0x20000028
 8000240:	20000078 	.word	0x20000078

08000244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b0a6      	sub	sp, #152	; 0x98
 8000248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800024e:	2228      	movs	r2, #40	; 0x28
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f003 faf4 	bl	8003840 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000258:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800025c:	2200      	movs	r2, #0
 800025e:	601a      	str	r2, [r3, #0]
 8000260:	605a      	str	r2, [r3, #4]
 8000262:	609a      	str	r2, [r3, #8]
 8000264:	60da      	str	r2, [r3, #12]
 8000266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000268:	1d3b      	adds	r3, r7, #4
 800026a:	2258      	movs	r2, #88	; 0x58
 800026c:	2100      	movs	r1, #0
 800026e:	4618      	mov	r0, r3
 8000270:	f003 fae6 	bl	8003840 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000274:	2302      	movs	r3, #2
 8000276:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000278:	2301      	movs	r3, #1
 800027a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800027c:	2310      	movs	r3, #16
 800027e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000282:	2302      	movs	r3, #2
 8000284:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000288:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800028c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000290:	2300      	movs	r3, #0
 8000292:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002a0:	4618      	mov	r0, r3
 80002a2:	f001 fe51 	bl	8001f48 <HAL_RCC_OscConfig>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80002ac:	f000 f8d0 	bl	8000450 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b0:	230f      	movs	r3, #15
 80002b2:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002b4:	2300      	movs	r3, #0
 80002b6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f002 fe90 	bl	8002ff0 <HAL_RCC_ClockConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002d6:	f000 f8bb 	bl	8000450 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80002da:	2380      	movs	r3, #128	; 0x80
 80002dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80002de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	4618      	mov	r0, r3
 80002e8:	f003 f868 	bl	80033bc <HAL_RCCEx_PeriphCLKConfig>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80002f2:	f000 f8ad 	bl	8000450 <Error_Handler>
  }
}
 80002f6:	bf00      	nop
 80002f8:	3798      	adds	r7, #152	; 0x98
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
	...

08000300 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b08a      	sub	sp, #40	; 0x28
 8000304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000306:	f107 031c 	add.w	r3, r7, #28
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	2200      	movs	r2, #0
 8000316:	601a      	str	r2, [r3, #0]
 8000318:	605a      	str	r2, [r3, #4]
 800031a:	609a      	str	r2, [r3, #8]
 800031c:	60da      	str	r2, [r3, #12]
 800031e:	611a      	str	r2, [r3, #16]
 8000320:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000322:	4b2e      	ldr	r3, [pc, #184]	; (80003dc <MX_ADC1_Init+0xdc>)
 8000324:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000328:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800032a:	4b2c      	ldr	r3, [pc, #176]	; (80003dc <MX_ADC1_Init+0xdc>)
 800032c:	2200      	movs	r2, #0
 800032e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000330:	4b2a      	ldr	r3, [pc, #168]	; (80003dc <MX_ADC1_Init+0xdc>)
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000336:	4b29      	ldr	r3, [pc, #164]	; (80003dc <MX_ADC1_Init+0xdc>)
 8000338:	2200      	movs	r2, #0
 800033a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800033c:	4b27      	ldr	r3, [pc, #156]	; (80003dc <MX_ADC1_Init+0xdc>)
 800033e:	2200      	movs	r2, #0
 8000340:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000342:	4b26      	ldr	r3, [pc, #152]	; (80003dc <MX_ADC1_Init+0xdc>)
 8000344:	2200      	movs	r2, #0
 8000346:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800034a:	4b24      	ldr	r3, [pc, #144]	; (80003dc <MX_ADC1_Init+0xdc>)
 800034c:	2200      	movs	r2, #0
 800034e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000350:	4b22      	ldr	r3, [pc, #136]	; (80003dc <MX_ADC1_Init+0xdc>)
 8000352:	2201      	movs	r2, #1
 8000354:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000356:	4b21      	ldr	r3, [pc, #132]	; (80003dc <MX_ADC1_Init+0xdc>)
 8000358:	2200      	movs	r2, #0
 800035a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800035c:	4b1f      	ldr	r3, [pc, #124]	; (80003dc <MX_ADC1_Init+0xdc>)
 800035e:	2201      	movs	r2, #1
 8000360:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000362:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <MX_ADC1_Init+0xdc>)
 8000364:	2200      	movs	r2, #0
 8000366:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800036a:	4b1c      	ldr	r3, [pc, #112]	; (80003dc <MX_ADC1_Init+0xdc>)
 800036c:	2204      	movs	r2, #4
 800036e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000370:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <MX_ADC1_Init+0xdc>)
 8000372:	2200      	movs	r2, #0
 8000374:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000376:	4b19      	ldr	r3, [pc, #100]	; (80003dc <MX_ADC1_Init+0xdc>)
 8000378:	2200      	movs	r2, #0
 800037a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800037c:	4817      	ldr	r0, [pc, #92]	; (80003dc <MX_ADC1_Init+0xdc>)
 800037e:	f000 fa21 	bl	80007c4 <HAL_ADC_Init>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000388:	f000 f862 	bl	8000450 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800038c:	2300      	movs	r3, #0
 800038e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000390:	f107 031c 	add.w	r3, r7, #28
 8000394:	4619      	mov	r1, r3
 8000396:	4811      	ldr	r0, [pc, #68]	; (80003dc <MX_ADC1_Init+0xdc>)
 8000398:	f001 f992 	bl	80016c0 <HAL_ADCEx_MultiModeConfigChannel>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80003a2:	f000 f855 	bl	8000450 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003a6:	2301      	movs	r3, #1
 80003a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003aa:	2301      	movs	r3, #1
 80003ac:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003ae:	2300      	movs	r3, #0
 80003b0:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003b2:	2300      	movs	r3, #0
 80003b4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003b6:	2300      	movs	r3, #0
 80003b8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003ba:	2300      	movs	r3, #0
 80003bc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	4619      	mov	r1, r3
 80003c2:	4806      	ldr	r0, [pc, #24]	; (80003dc <MX_ADC1_Init+0xdc>)
 80003c4:	f000 fe90 	bl	80010e8 <HAL_ADC_ConfigChannel>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80003ce:	f000 f83f 	bl	8000450 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003d2:	bf00      	nop
 80003d4:	3728      	adds	r7, #40	; 0x28
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	20000028 	.word	0x20000028

080003e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b088      	sub	sp, #32
 80003e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e6:	f107 030c 	add.w	r3, r7, #12
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
 80003f2:	60da      	str	r2, [r3, #12]
 80003f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003f6:	4b14      	ldr	r3, [pc, #80]	; (8000448 <MX_GPIO_Init+0x68>)
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	4a13      	ldr	r2, [pc, #76]	; (8000448 <MX_GPIO_Init+0x68>)
 80003fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000400:	6153      	str	r3, [r2, #20]
 8000402:	4b11      	ldr	r3, [pc, #68]	; (8000448 <MX_GPIO_Init+0x68>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800040a:	60bb      	str	r3, [r7, #8]
 800040c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800040e:	4b0e      	ldr	r3, [pc, #56]	; (8000448 <MX_GPIO_Init+0x68>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	4a0d      	ldr	r2, [pc, #52]	; (8000448 <MX_GPIO_Init+0x68>)
 8000414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000418:	6153      	str	r3, [r2, #20]
 800041a:	4b0b      	ldr	r3, [pc, #44]	; (8000448 <MX_GPIO_Init+0x68>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000426:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800042a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800042c:	2300      	movs	r3, #0
 800042e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000430:	2300      	movs	r3, #0
 8000432:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000434:	f107 030c 	add.w	r3, r7, #12
 8000438:	4619      	mov	r1, r3
 800043a:	4804      	ldr	r0, [pc, #16]	; (800044c <MX_GPIO_Init+0x6c>)
 800043c:	f001 fbe2 	bl	8001c04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000440:	bf00      	nop
 8000442:	3720      	adds	r7, #32
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	40021000 	.word	0x40021000
 800044c:	48000800 	.word	0x48000800

08000450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000454:	b672      	cpsid	i
}
 8000456:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000458:	e7fe      	b.n	8000458 <Error_Handler+0x8>
	...

0800045c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000462:	4b0f      	ldr	r3, [pc, #60]	; (80004a0 <HAL_MspInit+0x44>)
 8000464:	699b      	ldr	r3, [r3, #24]
 8000466:	4a0e      	ldr	r2, [pc, #56]	; (80004a0 <HAL_MspInit+0x44>)
 8000468:	f043 0301 	orr.w	r3, r3, #1
 800046c:	6193      	str	r3, [r2, #24]
 800046e:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <HAL_MspInit+0x44>)
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	f003 0301 	and.w	r3, r3, #1
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800047a:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <HAL_MspInit+0x44>)
 800047c:	69db      	ldr	r3, [r3, #28]
 800047e:	4a08      	ldr	r2, [pc, #32]	; (80004a0 <HAL_MspInit+0x44>)
 8000480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000484:	61d3      	str	r3, [r2, #28]
 8000486:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <HAL_MspInit+0x44>)
 8000488:	69db      	ldr	r3, [r3, #28]
 800048a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800048e:	603b      	str	r3, [r7, #0]
 8000490:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000492:	bf00      	nop
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	40021000 	.word	0x40021000

080004a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b08a      	sub	sp, #40	; 0x28
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ac:	f107 0314 	add.w	r3, r7, #20
 80004b0:	2200      	movs	r2, #0
 80004b2:	601a      	str	r2, [r3, #0]
 80004b4:	605a      	str	r2, [r3, #4]
 80004b6:	609a      	str	r2, [r3, #8]
 80004b8:	60da      	str	r2, [r3, #12]
 80004ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80004c4:	d124      	bne.n	8000510 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80004c6:	4b14      	ldr	r3, [pc, #80]	; (8000518 <HAL_ADC_MspInit+0x74>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	4a13      	ldr	r2, [pc, #76]	; (8000518 <HAL_ADC_MspInit+0x74>)
 80004cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d0:	6153      	str	r3, [r2, #20]
 80004d2:	4b11      	ldr	r3, [pc, #68]	; (8000518 <HAL_ADC_MspInit+0x74>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004da:	613b      	str	r3, [r7, #16]
 80004dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_ADC_MspInit+0x74>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	4a0d      	ldr	r2, [pc, #52]	; (8000518 <HAL_ADC_MspInit+0x74>)
 80004e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004e8:	6153      	str	r3, [r2, #20]
 80004ea:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <HAL_ADC_MspInit+0x74>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004f6:	2301      	movs	r3, #1
 80004f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004fa:	2303      	movs	r3, #3
 80004fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fe:	2300      	movs	r3, #0
 8000500:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000502:	f107 0314 	add.w	r3, r7, #20
 8000506:	4619      	mov	r1, r3
 8000508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050c:	f001 fb7a 	bl	8001c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000510:	bf00      	nop
 8000512:	3728      	adds	r7, #40	; 0x28
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40021000 	.word	0x40021000

0800051c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000520:	e7fe      	b.n	8000520 <NMI_Handler+0x4>

08000522 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000526:	e7fe      	b.n	8000526 <HardFault_Handler+0x4>

08000528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800052c:	e7fe      	b.n	800052c <MemManage_Handler+0x4>

0800052e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800052e:	b480      	push	{r7}
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000532:	e7fe      	b.n	8000532 <BusFault_Handler+0x4>

08000534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000538:	e7fe      	b.n	8000538 <UsageFault_Handler+0x4>

0800053a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800053a:	b480      	push	{r7}
 800053c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800053e:	bf00      	nop
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr

08000556 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000556:	b480      	push	{r7}
 8000558:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800055a:	bf00      	nop
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr

08000564 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000568:	f000 f90c 	bl	8000784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}

08000570 <SystemInit>:
/**
 * @brief  Setup the microcontroller system
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
	/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <SystemInit+0x20>)
 8000576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800057a:	4a05      	ldr	r2, [pc, #20]	; (8000590 <SystemInit+0x20>)
 800057c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000580:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	e000ed00 	.word	0xe000ed00

08000594 <ADC_Calibration>:
{
	HAL_ADC_DeInit(hadc);
}

void ADC_Calibration(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
	HAL_ADCEx_Calibration_Start(hadc, SingleDiff);
 800059e:	6839      	ldr	r1, [r7, #0]
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f000 fd2e 	bl	8001002 <HAL_ADCEx_Calibration_Start>
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}

080005ae <ADC_Start>:

HAL_StatusTypeDef ADC_Start(ADC_HandleTypeDef* hadc)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b082      	sub	sp, #8
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
	return HAL_ADC_Start(hadc);
 80005b6:	6878      	ldr	r0, [r7, #4]
 80005b8:	f000 fafe 	bl	8000bb8 <HAL_ADC_Start>
 80005bc:	4603      	mov	r3, r0
}
 80005be:	4618      	mov	r0, r3
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}

080005c6 <ADC_PollForConversion>:

HAL_StatusTypeDef ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b082      	sub	sp, #8
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	6078      	str	r0, [r7, #4]
 80005ce:	6039      	str	r1, [r7, #0]
	return HAL_ADC_PollForConversion(hadc, Timeout);
 80005d0:	6839      	ldr	r1, [r7, #0]
 80005d2:	6878      	ldr	r0, [r7, #4]
 80005d4:	f000 fc06 	bl	8000de4 <HAL_ADC_PollForConversion>
 80005d8:	4603      	mov	r3, r0
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <ADC_GetValue>:

uint32_t ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b082      	sub	sp, #8
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
	return HAL_ADC_GetValue(hadc);
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	f000 fcfc 	bl	8000fe8 <HAL_ADC_GetValue>
 80005f0:	4603      	mov	r3, r0
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <teste_ADC>:

uint32_t teste_ADC(ADC_HandleTypeDef* hadc)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08e      	sub	sp, #56	; 0x38
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	ADC_Calibration(hadc, ADC_SINGLE_ENDED);
 8000604:	2100      	movs	r1, #0
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f7ff ffc4 	bl	8000594 <ADC_Calibration>
	status = ADC_Start(hadc);
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f7ff ffce 	bl	80005ae <ADC_Start>
 8000612:	4603      	mov	r3, r0
 8000614:	461a      	mov	r2, r3
 8000616:	4b21      	ldr	r3, [pc, #132]	; (800069c <teste_ADC+0xa0>)
 8000618:	701a      	strb	r2, [r3, #0]
	uint32_t avrg_value = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t adc_values[10];
	if (status != HAL_OK)
 800061e:	4b1f      	ldr	r3, [pc, #124]	; (800069c <teste_ADC+0xa0>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <teste_ADC+0x2e>
	{
		Error_Handler();
 8000626:	f7ff ff13 	bl	8000450 <Error_Handler>
	}

	status = ADC_PollForConversion(hadc, 100);
 800062a:	2164      	movs	r1, #100	; 0x64
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f7ff ffca 	bl	80005c6 <ADC_PollForConversion>
 8000632:	4603      	mov	r3, r0
 8000634:	461a      	mov	r2, r3
 8000636:	4b19      	ldr	r3, [pc, #100]	; (800069c <teste_ADC+0xa0>)
 8000638:	701a      	strb	r2, [r3, #0]
	if (status != HAL_OK)
 800063a:	4b18      	ldr	r3, [pc, #96]	; (800069c <teste_ADC+0xa0>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <teste_ADC+0x4a>
	{
		Error_Handler();
 8000642:	f7ff ff05 	bl	8000450 <Error_Handler>
	}
	for(int i=0; i<10;i++){
 8000646:	2300      	movs	r3, #0
 8000648:	633b      	str	r3, [r7, #48]	; 0x30
 800064a:	e015      	b.n	8000678 <teste_ADC+0x7c>
		adc_values[i] = ADC_GetValue(hadc);
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f7ff ffc8 	bl	80005e2 <ADC_GetValue>
 8000652:	4602      	mov	r2, r0
 8000654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	3338      	adds	r3, #56	; 0x38
 800065a:	443b      	add	r3, r7
 800065c:	f843 2c30 	str.w	r2, [r3, #-48]
		avrg_value = avrg_value + adc_values[i];
 8000660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	3338      	adds	r3, #56	; 0x38
 8000666:	443b      	add	r3, r7
 8000668:	f853 3c30 	ldr.w	r3, [r3, #-48]
 800066c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800066e:	4413      	add	r3, r2
 8000670:	637b      	str	r3, [r7, #52]	; 0x34
	for(int i=0; i<10;i++){
 8000672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000674:	3301      	adds	r3, #1
 8000676:	633b      	str	r3, [r7, #48]	; 0x30
 8000678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800067a:	2b09      	cmp	r3, #9
 800067c:	dde6      	ble.n	800064c <teste_ADC+0x50>
	}
	avrg_value = avrg_value*3300/40950;
 800067e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000680:	f640 42e4 	movw	r2, #3300	; 0xce4
 8000684:	fb02 f303 	mul.w	r3, r2, r3
 8000688:	4a05      	ldr	r2, [pc, #20]	; (80006a0 <teste_ADC+0xa4>)
 800068a:	fba2 2303 	umull	r2, r3, r2, r3
 800068e:	0bdb      	lsrs	r3, r3, #15
 8000690:	637b      	str	r3, [r7, #52]	; 0x34
	return avrg_value;
 8000692:	6b7b      	ldr	r3, [r7, #52]	; 0x34

}
 8000694:	4618      	mov	r0, r3
 8000696:	3738      	adds	r7, #56	; 0x38
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000080 	.word	0x20000080
 80006a0:	ccd99a67 	.word	0xccd99a67

080006a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006dc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80006a8:	f7ff ff62 	bl	8000570 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006ac:	480c      	ldr	r0, [pc, #48]	; (80006e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80006ae:	490d      	ldr	r1, [pc, #52]	; (80006e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006b0:	4a0d      	ldr	r2, [pc, #52]	; (80006e8 <LoopForever+0xe>)
  movs r3, #0
 80006b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b4:	e002      	b.n	80006bc <LoopCopyDataInit>

080006b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ba:	3304      	adds	r3, #4

080006bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c0:	d3f9      	bcc.n	80006b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006c2:	4a0a      	ldr	r2, [pc, #40]	; (80006ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80006c4:	4c0a      	ldr	r4, [pc, #40]	; (80006f0 <LoopForever+0x16>)
  movs r3, #0
 80006c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c8:	e001      	b.n	80006ce <LoopFillZerobss>

080006ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006cc:	3204      	adds	r2, #4

080006ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d0:	d3fb      	bcc.n	80006ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006d2:	f003 f891 	bl	80037f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006d6:	f7ff fd7d 	bl	80001d4 <main>

080006da <LoopForever>:

LoopForever:
    b LoopForever
 80006da:	e7fe      	b.n	80006da <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006dc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80006e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006e8:	080038a0 	.word	0x080038a0
  ldr r2, =_sbss
 80006ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006f0:	20000088 	.word	0x20000088

080006f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006f4:	e7fe      	b.n	80006f4 <ADC1_2_IRQHandler>
	...

080006f8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006fc:	4b08      	ldr	r3, [pc, #32]	; (8000720 <HAL_Init+0x28>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a07      	ldr	r2, [pc, #28]	; (8000720 <HAL_Init+0x28>)
 8000702:	f043 0310 	orr.w	r3, r3, #16
 8000706:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000708:	2003      	movs	r0, #3
 800070a:	f001 fa47 	bl	8001b9c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800070e:	200f      	movs	r0, #15
 8000710:	f000 f808 	bl	8000724 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000714:	f7ff fea2 	bl	800045c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000718:	2300      	movs	r3, #0
}
 800071a:	4618      	mov	r0, r3
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40022000 	.word	0x40022000

08000724 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <HAL_InitTick+0x54>)
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <HAL_InitTick+0x58>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	4619      	mov	r1, r3
 8000736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073a:	fbb3 f3f1 	udiv	r3, r3, r1
 800073e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000742:	4618      	mov	r0, r3
 8000744:	f001 fa51 	bl	8001bea <HAL_SYSTICK_Config>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800074e:	2301      	movs	r3, #1
 8000750:	e00e      	b.n	8000770 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2b0f      	cmp	r3, #15
 8000756:	d80a      	bhi.n	800076e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000758:	2200      	movs	r2, #0
 800075a:	6879      	ldr	r1, [r7, #4]
 800075c:	f04f 30ff 	mov.w	r0, #4294967295
 8000760:	f001 fa27 	bl	8001bb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000764:	4a06      	ldr	r2, [pc, #24]	; (8000780 <HAL_InitTick+0x5c>)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800076a:	2300      	movs	r3, #0
 800076c:	e000      	b.n	8000770 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800076e:	2301      	movs	r3, #1
}
 8000770:	4618      	mov	r0, r3
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000000 	.word	0x20000000
 800077c:	20000008 	.word	0x20000008
 8000780:	20000004 	.word	0x20000004

08000784 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <HAL_IncTick+0x20>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	461a      	mov	r2, r3
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <HAL_IncTick+0x24>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4413      	add	r3, r2
 8000794:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <HAL_IncTick+0x24>)
 8000796:	6013      	str	r3, [r2, #0]
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	20000008 	.word	0x20000008
 80007a8:	20000084 	.word	0x20000084

080007ac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  return uwTick;  
 80007b0:	4b03      	ldr	r3, [pc, #12]	; (80007c0 <HAL_GetTick+0x14>)
 80007b2:	681b      	ldr	r3, [r3, #0]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	20000084 	.word	0x20000084

080007c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b09a      	sub	sp, #104	; 0x68
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007cc:	2300      	movs	r3, #0
 80007ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80007d2:	2300      	movs	r3, #0
 80007d4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d101      	bne.n	80007e4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80007e0:	2301      	movs	r3, #1
 80007e2:	e1e3      	b.n	8000bac <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	691b      	ldr	r3, [r3, #16]
 80007e8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ee:	f003 0310 	and.w	r3, r3, #16
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d176      	bne.n	80008e4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d152      	bne.n	80008a4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2200      	movs	r2, #0
 8000802:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2200      	movs	r2, #0
 8000808:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2200      	movs	r2, #0
 800080e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2200      	movs	r2, #0
 8000814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f7ff fe43 	bl	80004a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	689b      	ldr	r3, [r3, #8]
 8000824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000828:	2b00      	cmp	r3, #0
 800082a:	d13b      	bne.n	80008a4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f001 f89d 	bl	800196c <ADC_Disable>
 8000832:	4603      	mov	r3, r0
 8000834:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083c:	f003 0310 	and.w	r3, r3, #16
 8000840:	2b00      	cmp	r3, #0
 8000842:	d12f      	bne.n	80008a4 <HAL_ADC_Init+0xe0>
 8000844:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000848:	2b00      	cmp	r3, #0
 800084a:	d12b      	bne.n	80008a4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000850:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000854:	f023 0302 	bic.w	r3, r3, #2
 8000858:	f043 0202 	orr.w	r2, r3, #2
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	689a      	ldr	r2, [r3, #8]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800086e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	689a      	ldr	r2, [r3, #8]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800087e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000880:	4b92      	ldr	r3, [pc, #584]	; (8000acc <HAL_ADC_Init+0x308>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a92      	ldr	r2, [pc, #584]	; (8000ad0 <HAL_ADC_Init+0x30c>)
 8000886:	fba2 2303 	umull	r2, r3, r2, r3
 800088a:	0c9a      	lsrs	r2, r3, #18
 800088c:	4613      	mov	r3, r2
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	4413      	add	r3, r2
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000896:	e002      	b.n	800089e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	3b01      	subs	r3, #1
 800089c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d1f9      	bne.n	8000898 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	689b      	ldr	r3, [r3, #8]
 80008aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d007      	beq.n	80008c2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	689b      	ldr	r3, [r3, #8]
 80008b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80008bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80008c0:	d110      	bne.n	80008e4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	f023 0312 	bic.w	r3, r3, #18
 80008ca:	f043 0210 	orr.w	r2, r3, #16
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d6:	f043 0201 	orr.w	r2, r3, #1
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80008de:	2301      	movs	r3, #1
 80008e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e8:	f003 0310 	and.w	r3, r3, #16
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	f040 8150 	bne.w	8000b92 <HAL_ADC_Init+0x3ce>
 80008f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	f040 814b 	bne.w	8000b92 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	689b      	ldr	r3, [r3, #8]
 8000902:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000906:	2b00      	cmp	r3, #0
 8000908:	f040 8143 	bne.w	8000b92 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000910:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000914:	f043 0202 	orr.w	r2, r3, #2
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000924:	d004      	beq.n	8000930 <HAL_ADC_Init+0x16c>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a6a      	ldr	r2, [pc, #424]	; (8000ad4 <HAL_ADC_Init+0x310>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d101      	bne.n	8000934 <HAL_ADC_Init+0x170>
 8000930:	4b69      	ldr	r3, [pc, #420]	; (8000ad8 <HAL_ADC_Init+0x314>)
 8000932:	e000      	b.n	8000936 <HAL_ADC_Init+0x172>
 8000934:	4b69      	ldr	r3, [pc, #420]	; (8000adc <HAL_ADC_Init+0x318>)
 8000936:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000940:	d102      	bne.n	8000948 <HAL_ADC_Init+0x184>
 8000942:	4b64      	ldr	r3, [pc, #400]	; (8000ad4 <HAL_ADC_Init+0x310>)
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	e01a      	b.n	800097e <HAL_ADC_Init+0x1ba>
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a61      	ldr	r2, [pc, #388]	; (8000ad4 <HAL_ADC_Init+0x310>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d103      	bne.n	800095a <HAL_ADC_Init+0x196>
 8000952:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	e011      	b.n	800097e <HAL_ADC_Init+0x1ba>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a60      	ldr	r2, [pc, #384]	; (8000ae0 <HAL_ADC_Init+0x31c>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d102      	bne.n	800096a <HAL_ADC_Init+0x1a6>
 8000964:	4b5f      	ldr	r3, [pc, #380]	; (8000ae4 <HAL_ADC_Init+0x320>)
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	e009      	b.n	800097e <HAL_ADC_Init+0x1ba>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a5d      	ldr	r2, [pc, #372]	; (8000ae4 <HAL_ADC_Init+0x320>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d102      	bne.n	800097a <HAL_ADC_Init+0x1b6>
 8000974:	4b5a      	ldr	r3, [pc, #360]	; (8000ae0 <HAL_ADC_Init+0x31c>)
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	e001      	b.n	800097e <HAL_ADC_Init+0x1ba>
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	689b      	ldr	r3, [r3, #8]
 8000984:	f003 0303 	and.w	r3, r3, #3
 8000988:	2b01      	cmp	r3, #1
 800098a:	d108      	bne.n	800099e <HAL_ADC_Init+0x1da>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	2b01      	cmp	r3, #1
 8000998:	d101      	bne.n	800099e <HAL_ADC_Init+0x1da>
 800099a:	2301      	movs	r3, #1
 800099c:	e000      	b.n	80009a0 <HAL_ADC_Init+0x1dc>
 800099e:	2300      	movs	r3, #0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d11c      	bne.n	80009de <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80009a4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d010      	beq.n	80009cc <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	f003 0303 	and.w	r3, r3, #3
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d107      	bne.n	80009c6 <HAL_ADC_Init+0x202>
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d101      	bne.n	80009c6 <HAL_ADC_Init+0x202>
 80009c2:	2301      	movs	r3, #1
 80009c4:	e000      	b.n	80009c8 <HAL_ADC_Init+0x204>
 80009c6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d108      	bne.n	80009de <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80009cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009ce:	689b      	ldr	r3, [r3, #8]
 80009d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	431a      	orrs	r2, r3
 80009da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009dc:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	7e5b      	ldrb	r3, [r3, #25]
 80009e2:	035b      	lsls	r3, r3, #13
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80009e8:	2a01      	cmp	r2, #1
 80009ea:	d002      	beq.n	80009f2 <HAL_ADC_Init+0x22e>
 80009ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009f0:	e000      	b.n	80009f4 <HAL_ADC_Init+0x230>
 80009f2:	2200      	movs	r2, #0
 80009f4:	431a      	orrs	r2, r3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	68db      	ldr	r3, [r3, #12]
 80009fa:	431a      	orrs	r2, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000a04:	4313      	orrs	r3, r2
 8000a06:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d11b      	bne.n	8000a4a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	7e5b      	ldrb	r3, [r3, #25]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d109      	bne.n	8000a2e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	045a      	lsls	r2, r3, #17
 8000a22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a24:	4313      	orrs	r3, r2
 8000a26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a2a:	663b      	str	r3, [r7, #96]	; 0x60
 8000a2c:	e00d      	b.n	8000a4a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000a36:	f043 0220 	orr.w	r2, r3, #32
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	f043 0201 	orr.w	r2, r3, #1
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d054      	beq.n	8000afc <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a22      	ldr	r2, [pc, #136]	; (8000ae0 <HAL_ADC_Init+0x31c>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d004      	beq.n	8000a66 <HAL_ADC_Init+0x2a2>
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a20      	ldr	r2, [pc, #128]	; (8000ae4 <HAL_ADC_Init+0x320>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d140      	bne.n	8000ae8 <HAL_ADC_Init+0x324>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a6a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000a6e:	d02a      	beq.n	8000ac6 <HAL_ADC_Init+0x302>
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a78:	d022      	beq.n	8000ac0 <HAL_ADC_Init+0x2fc>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a7e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000a82:	d01a      	beq.n	8000aba <HAL_ADC_Init+0x2f6>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a88:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8000a8c:	d012      	beq.n	8000ab4 <HAL_ADC_Init+0x2f0>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a92:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8000a96:	d00a      	beq.n	8000aae <HAL_ADC_Init+0x2ea>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a9c:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8000aa0:	d002      	beq.n	8000aa8 <HAL_ADC_Init+0x2e4>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa6:	e023      	b.n	8000af0 <HAL_ADC_Init+0x32c>
 8000aa8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000aac:	e020      	b.n	8000af0 <HAL_ADC_Init+0x32c>
 8000aae:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000ab2:	e01d      	b.n	8000af0 <HAL_ADC_Init+0x32c>
 8000ab4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000ab8:	e01a      	b.n	8000af0 <HAL_ADC_Init+0x32c>
 8000aba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000abe:	e017      	b.n	8000af0 <HAL_ADC_Init+0x32c>
 8000ac0:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000ac4:	e014      	b.n	8000af0 <HAL_ADC_Init+0x32c>
 8000ac6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000aca:	e011      	b.n	8000af0 <HAL_ADC_Init+0x32c>
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	431bde83 	.word	0x431bde83
 8000ad4:	50000100 	.word	0x50000100
 8000ad8:	50000300 	.word	0x50000300
 8000adc:	50000700 	.word	0x50000700
 8000ae0:	50000400 	.word	0x50000400
 8000ae4:	50000500 	.word	0x50000500
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000af4:	4313      	orrs	r3, r2
 8000af6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000af8:	4313      	orrs	r3, r2
 8000afa:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	f003 030c 	and.w	r3, r3, #12
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d114      	bne.n	8000b34 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	6812      	ldr	r2, [r2, #0]
 8000b14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000b18:	f023 0302 	bic.w	r3, r3, #2
 8000b1c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	7e1b      	ldrb	r3, [r3, #24]
 8000b22:	039a      	lsls	r2, r3, #14
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b30:	4313      	orrs	r3, r2
 8000b32:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	68da      	ldr	r2, [r3, #12]
 8000b3a:	4b1e      	ldr	r3, [pc, #120]	; (8000bb4 <HAL_ADC_Init+0x3f0>)
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	6812      	ldr	r2, [r2, #0]
 8000b42:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000b44:	430b      	orrs	r3, r1
 8000b46:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	691b      	ldr	r3, [r3, #16]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d10c      	bne.n	8000b6a <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f023 010f 	bic.w	r1, r3, #15
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	69db      	ldr	r3, [r3, #28]
 8000b5e:	1e5a      	subs	r2, r3, #1
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	430a      	orrs	r2, r1
 8000b66:	631a      	str	r2, [r3, #48]	; 0x30
 8000b68:	e007      	b.n	8000b7a <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f022 020f 	bic.w	r2, r2, #15
 8000b78:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	f023 0303 	bic.w	r3, r3, #3
 8000b88:	f043 0201 	orr.w	r2, r3, #1
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	641a      	str	r2, [r3, #64]	; 0x40
 8000b90:	e00a      	b.n	8000ba8 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	f023 0312 	bic.w	r3, r3, #18
 8000b9a:	f043 0210 	orr.w	r2, r3, #16
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000ba8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3768      	adds	r7, #104	; 0x68
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	fff0c007 	.word	0xfff0c007

08000bb8 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	689b      	ldr	r3, [r3, #8]
 8000bca:	f003 0304 	and.w	r3, r3, #4
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	f040 80f9 	bne.w	8000dc6 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d101      	bne.n	8000be2 <HAL_ADC_Start+0x2a>
 8000bde:	2302      	movs	r3, #2
 8000be0:	e0f4      	b.n	8000dcc <HAL_ADC_Start+0x214>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2201      	movs	r2, #1
 8000be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f000 fe5a 	bl	80018a4 <ADC_Enable>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f040 80e0 	bne.w	8000dbc <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c00:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000c04:	f023 0301 	bic.w	r3, r3, #1
 8000c08:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c18:	d004      	beq.n	8000c24 <HAL_ADC_Start+0x6c>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a6d      	ldr	r2, [pc, #436]	; (8000dd4 <HAL_ADC_Start+0x21c>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d106      	bne.n	8000c32 <HAL_ADC_Start+0x7a>
 8000c24:	4b6c      	ldr	r3, [pc, #432]	; (8000dd8 <HAL_ADC_Start+0x220>)
 8000c26:	689b      	ldr	r3, [r3, #8]
 8000c28:	f003 031f 	and.w	r3, r3, #31
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d010      	beq.n	8000c52 <HAL_ADC_Start+0x9a>
 8000c30:	e005      	b.n	8000c3e <HAL_ADC_Start+0x86>
 8000c32:	4b6a      	ldr	r3, [pc, #424]	; (8000ddc <HAL_ADC_Start+0x224>)
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	f003 031f 	and.w	r3, r3, #31
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d009      	beq.n	8000c52 <HAL_ADC_Start+0x9a>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c46:	d004      	beq.n	8000c52 <HAL_ADC_Start+0x9a>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a64      	ldr	r2, [pc, #400]	; (8000de0 <HAL_ADC_Start+0x228>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d115      	bne.n	8000c7e <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d036      	beq.n	8000cda <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c70:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c74:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000c7c:	e02d      	b.n	8000cda <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c92:	d004      	beq.n	8000c9e <HAL_ADC_Start+0xe6>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a4e      	ldr	r2, [pc, #312]	; (8000dd4 <HAL_ADC_Start+0x21c>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d10a      	bne.n	8000cb4 <HAL_ADC_Start+0xfc>
 8000c9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	bf14      	ite	ne
 8000cac:	2301      	movne	r3, #1
 8000cae:	2300      	moveq	r3, #0
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	e008      	b.n	8000cc6 <HAL_ADC_Start+0x10e>
 8000cb4:	4b4a      	ldr	r3, [pc, #296]	; (8000de0 <HAL_ADC_Start+0x228>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	bf14      	ite	ne
 8000cc0:	2301      	movne	r3, #1
 8000cc2:	2300      	moveq	r3, #0
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d007      	beq.n	8000cda <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000cd2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ce6:	d106      	bne.n	8000cf6 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cec:	f023 0206 	bic.w	r2, r3, #6
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	645a      	str	r2, [r3, #68]	; 0x44
 8000cf4:	e002      	b.n	8000cfc <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	221c      	movs	r2, #28
 8000d0a:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d14:	d004      	beq.n	8000d20 <HAL_ADC_Start+0x168>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a2e      	ldr	r2, [pc, #184]	; (8000dd4 <HAL_ADC_Start+0x21c>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d106      	bne.n	8000d2e <HAL_ADC_Start+0x176>
 8000d20:	4b2d      	ldr	r3, [pc, #180]	; (8000dd8 <HAL_ADC_Start+0x220>)
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	f003 031f 	and.w	r3, r3, #31
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d03e      	beq.n	8000daa <HAL_ADC_Start+0x1f2>
 8000d2c:	e005      	b.n	8000d3a <HAL_ADC_Start+0x182>
 8000d2e:	4b2b      	ldr	r3, [pc, #172]	; (8000ddc <HAL_ADC_Start+0x224>)
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	f003 031f 	and.w	r3, r3, #31
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d037      	beq.n	8000daa <HAL_ADC_Start+0x1f2>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d42:	d004      	beq.n	8000d4e <HAL_ADC_Start+0x196>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a22      	ldr	r2, [pc, #136]	; (8000dd4 <HAL_ADC_Start+0x21c>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d106      	bne.n	8000d5c <HAL_ADC_Start+0x1a4>
 8000d4e:	4b22      	ldr	r3, [pc, #136]	; (8000dd8 <HAL_ADC_Start+0x220>)
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	f003 031f 	and.w	r3, r3, #31
 8000d56:	2b05      	cmp	r3, #5
 8000d58:	d027      	beq.n	8000daa <HAL_ADC_Start+0x1f2>
 8000d5a:	e005      	b.n	8000d68 <HAL_ADC_Start+0x1b0>
 8000d5c:	4b1f      	ldr	r3, [pc, #124]	; (8000ddc <HAL_ADC_Start+0x224>)
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	f003 031f 	and.w	r3, r3, #31
 8000d64:	2b05      	cmp	r3, #5
 8000d66:	d020      	beq.n	8000daa <HAL_ADC_Start+0x1f2>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d70:	d004      	beq.n	8000d7c <HAL_ADC_Start+0x1c4>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a17      	ldr	r2, [pc, #92]	; (8000dd4 <HAL_ADC_Start+0x21c>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d106      	bne.n	8000d8a <HAL_ADC_Start+0x1d2>
 8000d7c:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <HAL_ADC_Start+0x220>)
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	f003 031f 	and.w	r3, r3, #31
 8000d84:	2b09      	cmp	r3, #9
 8000d86:	d010      	beq.n	8000daa <HAL_ADC_Start+0x1f2>
 8000d88:	e005      	b.n	8000d96 <HAL_ADC_Start+0x1de>
 8000d8a:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <HAL_ADC_Start+0x224>)
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	f003 031f 	and.w	r3, r3, #31
 8000d92:	2b09      	cmp	r3, #9
 8000d94:	d009      	beq.n	8000daa <HAL_ADC_Start+0x1f2>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d9e:	d004      	beq.n	8000daa <HAL_ADC_Start+0x1f2>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0e      	ldr	r2, [pc, #56]	; (8000de0 <HAL_ADC_Start+0x228>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d10f      	bne.n	8000dca <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	689a      	ldr	r2, [r3, #8]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f042 0204 	orr.w	r2, r2, #4
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	e006      	b.n	8000dca <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000dc4:	e001      	b.n	8000dca <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	50000100 	.word	0x50000100
 8000dd8:	50000300 	.word	0x50000300
 8000ddc:	50000700 	.word	0x50000700
 8000de0:	50000400 	.word	0x50000400

08000de4 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	2b08      	cmp	r3, #8
 8000df8:	d102      	bne.n	8000e00 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000dfa:	2308      	movs	r3, #8
 8000dfc:	617b      	str	r3, [r7, #20]
 8000dfe:	e03a      	b.n	8000e76 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e08:	d004      	beq.n	8000e14 <HAL_ADC_PollForConversion+0x30>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a72      	ldr	r2, [pc, #456]	; (8000fd8 <HAL_ADC_PollForConversion+0x1f4>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d101      	bne.n	8000e18 <HAL_ADC_PollForConversion+0x34>
 8000e14:	4b71      	ldr	r3, [pc, #452]	; (8000fdc <HAL_ADC_PollForConversion+0x1f8>)
 8000e16:	e000      	b.n	8000e1a <HAL_ADC_PollForConversion+0x36>
 8000e18:	4b71      	ldr	r3, [pc, #452]	; (8000fe0 <HAL_ADC_PollForConversion+0x1fc>)
 8000e1a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	f003 031f 	and.w	r3, r3, #31
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d112      	bne.n	8000e4e <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d11d      	bne.n	8000e72 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	f043 0220 	orr.w	r2, r3, #32
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2200      	movs	r2, #0
 8000e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e0bf      	b.n	8000fce <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d00b      	beq.n	8000e72 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	f043 0220 	orr.w	r2, r3, #32
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e0ad      	b.n	8000fce <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000e72:	230c      	movs	r3, #12
 8000e74:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e7e:	d004      	beq.n	8000e8a <HAL_ADC_PollForConversion+0xa6>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a54      	ldr	r2, [pc, #336]	; (8000fd8 <HAL_ADC_PollForConversion+0x1f4>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d106      	bne.n	8000e98 <HAL_ADC_PollForConversion+0xb4>
 8000e8a:	4b54      	ldr	r3, [pc, #336]	; (8000fdc <HAL_ADC_PollForConversion+0x1f8>)
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	f003 031f 	and.w	r3, r3, #31
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d010      	beq.n	8000eb8 <HAL_ADC_PollForConversion+0xd4>
 8000e96:	e005      	b.n	8000ea4 <HAL_ADC_PollForConversion+0xc0>
 8000e98:	4b51      	ldr	r3, [pc, #324]	; (8000fe0 <HAL_ADC_PollForConversion+0x1fc>)
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	f003 031f 	and.w	r3, r3, #31
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d009      	beq.n	8000eb8 <HAL_ADC_PollForConversion+0xd4>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000eac:	d004      	beq.n	8000eb8 <HAL_ADC_PollForConversion+0xd4>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a4c      	ldr	r2, [pc, #304]	; (8000fe4 <HAL_ADC_PollForConversion+0x200>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d104      	bne.n	8000ec2 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	e00f      	b.n	8000ee2 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000eca:	d004      	beq.n	8000ed6 <HAL_ADC_PollForConversion+0xf2>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a41      	ldr	r2, [pc, #260]	; (8000fd8 <HAL_ADC_PollForConversion+0x1f4>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d102      	bne.n	8000edc <HAL_ADC_PollForConversion+0xf8>
 8000ed6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000eda:	e000      	b.n	8000ede <HAL_ADC_PollForConversion+0xfa>
 8000edc:	4b41      	ldr	r3, [pc, #260]	; (8000fe4 <HAL_ADC_PollForConversion+0x200>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8000ee2:	f7ff fc63 	bl	80007ac <HAL_GetTick>
 8000ee6:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000ee8:	e021      	b.n	8000f2e <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef0:	d01d      	beq.n	8000f2e <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d007      	beq.n	8000f08 <HAL_ADC_PollForConversion+0x124>
 8000ef8:	f7ff fc58 	bl	80007ac <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	683a      	ldr	r2, [r7, #0]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d212      	bcs.n	8000f2e <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	4013      	ands	r3, r2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d10b      	bne.n	8000f2e <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	f043 0204 	orr.w	r2, r3, #4
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e04f      	b.n	8000fce <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	4013      	ands	r3, r2
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d0d6      	beq.n	8000eea <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f40:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d131      	bne.n	8000fba <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d12c      	bne.n	8000fba <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 0308 	and.w	r3, r3, #8
 8000f6a:	2b08      	cmp	r3, #8
 8000f6c:	d125      	bne.n	8000fba <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	f003 0304 	and.w	r3, r3, #4
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d112      	bne.n	8000fa2 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d112      	bne.n	8000fba <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f98:	f043 0201 	orr.w	r2, r3, #1
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	641a      	str	r2, [r3, #64]	; 0x40
 8000fa0:	e00b      	b.n	8000fba <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	f043 0220 	orr.w	r2, r3, #32
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	f043 0201 	orr.w	r2, r3, #1
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d103      	bne.n	8000fcc <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	50000100 	.word	0x50000100
 8000fdc:	50000300 	.word	0x50000300
 8000fe0:	50000700 	.word	0x50000700
 8000fe4:	50000400 	.word	0x50000400

08000fe8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b084      	sub	sp, #16
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
 800100a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800100c:	2300      	movs	r3, #0
 800100e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001016:	2b01      	cmp	r3, #1
 8001018:	d101      	bne.n	800101e <HAL_ADCEx_Calibration_Start+0x1c>
 800101a:	2302      	movs	r3, #2
 800101c:	e05f      	b.n	80010de <HAL_ADCEx_Calibration_Start+0xdc>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2201      	movs	r2, #1
 8001022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 fca0 	bl	800196c <ADC_Disable>
 800102c:	4603      	mov	r3, r0
 800102e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d14e      	bne.n	80010d4 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2201      	movs	r2, #1
 800103a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	689a      	ldr	r2, [r3, #8]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800104a:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d107      	bne.n	8001062 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	689a      	ldr	r2, [r3, #8]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001060:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	689a      	ldr	r2, [r3, #8]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001070:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001072:	f7ff fb9b 	bl	80007ac <HAL_GetTick>
 8001076:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001078:	e01c      	b.n	80010b4 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800107a:	f7ff fb97 	bl	80007ac <HAL_GetTick>
 800107e:	4602      	mov	r2, r0
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	2b0a      	cmp	r3, #10
 8001086:	d915      	bls.n	80010b4 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001092:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001096:	d10d      	bne.n	80010b4 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	f023 0312 	bic.w	r3, r3, #18
 80010a0:	f043 0210 	orr.w	r2, r3, #16
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e014      	b.n	80010de <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80010be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80010c2:	d0da      	beq.n	800107a <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c8:	f023 0303 	bic.w	r3, r3, #3
 80010cc:	f043 0201 	orr.w	r2, r3, #1
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b09b      	sub	sp, #108	; 0x6c
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001102:	2b01      	cmp	r3, #1
 8001104:	d101      	bne.n	800110a <HAL_ADC_ConfigChannel+0x22>
 8001106:	2302      	movs	r3, #2
 8001108:	e2ca      	b.n	80016a0 <HAL_ADC_ConfigChannel+0x5b8>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2201      	movs	r2, #1
 800110e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	2b00      	cmp	r3, #0
 800111e:	f040 82ae 	bne.w	800167e <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	2b04      	cmp	r3, #4
 8001128:	d81c      	bhi.n	8001164 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685a      	ldr	r2, [r3, #4]
 8001134:	4613      	mov	r3, r2
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	4413      	add	r3, r2
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	461a      	mov	r2, r3
 800113e:	231f      	movs	r3, #31
 8001140:	4093      	lsls	r3, r2
 8001142:	43db      	mvns	r3, r3
 8001144:	4019      	ands	r1, r3
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	6818      	ldr	r0, [r3, #0]
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685a      	ldr	r2, [r3, #4]
 800114e:	4613      	mov	r3, r2
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	4413      	add	r3, r2
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	fa00 f203 	lsl.w	r2, r0, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	430a      	orrs	r2, r1
 8001160:	631a      	str	r2, [r3, #48]	; 0x30
 8001162:	e063      	b.n	800122c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b09      	cmp	r3, #9
 800116a:	d81e      	bhi.n	80011aa <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	4613      	mov	r3, r2
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	4413      	add	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	3b1e      	subs	r3, #30
 8001180:	221f      	movs	r2, #31
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	4019      	ands	r1, r3
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	6818      	ldr	r0, [r3, #0]
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	4613      	mov	r3, r2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4413      	add	r3, r2
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	3b1e      	subs	r3, #30
 800119c:	fa00 f203 	lsl.w	r2, r0, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	430a      	orrs	r2, r1
 80011a6:	635a      	str	r2, [r3, #52]	; 0x34
 80011a8:	e040      	b.n	800122c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2b0e      	cmp	r3, #14
 80011b0:	d81e      	bhi.n	80011f0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	4613      	mov	r3, r2
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	4413      	add	r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	3b3c      	subs	r3, #60	; 0x3c
 80011c6:	221f      	movs	r2, #31
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	4019      	ands	r1, r3
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	6818      	ldr	r0, [r3, #0]
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685a      	ldr	r2, [r3, #4]
 80011d8:	4613      	mov	r3, r2
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	4413      	add	r3, r2
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	3b3c      	subs	r3, #60	; 0x3c
 80011e2:	fa00 f203 	lsl.w	r2, r0, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	430a      	orrs	r2, r1
 80011ec:	639a      	str	r2, [r3, #56]	; 0x38
 80011ee:	e01d      	b.n	800122c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685a      	ldr	r2, [r3, #4]
 80011fa:	4613      	mov	r3, r2
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	4413      	add	r3, r2
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	3b5a      	subs	r3, #90	; 0x5a
 8001204:	221f      	movs	r2, #31
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	4019      	ands	r1, r3
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	6818      	ldr	r0, [r3, #0]
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	4413      	add	r3, r2
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	3b5a      	subs	r3, #90	; 0x5a
 8001220:	fa00 f203 	lsl.w	r2, r0, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	430a      	orrs	r2, r1
 800122a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f003 030c 	and.w	r3, r3, #12
 8001236:	2b00      	cmp	r3, #0
 8001238:	f040 80e5 	bne.w	8001406 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b09      	cmp	r3, #9
 8001242:	d91c      	bls.n	800127e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6999      	ldr	r1, [r3, #24]
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	4613      	mov	r3, r2
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	4413      	add	r3, r2
 8001254:	3b1e      	subs	r3, #30
 8001256:	2207      	movs	r2, #7
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	4019      	ands	r1, r3
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	6898      	ldr	r0, [r3, #8]
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4613      	mov	r3, r2
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	4413      	add	r3, r2
 800126e:	3b1e      	subs	r3, #30
 8001270:	fa00 f203 	lsl.w	r2, r0, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	430a      	orrs	r2, r1
 800127a:	619a      	str	r2, [r3, #24]
 800127c:	e019      	b.n	80012b2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6959      	ldr	r1, [r3, #20]
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4613      	mov	r3, r2
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	4413      	add	r3, r2
 800128e:	2207      	movs	r2, #7
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	4019      	ands	r1, r3
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	6898      	ldr	r0, [r3, #8]
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4613      	mov	r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	4413      	add	r3, r2
 80012a6:	fa00 f203 	lsl.w	r2, r0, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	430a      	orrs	r2, r1
 80012b0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	695a      	ldr	r2, [r3, #20]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	08db      	lsrs	r3, r3, #3
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	2b03      	cmp	r3, #3
 80012d2:	d84f      	bhi.n	8001374 <HAL_ADC_ConfigChannel+0x28c>
 80012d4:	a201      	add	r2, pc, #4	; (adr r2, 80012dc <HAL_ADC_ConfigChannel+0x1f4>)
 80012d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012da:	bf00      	nop
 80012dc:	080012ed 	.word	0x080012ed
 80012e0:	0800130f 	.word	0x0800130f
 80012e4:	08001331 	.word	0x08001331
 80012e8:	08001353 	.word	0x08001353
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012f2:	4b9a      	ldr	r3, [pc, #616]	; (800155c <HAL_ADC_ConfigChannel+0x474>)
 80012f4:	4013      	ands	r3, r2
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	6812      	ldr	r2, [r2, #0]
 80012fa:	0691      	lsls	r1, r2, #26
 80012fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012fe:	430a      	orrs	r2, r1
 8001300:	431a      	orrs	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800130a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800130c:	e07e      	b.n	800140c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001314:	4b91      	ldr	r3, [pc, #580]	; (800155c <HAL_ADC_ConfigChannel+0x474>)
 8001316:	4013      	ands	r3, r2
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	6812      	ldr	r2, [r2, #0]
 800131c:	0691      	lsls	r1, r2, #26
 800131e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001320:	430a      	orrs	r2, r1
 8001322:	431a      	orrs	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800132c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800132e:	e06d      	b.n	800140c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001336:	4b89      	ldr	r3, [pc, #548]	; (800155c <HAL_ADC_ConfigChannel+0x474>)
 8001338:	4013      	ands	r3, r2
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	6812      	ldr	r2, [r2, #0]
 800133e:	0691      	lsls	r1, r2, #26
 8001340:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001342:	430a      	orrs	r2, r1
 8001344:	431a      	orrs	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800134e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001350:	e05c      	b.n	800140c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001358:	4b80      	ldr	r3, [pc, #512]	; (800155c <HAL_ADC_ConfigChannel+0x474>)
 800135a:	4013      	ands	r3, r2
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	6812      	ldr	r2, [r2, #0]
 8001360:	0691      	lsls	r1, r2, #26
 8001362:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001364:	430a      	orrs	r2, r1
 8001366:	431a      	orrs	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001370:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001372:	e04b      	b.n	800140c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800137a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	069b      	lsls	r3, r3, #26
 8001384:	429a      	cmp	r2, r3
 8001386:	d107      	bne.n	8001398 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001396:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800139e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	069b      	lsls	r3, r3, #26
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d107      	bne.n	80013bc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80013ba:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80013c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	069b      	lsls	r3, r3, #26
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d107      	bne.n	80013e0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80013de:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80013e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	069b      	lsls	r3, r3, #26
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d10a      	bne.n	800140a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001402:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001404:	e001      	b.n	800140a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001406:	bf00      	nop
 8001408:	e000      	b.n	800140c <HAL_ADC_ConfigChannel+0x324>
      break;
 800140a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f003 0303 	and.w	r3, r3, #3
 8001416:	2b01      	cmp	r3, #1
 8001418:	d108      	bne.n	800142c <HAL_ADC_ConfigChannel+0x344>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	2b01      	cmp	r3, #1
 8001426:	d101      	bne.n	800142c <HAL_ADC_ConfigChannel+0x344>
 8001428:	2301      	movs	r3, #1
 800142a:	e000      	b.n	800142e <HAL_ADC_ConfigChannel+0x346>
 800142c:	2300      	movs	r3, #0
 800142e:	2b00      	cmp	r3, #0
 8001430:	f040 8130 	bne.w	8001694 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d00f      	beq.n	800145c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2201      	movs	r2, #1
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43da      	mvns	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	400a      	ands	r2, r1
 8001456:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800145a:	e049      	b.n	80014f0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2201      	movs	r2, #1
 800146a:	409a      	lsls	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	430a      	orrs	r2, r1
 8001472:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2b09      	cmp	r3, #9
 800147c:	d91c      	bls.n	80014b8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6999      	ldr	r1, [r3, #24]
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	4613      	mov	r3, r2
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	4413      	add	r3, r2
 800148e:	3b1b      	subs	r3, #27
 8001490:	2207      	movs	r2, #7
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	4019      	ands	r1, r3
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	6898      	ldr	r0, [r3, #8]
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	4613      	mov	r3, r2
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	4413      	add	r3, r2
 80014a8:	3b1b      	subs	r3, #27
 80014aa:	fa00 f203 	lsl.w	r2, r0, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	619a      	str	r2, [r3, #24]
 80014b6:	e01b      	b.n	80014f0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6959      	ldr	r1, [r3, #20]
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	1c5a      	adds	r2, r3, #1
 80014c4:	4613      	mov	r3, r2
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4413      	add	r3, r2
 80014ca:	2207      	movs	r2, #7
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	4019      	ands	r1, r3
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	6898      	ldr	r0, [r3, #8]
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	1c5a      	adds	r2, r3, #1
 80014de:	4613      	mov	r3, r2
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	4413      	add	r3, r2
 80014e4:	fa00 f203 	lsl.w	r2, r0, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	430a      	orrs	r2, r1
 80014ee:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014f8:	d004      	beq.n	8001504 <HAL_ADC_ConfigChannel+0x41c>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a18      	ldr	r2, [pc, #96]	; (8001560 <HAL_ADC_ConfigChannel+0x478>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d101      	bne.n	8001508 <HAL_ADC_ConfigChannel+0x420>
 8001504:	4b17      	ldr	r3, [pc, #92]	; (8001564 <HAL_ADC_ConfigChannel+0x47c>)
 8001506:	e000      	b.n	800150a <HAL_ADC_ConfigChannel+0x422>
 8001508:	4b17      	ldr	r3, [pc, #92]	; (8001568 <HAL_ADC_ConfigChannel+0x480>)
 800150a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b10      	cmp	r3, #16
 8001512:	d105      	bne.n	8001520 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001514:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800151c:	2b00      	cmp	r3, #0
 800151e:	d015      	beq.n	800154c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001524:	2b11      	cmp	r3, #17
 8001526:	d105      	bne.n	8001534 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001528:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001530:	2b00      	cmp	r3, #0
 8001532:	d00b      	beq.n	800154c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001538:	2b12      	cmp	r3, #18
 800153a:	f040 80ab 	bne.w	8001694 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800153e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001546:	2b00      	cmp	r3, #0
 8001548:	f040 80a4 	bne.w	8001694 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001554:	d10a      	bne.n	800156c <HAL_ADC_ConfigChannel+0x484>
 8001556:	4b02      	ldr	r3, [pc, #8]	; (8001560 <HAL_ADC_ConfigChannel+0x478>)
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	e022      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x4ba>
 800155c:	83fff000 	.word	0x83fff000
 8001560:	50000100 	.word	0x50000100
 8001564:	50000300 	.word	0x50000300
 8001568:	50000700 	.word	0x50000700
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a4e      	ldr	r2, [pc, #312]	; (80016ac <HAL_ADC_ConfigChannel+0x5c4>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d103      	bne.n	800157e <HAL_ADC_ConfigChannel+0x496>
 8001576:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	e011      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x4ba>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a4b      	ldr	r2, [pc, #300]	; (80016b0 <HAL_ADC_ConfigChannel+0x5c8>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d102      	bne.n	800158e <HAL_ADC_ConfigChannel+0x4a6>
 8001588:	4b4a      	ldr	r3, [pc, #296]	; (80016b4 <HAL_ADC_ConfigChannel+0x5cc>)
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	e009      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x4ba>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a48      	ldr	r2, [pc, #288]	; (80016b4 <HAL_ADC_ConfigChannel+0x5cc>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d102      	bne.n	800159e <HAL_ADC_ConfigChannel+0x4b6>
 8001598:	4b45      	ldr	r3, [pc, #276]	; (80016b0 <HAL_ADC_ConfigChannel+0x5c8>)
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	e001      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x4ba>
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f003 0303 	and.w	r3, r3, #3
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d108      	bne.n	80015c2 <HAL_ADC_ConfigChannel+0x4da>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d101      	bne.n	80015c2 <HAL_ADC_ConfigChannel+0x4da>
 80015be:	2301      	movs	r3, #1
 80015c0:	e000      	b.n	80015c4 <HAL_ADC_ConfigChannel+0x4dc>
 80015c2:	2300      	movs	r3, #0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d150      	bne.n	800166a <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80015c8:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d010      	beq.n	80015f0 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 0303 	and.w	r3, r3, #3
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d107      	bne.n	80015ea <HAL_ADC_ConfigChannel+0x502>
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d101      	bne.n	80015ea <HAL_ADC_ConfigChannel+0x502>
 80015e6:	2301      	movs	r3, #1
 80015e8:	e000      	b.n	80015ec <HAL_ADC_ConfigChannel+0x504>
 80015ea:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d13c      	bne.n	800166a <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b10      	cmp	r3, #16
 80015f6:	d11d      	bne.n	8001634 <HAL_ADC_ConfigChannel+0x54c>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001600:	d118      	bne.n	8001634 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800160a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800160c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800160e:	4b2a      	ldr	r3, [pc, #168]	; (80016b8 <HAL_ADC_ConfigChannel+0x5d0>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a2a      	ldr	r2, [pc, #168]	; (80016bc <HAL_ADC_ConfigChannel+0x5d4>)
 8001614:	fba2 2303 	umull	r2, r3, r2, r3
 8001618:	0c9a      	lsrs	r2, r3, #18
 800161a:	4613      	mov	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001624:	e002      	b.n	800162c <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	3b01      	subs	r3, #1
 800162a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f9      	bne.n	8001626 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001632:	e02e      	b.n	8001692 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b11      	cmp	r3, #17
 800163a:	d10b      	bne.n	8001654 <HAL_ADC_ConfigChannel+0x56c>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001644:	d106      	bne.n	8001654 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001646:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800164e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001650:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001652:	e01e      	b.n	8001692 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b12      	cmp	r3, #18
 800165a:	d11a      	bne.n	8001692 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800165c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001664:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001666:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001668:	e013      	b.n	8001692 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f043 0220 	orr.w	r2, r3, #32
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800167c:	e00a      	b.n	8001694 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f043 0220 	orr.w	r2, r3, #32
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001690:	e000      	b.n	8001694 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001692:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800169c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	376c      	adds	r7, #108	; 0x6c
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	50000100 	.word	0x50000100
 80016b0:	50000400 	.word	0x50000400
 80016b4:	50000500 	.word	0x50000500
 80016b8:	20000000 	.word	0x20000000
 80016bc:	431bde83 	.word	0x431bde83

080016c0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b099      	sub	sp, #100	; 0x64
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016ca:	2300      	movs	r3, #0
 80016cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016d8:	d102      	bne.n	80016e0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80016da:	4b6d      	ldr	r3, [pc, #436]	; (8001890 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	e01a      	b.n	8001716 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a6a      	ldr	r2, [pc, #424]	; (8001890 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d103      	bne.n	80016f2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80016ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	e011      	b.n	8001716 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a67      	ldr	r2, [pc, #412]	; (8001894 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d102      	bne.n	8001702 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80016fc:	4b66      	ldr	r3, [pc, #408]	; (8001898 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	e009      	b.n	8001716 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a64      	ldr	r2, [pc, #400]	; (8001898 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d102      	bne.n	8001712 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800170c:	4b61      	ldr	r3, [pc, #388]	; (8001894 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	e001      	b.n	8001716 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001712:	2300      	movs	r3, #0
 8001714:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e0b0      	b.n	8001882 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001726:	2b01      	cmp	r3, #1
 8001728:	d101      	bne.n	800172e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800172a:	2302      	movs	r3, #2
 800172c:	e0a9      	b.n	8001882 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2201      	movs	r2, #1
 8001732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	f040 808d 	bne.w	8001860 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 0304 	and.w	r3, r3, #4
 800174e:	2b00      	cmp	r3, #0
 8001750:	f040 8086 	bne.w	8001860 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800175c:	d004      	beq.n	8001768 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a4b      	ldr	r2, [pc, #300]	; (8001890 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d101      	bne.n	800176c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001768:	4b4c      	ldr	r3, [pc, #304]	; (800189c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800176a:	e000      	b.n	800176e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800176c:	4b4c      	ldr	r3, [pc, #304]	; (80018a0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800176e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d040      	beq.n	80017fa <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001778:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	6859      	ldr	r1, [r3, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800178a:	035b      	lsls	r3, r3, #13
 800178c:	430b      	orrs	r3, r1
 800178e:	431a      	orrs	r2, r3
 8001790:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001792:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d108      	bne.n	80017b4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d101      	bne.n	80017b4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80017b0:	2301      	movs	r3, #1
 80017b2:	e000      	b.n	80017b6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80017b4:	2300      	movs	r3, #0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d15c      	bne.n	8001874 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d107      	bne.n	80017d6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d101      	bne.n	80017d6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80017d2:	2301      	movs	r3, #1
 80017d4:	e000      	b.n	80017d8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80017d6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d14b      	bne.n	8001874 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80017dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80017e4:	f023 030f 	bic.w	r3, r3, #15
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	6811      	ldr	r1, [r2, #0]
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	6892      	ldr	r2, [r2, #8]
 80017f0:	430a      	orrs	r2, r1
 80017f2:	431a      	orrs	r2, r3
 80017f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017f6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80017f8:	e03c      	b.n	8001874 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80017fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001802:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001804:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f003 0303 	and.w	r3, r3, #3
 8001810:	2b01      	cmp	r3, #1
 8001812:	d108      	bne.n	8001826 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b01      	cmp	r3, #1
 8001820:	d101      	bne.n	8001826 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001822:	2301      	movs	r3, #1
 8001824:	e000      	b.n	8001828 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001826:	2300      	movs	r3, #0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d123      	bne.n	8001874 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 0303 	and.w	r3, r3, #3
 8001834:	2b01      	cmp	r3, #1
 8001836:	d107      	bne.n	8001848 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	2b01      	cmp	r3, #1
 8001842:	d101      	bne.n	8001848 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001844:	2301      	movs	r3, #1
 8001846:	e000      	b.n	800184a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001848:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800184a:	2b00      	cmp	r3, #0
 800184c:	d112      	bne.n	8001874 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800184e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001856:	f023 030f 	bic.w	r3, r3, #15
 800185a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800185c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800185e:	e009      	b.n	8001874 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001864:	f043 0220 	orr.w	r2, r3, #32
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001872:	e000      	b.n	8001876 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001874:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800187e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001882:	4618      	mov	r0, r3
 8001884:	3764      	adds	r7, #100	; 0x64
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	50000100 	.word	0x50000100
 8001894:	50000400 	.word	0x50000400
 8001898:	50000500 	.word	0x50000500
 800189c:	50000300 	.word	0x50000300
 80018a0:	50000700 	.word	0x50000700

080018a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018ac:	2300      	movs	r3, #0
 80018ae:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d108      	bne.n	80018d0 <ADC_Enable+0x2c>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d101      	bne.n	80018d0 <ADC_Enable+0x2c>
 80018cc:	2301      	movs	r3, #1
 80018ce:	e000      	b.n	80018d2 <ADC_Enable+0x2e>
 80018d0:	2300      	movs	r3, #0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d143      	bne.n	800195e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	4b22      	ldr	r3, [pc, #136]	; (8001968 <ADC_Enable+0xc4>)
 80018de:	4013      	ands	r3, r2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d00d      	beq.n	8001900 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	f043 0210 	orr.w	r2, r3, #16
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f4:	f043 0201 	orr.w	r2, r3, #1
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e02f      	b.n	8001960 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	689a      	ldr	r2, [r3, #8]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f042 0201 	orr.w	r2, r2, #1
 800190e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001910:	f7fe ff4c 	bl	80007ac <HAL_GetTick>
 8001914:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001916:	e01b      	b.n	8001950 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001918:	f7fe ff48 	bl	80007ac <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d914      	bls.n	8001950 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	2b01      	cmp	r3, #1
 8001932:	d00d      	beq.n	8001950 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	f043 0210 	orr.w	r2, r3, #16
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001944:	f043 0201 	orr.w	r2, r3, #1
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e007      	b.n	8001960 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b01      	cmp	r3, #1
 800195c:	d1dc      	bne.n	8001918 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	8000003f 	.word	0x8000003f

0800196c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 0303 	and.w	r3, r3, #3
 8001982:	2b01      	cmp	r3, #1
 8001984:	d108      	bne.n	8001998 <ADC_Disable+0x2c>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	2b01      	cmp	r3, #1
 8001992:	d101      	bne.n	8001998 <ADC_Disable+0x2c>
 8001994:	2301      	movs	r3, #1
 8001996:	e000      	b.n	800199a <ADC_Disable+0x2e>
 8001998:	2300      	movs	r3, #0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d047      	beq.n	8001a2e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 030d 	and.w	r3, r3, #13
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d10f      	bne.n	80019cc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f042 0202 	orr.w	r2, r2, #2
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2203      	movs	r2, #3
 80019c2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80019c4:	f7fe fef2 	bl	80007ac <HAL_GetTick>
 80019c8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80019ca:	e029      	b.n	8001a20 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d0:	f043 0210 	orr.w	r2, r3, #16
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019dc:	f043 0201 	orr.w	r2, r3, #1
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e023      	b.n	8001a30 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019e8:	f7fe fee0 	bl	80007ac <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d914      	bls.n	8001a20 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d10d      	bne.n	8001a20 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a08:	f043 0210 	orr.w	r2, r3, #16
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a14:	f043 0201 	orr.w	r2, r3, #1
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e007      	b.n	8001a30 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d0dc      	beq.n	80019e8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <__NVIC_SetPriorityGrouping+0x44>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a4e:	68ba      	ldr	r2, [r7, #8]
 8001a50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a54:	4013      	ands	r3, r2
 8001a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a6a:	4a04      	ldr	r2, [pc, #16]	; (8001a7c <__NVIC_SetPriorityGrouping+0x44>)
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	60d3      	str	r3, [r2, #12]
}
 8001a70:	bf00      	nop
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a84:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <__NVIC_GetPriorityGrouping+0x18>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	0a1b      	lsrs	r3, r3, #8
 8001a8a:	f003 0307 	and.w	r3, r3, #7
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	6039      	str	r1, [r7, #0]
 8001aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	db0a      	blt.n	8001ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	490c      	ldr	r1, [pc, #48]	; (8001ae8 <__NVIC_SetPriority+0x4c>)
 8001ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aba:	0112      	lsls	r2, r2, #4
 8001abc:	b2d2      	uxtb	r2, r2
 8001abe:	440b      	add	r3, r1
 8001ac0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ac4:	e00a      	b.n	8001adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	4908      	ldr	r1, [pc, #32]	; (8001aec <__NVIC_SetPriority+0x50>)
 8001acc:	79fb      	ldrb	r3, [r7, #7]
 8001ace:	f003 030f 	and.w	r3, r3, #15
 8001ad2:	3b04      	subs	r3, #4
 8001ad4:	0112      	lsls	r2, r2, #4
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	440b      	add	r3, r1
 8001ada:	761a      	strb	r2, [r3, #24]
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	e000e100 	.word	0xe000e100
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b089      	sub	sp, #36	; 0x24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f1c3 0307 	rsb	r3, r3, #7
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	bf28      	it	cs
 8001b0e:	2304      	movcs	r3, #4
 8001b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	3304      	adds	r3, #4
 8001b16:	2b06      	cmp	r3, #6
 8001b18:	d902      	bls.n	8001b20 <NVIC_EncodePriority+0x30>
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3b03      	subs	r3, #3
 8001b1e:	e000      	b.n	8001b22 <NVIC_EncodePriority+0x32>
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b24:	f04f 32ff 	mov.w	r2, #4294967295
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43da      	mvns	r2, r3
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	401a      	ands	r2, r3
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b38:	f04f 31ff 	mov.w	r1, #4294967295
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b42:	43d9      	mvns	r1, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b48:	4313      	orrs	r3, r2
         );
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3724      	adds	r7, #36	; 0x24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3b01      	subs	r3, #1
 8001b64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b68:	d301      	bcc.n	8001b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e00f      	b.n	8001b8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b6e:	4a0a      	ldr	r2, [pc, #40]	; (8001b98 <SysTick_Config+0x40>)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b76:	210f      	movs	r1, #15
 8001b78:	f04f 30ff 	mov.w	r0, #4294967295
 8001b7c:	f7ff ff8e 	bl	8001a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b80:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <SysTick_Config+0x40>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b86:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <SysTick_Config+0x40>)
 8001b88:	2207      	movs	r2, #7
 8001b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	e000e010 	.word	0xe000e010

08001b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7ff ff47 	bl	8001a38 <__NVIC_SetPriorityGrouping>
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b086      	sub	sp, #24
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	4603      	mov	r3, r0
 8001bba:	60b9      	str	r1, [r7, #8]
 8001bbc:	607a      	str	r2, [r7, #4]
 8001bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bc4:	f7ff ff5c 	bl	8001a80 <__NVIC_GetPriorityGrouping>
 8001bc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	68b9      	ldr	r1, [r7, #8]
 8001bce:	6978      	ldr	r0, [r7, #20]
 8001bd0:	f7ff ff8e 	bl	8001af0 <NVIC_EncodePriority>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bda:	4611      	mov	r1, r2
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff ff5d 	bl	8001a9c <__NVIC_SetPriority>
}
 8001be2:	bf00      	nop
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff ffb0 	bl	8001b58 <SysTick_Config>
 8001bf8:	4603      	mov	r3, r0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b087      	sub	sp, #28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c12:	e160      	b.n	8001ed6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	2101      	movs	r1, #1
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c20:	4013      	ands	r3, r2
 8001c22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 8152 	beq.w	8001ed0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 0303 	and.w	r3, r3, #3
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d005      	beq.n	8001c44 <HAL_GPIO_Init+0x40>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d130      	bne.n	8001ca6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	2203      	movs	r2, #3
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	68da      	ldr	r2, [r3, #12]
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43db      	mvns	r3, r3
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	4013      	ands	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	091b      	lsrs	r3, r3, #4
 8001c90:	f003 0201 	and.w	r2, r3, #1
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	2b03      	cmp	r3, #3
 8001cb0:	d017      	beq.n	8001ce2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	689a      	ldr	r2, [r3, #8]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d123      	bne.n	8001d36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	08da      	lsrs	r2, r3, #3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3208      	adds	r2, #8
 8001cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	220f      	movs	r2, #15
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	691a      	ldr	r2, [r3, #16]
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	08da      	lsrs	r2, r3, #3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3208      	adds	r2, #8
 8001d30:	6939      	ldr	r1, [r7, #16]
 8001d32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	2203      	movs	r2, #3
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 0203 	and.w	r2, r3, #3
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 80ac 	beq.w	8001ed0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d78:	4b5e      	ldr	r3, [pc, #376]	; (8001ef4 <HAL_GPIO_Init+0x2f0>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	4a5d      	ldr	r2, [pc, #372]	; (8001ef4 <HAL_GPIO_Init+0x2f0>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	6193      	str	r3, [r2, #24]
 8001d84:	4b5b      	ldr	r3, [pc, #364]	; (8001ef4 <HAL_GPIO_Init+0x2f0>)
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d90:	4a59      	ldr	r2, [pc, #356]	; (8001ef8 <HAL_GPIO_Init+0x2f4>)
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	089b      	lsrs	r3, r3, #2
 8001d96:	3302      	adds	r3, #2
 8001d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	220f      	movs	r2, #15
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	4013      	ands	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001dba:	d025      	beq.n	8001e08 <HAL_GPIO_Init+0x204>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a4f      	ldr	r2, [pc, #316]	; (8001efc <HAL_GPIO_Init+0x2f8>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d01f      	beq.n	8001e04 <HAL_GPIO_Init+0x200>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a4e      	ldr	r2, [pc, #312]	; (8001f00 <HAL_GPIO_Init+0x2fc>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d019      	beq.n	8001e00 <HAL_GPIO_Init+0x1fc>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a4d      	ldr	r2, [pc, #308]	; (8001f04 <HAL_GPIO_Init+0x300>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d013      	beq.n	8001dfc <HAL_GPIO_Init+0x1f8>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a4c      	ldr	r2, [pc, #304]	; (8001f08 <HAL_GPIO_Init+0x304>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d00d      	beq.n	8001df8 <HAL_GPIO_Init+0x1f4>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a4b      	ldr	r2, [pc, #300]	; (8001f0c <HAL_GPIO_Init+0x308>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d007      	beq.n	8001df4 <HAL_GPIO_Init+0x1f0>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a4a      	ldr	r2, [pc, #296]	; (8001f10 <HAL_GPIO_Init+0x30c>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d101      	bne.n	8001df0 <HAL_GPIO_Init+0x1ec>
 8001dec:	2306      	movs	r3, #6
 8001dee:	e00c      	b.n	8001e0a <HAL_GPIO_Init+0x206>
 8001df0:	2307      	movs	r3, #7
 8001df2:	e00a      	b.n	8001e0a <HAL_GPIO_Init+0x206>
 8001df4:	2305      	movs	r3, #5
 8001df6:	e008      	b.n	8001e0a <HAL_GPIO_Init+0x206>
 8001df8:	2304      	movs	r3, #4
 8001dfa:	e006      	b.n	8001e0a <HAL_GPIO_Init+0x206>
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e004      	b.n	8001e0a <HAL_GPIO_Init+0x206>
 8001e00:	2302      	movs	r3, #2
 8001e02:	e002      	b.n	8001e0a <HAL_GPIO_Init+0x206>
 8001e04:	2301      	movs	r3, #1
 8001e06:	e000      	b.n	8001e0a <HAL_GPIO_Init+0x206>
 8001e08:	2300      	movs	r3, #0
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	f002 0203 	and.w	r2, r2, #3
 8001e10:	0092      	lsls	r2, r2, #2
 8001e12:	4093      	lsls	r3, r2
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e1a:	4937      	ldr	r1, [pc, #220]	; (8001ef8 <HAL_GPIO_Init+0x2f4>)
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	089b      	lsrs	r3, r3, #2
 8001e20:	3302      	adds	r3, #2
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e28:	4b3a      	ldr	r3, [pc, #232]	; (8001f14 <HAL_GPIO_Init+0x310>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	43db      	mvns	r3, r3
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	4013      	ands	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e4c:	4a31      	ldr	r2, [pc, #196]	; (8001f14 <HAL_GPIO_Init+0x310>)
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e52:	4b30      	ldr	r3, [pc, #192]	; (8001f14 <HAL_GPIO_Init+0x310>)
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e76:	4a27      	ldr	r2, [pc, #156]	; (8001f14 <HAL_GPIO_Init+0x310>)
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e7c:	4b25      	ldr	r3, [pc, #148]	; (8001f14 <HAL_GPIO_Init+0x310>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	43db      	mvns	r3, r3
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ea0:	4a1c      	ldr	r2, [pc, #112]	; (8001f14 <HAL_GPIO_Init+0x310>)
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ea6:	4b1b      	ldr	r3, [pc, #108]	; (8001f14 <HAL_GPIO_Init+0x310>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001eca:	4a12      	ldr	r2, [pc, #72]	; (8001f14 <HAL_GPIO_Init+0x310>)
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f47f ae97 	bne.w	8001c14 <HAL_GPIO_Init+0x10>
  }
}
 8001ee6:	bf00      	nop
 8001ee8:	bf00      	nop
 8001eea:	371c      	adds	r7, #28
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	40010000 	.word	0x40010000
 8001efc:	48000400 	.word	0x48000400
 8001f00:	48000800 	.word	0x48000800
 8001f04:	48000c00 	.word	0x48000c00
 8001f08:	48001000 	.word	0x48001000
 8001f0c:	48001400 	.word	0x48001400
 8001f10:	48001800 	.word	0x48001800
 8001f14:	40010400 	.word	0x40010400

08001f18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	460b      	mov	r3, r1
 8001f22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	691a      	ldr	r2, [r3, #16]
 8001f28:	887b      	ldrh	r3, [r7, #2]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d002      	beq.n	8001f36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f30:	2301      	movs	r3, #1
 8001f32:	73fb      	strb	r3, [r7, #15]
 8001f34:	e001      	b.n	8001f3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f36:	2300      	movs	r3, #0
 8001f38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f54:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f58:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f5e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d102      	bne.n	8001f6e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	f001 b83a 	b.w	8002fe2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f72:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 816f 	beq.w	8002262 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f84:	4bb5      	ldr	r3, [pc, #724]	; (800225c <HAL_RCC_OscConfig+0x314>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 030c 	and.w	r3, r3, #12
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d00c      	beq.n	8001faa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f90:	4bb2      	ldr	r3, [pc, #712]	; (800225c <HAL_RCC_OscConfig+0x314>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 030c 	and.w	r3, r3, #12
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	d15c      	bne.n	8002056 <HAL_RCC_OscConfig+0x10e>
 8001f9c:	4baf      	ldr	r3, [pc, #700]	; (800225c <HAL_RCC_OscConfig+0x314>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fa8:	d155      	bne.n	8002056 <HAL_RCC_OscConfig+0x10e>
 8001faa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fae:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001fb6:	fa93 f3a3 	rbit	r3, r3
 8001fba:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fbe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc2:	fab3 f383 	clz	r3, r3
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	095b      	lsrs	r3, r3, #5
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d102      	bne.n	8001fdc <HAL_RCC_OscConfig+0x94>
 8001fd6:	4ba1      	ldr	r3, [pc, #644]	; (800225c <HAL_RCC_OscConfig+0x314>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	e015      	b.n	8002008 <HAL_RCC_OscConfig+0xc0>
 8001fdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fe0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001fe8:	fa93 f3a3 	rbit	r3, r3
 8001fec:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001ff0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ff4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001ff8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001ffc:	fa93 f3a3 	rbit	r3, r3
 8002000:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002004:	4b95      	ldr	r3, [pc, #596]	; (800225c <HAL_RCC_OscConfig+0x314>)
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800200c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002010:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002014:	fa92 f2a2 	rbit	r2, r2
 8002018:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800201c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002020:	fab2 f282 	clz	r2, r2
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	f042 0220 	orr.w	r2, r2, #32
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	f002 021f 	and.w	r2, r2, #31
 8002030:	2101      	movs	r1, #1
 8002032:	fa01 f202 	lsl.w	r2, r1, r2
 8002036:	4013      	ands	r3, r2
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 8111 	beq.w	8002260 <HAL_RCC_OscConfig+0x318>
 800203e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002042:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	f040 8108 	bne.w	8002260 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	f000 bfc6 	b.w	8002fe2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002056:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800205a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002066:	d106      	bne.n	8002076 <HAL_RCC_OscConfig+0x12e>
 8002068:	4b7c      	ldr	r3, [pc, #496]	; (800225c <HAL_RCC_OscConfig+0x314>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a7b      	ldr	r2, [pc, #492]	; (800225c <HAL_RCC_OscConfig+0x314>)
 800206e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002072:	6013      	str	r3, [r2, #0]
 8002074:	e036      	b.n	80020e4 <HAL_RCC_OscConfig+0x19c>
 8002076:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800207a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10c      	bne.n	80020a0 <HAL_RCC_OscConfig+0x158>
 8002086:	4b75      	ldr	r3, [pc, #468]	; (800225c <HAL_RCC_OscConfig+0x314>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a74      	ldr	r2, [pc, #464]	; (800225c <HAL_RCC_OscConfig+0x314>)
 800208c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	4b72      	ldr	r3, [pc, #456]	; (800225c <HAL_RCC_OscConfig+0x314>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a71      	ldr	r2, [pc, #452]	; (800225c <HAL_RCC_OscConfig+0x314>)
 8002098:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	e021      	b.n	80020e4 <HAL_RCC_OscConfig+0x19c>
 80020a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020b0:	d10c      	bne.n	80020cc <HAL_RCC_OscConfig+0x184>
 80020b2:	4b6a      	ldr	r3, [pc, #424]	; (800225c <HAL_RCC_OscConfig+0x314>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a69      	ldr	r2, [pc, #420]	; (800225c <HAL_RCC_OscConfig+0x314>)
 80020b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	4b67      	ldr	r3, [pc, #412]	; (800225c <HAL_RCC_OscConfig+0x314>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a66      	ldr	r2, [pc, #408]	; (800225c <HAL_RCC_OscConfig+0x314>)
 80020c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c8:	6013      	str	r3, [r2, #0]
 80020ca:	e00b      	b.n	80020e4 <HAL_RCC_OscConfig+0x19c>
 80020cc:	4b63      	ldr	r3, [pc, #396]	; (800225c <HAL_RCC_OscConfig+0x314>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a62      	ldr	r2, [pc, #392]	; (800225c <HAL_RCC_OscConfig+0x314>)
 80020d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020d6:	6013      	str	r3, [r2, #0]
 80020d8:	4b60      	ldr	r3, [pc, #384]	; (800225c <HAL_RCC_OscConfig+0x314>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a5f      	ldr	r2, [pc, #380]	; (800225c <HAL_RCC_OscConfig+0x314>)
 80020de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020e2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d059      	beq.n	80021a8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f4:	f7fe fb5a 	bl	80007ac <HAL_GetTick>
 80020f8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fc:	e00a      	b.n	8002114 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020fe:	f7fe fb55 	bl	80007ac <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b64      	cmp	r3, #100	; 0x64
 800210c:	d902      	bls.n	8002114 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	f000 bf67 	b.w	8002fe2 <HAL_RCC_OscConfig+0x109a>
 8002114:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002118:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002120:	fa93 f3a3 	rbit	r3, r3
 8002124:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002128:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212c:	fab3 f383 	clz	r3, r3
 8002130:	b2db      	uxtb	r3, r3
 8002132:	095b      	lsrs	r3, r3, #5
 8002134:	b2db      	uxtb	r3, r3
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b01      	cmp	r3, #1
 800213e:	d102      	bne.n	8002146 <HAL_RCC_OscConfig+0x1fe>
 8002140:	4b46      	ldr	r3, [pc, #280]	; (800225c <HAL_RCC_OscConfig+0x314>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	e015      	b.n	8002172 <HAL_RCC_OscConfig+0x22a>
 8002146:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800214a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002152:	fa93 f3a3 	rbit	r3, r3
 8002156:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800215a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800215e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002162:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002166:	fa93 f3a3 	rbit	r3, r3
 800216a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800216e:	4b3b      	ldr	r3, [pc, #236]	; (800225c <HAL_RCC_OscConfig+0x314>)
 8002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002172:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002176:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800217a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800217e:	fa92 f2a2 	rbit	r2, r2
 8002182:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002186:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800218a:	fab2 f282 	clz	r2, r2
 800218e:	b2d2      	uxtb	r2, r2
 8002190:	f042 0220 	orr.w	r2, r2, #32
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	f002 021f 	and.w	r2, r2, #31
 800219a:	2101      	movs	r1, #1
 800219c:	fa01 f202 	lsl.w	r2, r1, r2
 80021a0:	4013      	ands	r3, r2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0ab      	beq.n	80020fe <HAL_RCC_OscConfig+0x1b6>
 80021a6:	e05c      	b.n	8002262 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a8:	f7fe fb00 	bl	80007ac <HAL_GetTick>
 80021ac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b0:	e00a      	b.n	80021c8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021b2:	f7fe fafb 	bl	80007ac <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b64      	cmp	r3, #100	; 0x64
 80021c0:	d902      	bls.n	80021c8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	f000 bf0d 	b.w	8002fe2 <HAL_RCC_OscConfig+0x109a>
 80021c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021cc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80021d4:	fa93 f3a3 	rbit	r3, r3
 80021d8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80021dc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021e0:	fab3 f383 	clz	r3, r3
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	095b      	lsrs	r3, r3, #5
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d102      	bne.n	80021fa <HAL_RCC_OscConfig+0x2b2>
 80021f4:	4b19      	ldr	r3, [pc, #100]	; (800225c <HAL_RCC_OscConfig+0x314>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	e015      	b.n	8002226 <HAL_RCC_OscConfig+0x2de>
 80021fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021fe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002202:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002206:	fa93 f3a3 	rbit	r3, r3
 800220a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800220e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002212:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002216:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800221a:	fa93 f3a3 	rbit	r3, r3
 800221e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002222:	4b0e      	ldr	r3, [pc, #56]	; (800225c <HAL_RCC_OscConfig+0x314>)
 8002224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002226:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800222a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800222e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002232:	fa92 f2a2 	rbit	r2, r2
 8002236:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800223a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800223e:	fab2 f282 	clz	r2, r2
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	f042 0220 	orr.w	r2, r2, #32
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	f002 021f 	and.w	r2, r2, #31
 800224e:	2101      	movs	r1, #1
 8002250:	fa01 f202 	lsl.w	r2, r1, r2
 8002254:	4013      	ands	r3, r2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1ab      	bne.n	80021b2 <HAL_RCC_OscConfig+0x26a>
 800225a:	e002      	b.n	8002262 <HAL_RCC_OscConfig+0x31a>
 800225c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002262:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002266:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 817f 	beq.w	8002576 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002278:	4ba7      	ldr	r3, [pc, #668]	; (8002518 <HAL_RCC_OscConfig+0x5d0>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 030c 	and.w	r3, r3, #12
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00c      	beq.n	800229e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002284:	4ba4      	ldr	r3, [pc, #656]	; (8002518 <HAL_RCC_OscConfig+0x5d0>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 030c 	and.w	r3, r3, #12
 800228c:	2b08      	cmp	r3, #8
 800228e:	d173      	bne.n	8002378 <HAL_RCC_OscConfig+0x430>
 8002290:	4ba1      	ldr	r3, [pc, #644]	; (8002518 <HAL_RCC_OscConfig+0x5d0>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800229c:	d16c      	bne.n	8002378 <HAL_RCC_OscConfig+0x430>
 800229e:	2302      	movs	r3, #2
 80022a0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80022a8:	fa93 f3a3 	rbit	r3, r3
 80022ac:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80022b0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b4:	fab3 f383 	clz	r3, r3
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	095b      	lsrs	r3, r3, #5
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	f043 0301 	orr.w	r3, r3, #1
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d102      	bne.n	80022ce <HAL_RCC_OscConfig+0x386>
 80022c8:	4b93      	ldr	r3, [pc, #588]	; (8002518 <HAL_RCC_OscConfig+0x5d0>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	e013      	b.n	80022f6 <HAL_RCC_OscConfig+0x3ae>
 80022ce:	2302      	movs	r3, #2
 80022d0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80022d8:	fa93 f3a3 	rbit	r3, r3
 80022dc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80022e0:	2302      	movs	r3, #2
 80022e2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80022e6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80022ea:	fa93 f3a3 	rbit	r3, r3
 80022ee:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80022f2:	4b89      	ldr	r3, [pc, #548]	; (8002518 <HAL_RCC_OscConfig+0x5d0>)
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f6:	2202      	movs	r2, #2
 80022f8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80022fc:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002300:	fa92 f2a2 	rbit	r2, r2
 8002304:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002308:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800230c:	fab2 f282 	clz	r2, r2
 8002310:	b2d2      	uxtb	r2, r2
 8002312:	f042 0220 	orr.w	r2, r2, #32
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	f002 021f 	and.w	r2, r2, #31
 800231c:	2101      	movs	r1, #1
 800231e:	fa01 f202 	lsl.w	r2, r1, r2
 8002322:	4013      	ands	r3, r2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00a      	beq.n	800233e <HAL_RCC_OscConfig+0x3f6>
 8002328:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800232c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d002      	beq.n	800233e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	f000 be52 	b.w	8002fe2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233e:	4b76      	ldr	r3, [pc, #472]	; (8002518 <HAL_RCC_OscConfig+0x5d0>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002346:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800234a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	21f8      	movs	r1, #248	; 0xf8
 8002354:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002358:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800235c:	fa91 f1a1 	rbit	r1, r1
 8002360:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002364:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002368:	fab1 f181 	clz	r1, r1
 800236c:	b2c9      	uxtb	r1, r1
 800236e:	408b      	lsls	r3, r1
 8002370:	4969      	ldr	r1, [pc, #420]	; (8002518 <HAL_RCC_OscConfig+0x5d0>)
 8002372:	4313      	orrs	r3, r2
 8002374:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002376:	e0fe      	b.n	8002576 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002378:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800237c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 8088 	beq.w	800249a <HAL_RCC_OscConfig+0x552>
 800238a:	2301      	movs	r3, #1
 800238c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002390:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002394:	fa93 f3a3 	rbit	r3, r3
 8002398:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800239c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a0:	fab3 f383 	clz	r3, r3
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023aa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	461a      	mov	r2, r3
 80023b2:	2301      	movs	r3, #1
 80023b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b6:	f7fe f9f9 	bl	80007ac <HAL_GetTick>
 80023ba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023be:	e00a      	b.n	80023d6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023c0:	f7fe f9f4 	bl	80007ac <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d902      	bls.n	80023d6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	f000 be06 	b.w	8002fe2 <HAL_RCC_OscConfig+0x109a>
 80023d6:	2302      	movs	r3, #2
 80023d8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023dc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80023e0:	fa93 f3a3 	rbit	r3, r3
 80023e4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80023e8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ec:	fab3 f383 	clz	r3, r3
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	095b      	lsrs	r3, r3, #5
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d102      	bne.n	8002406 <HAL_RCC_OscConfig+0x4be>
 8002400:	4b45      	ldr	r3, [pc, #276]	; (8002518 <HAL_RCC_OscConfig+0x5d0>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	e013      	b.n	800242e <HAL_RCC_OscConfig+0x4e6>
 8002406:	2302      	movs	r3, #2
 8002408:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002410:	fa93 f3a3 	rbit	r3, r3
 8002414:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002418:	2302      	movs	r3, #2
 800241a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800241e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002422:	fa93 f3a3 	rbit	r3, r3
 8002426:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800242a:	4b3b      	ldr	r3, [pc, #236]	; (8002518 <HAL_RCC_OscConfig+0x5d0>)
 800242c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242e:	2202      	movs	r2, #2
 8002430:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002434:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002438:	fa92 f2a2 	rbit	r2, r2
 800243c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002440:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002444:	fab2 f282 	clz	r2, r2
 8002448:	b2d2      	uxtb	r2, r2
 800244a:	f042 0220 	orr.w	r2, r2, #32
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	f002 021f 	and.w	r2, r2, #31
 8002454:	2101      	movs	r1, #1
 8002456:	fa01 f202 	lsl.w	r2, r1, r2
 800245a:	4013      	ands	r3, r2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0af      	beq.n	80023c0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002460:	4b2d      	ldr	r3, [pc, #180]	; (8002518 <HAL_RCC_OscConfig+0x5d0>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002468:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800246c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	21f8      	movs	r1, #248	; 0xf8
 8002476:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800247e:	fa91 f1a1 	rbit	r1, r1
 8002482:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002486:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800248a:	fab1 f181 	clz	r1, r1
 800248e:	b2c9      	uxtb	r1, r1
 8002490:	408b      	lsls	r3, r1
 8002492:	4921      	ldr	r1, [pc, #132]	; (8002518 <HAL_RCC_OscConfig+0x5d0>)
 8002494:	4313      	orrs	r3, r2
 8002496:	600b      	str	r3, [r1, #0]
 8002498:	e06d      	b.n	8002576 <HAL_RCC_OscConfig+0x62e>
 800249a:	2301      	movs	r3, #1
 800249c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80024a4:	fa93 f3a3 	rbit	r3, r3
 80024a8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80024ac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024b0:	fab3 f383 	clz	r3, r3
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024ba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	461a      	mov	r2, r3
 80024c2:	2300      	movs	r3, #0
 80024c4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c6:	f7fe f971 	bl	80007ac <HAL_GetTick>
 80024ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ce:	e00a      	b.n	80024e6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024d0:	f7fe f96c 	bl	80007ac <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d902      	bls.n	80024e6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	f000 bd7e 	b.w	8002fe2 <HAL_RCC_OscConfig+0x109a>
 80024e6:	2302      	movs	r3, #2
 80024e8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80024f0:	fa93 f3a3 	rbit	r3, r3
 80024f4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80024f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024fc:	fab3 f383 	clz	r3, r3
 8002500:	b2db      	uxtb	r3, r3
 8002502:	095b      	lsrs	r3, r3, #5
 8002504:	b2db      	uxtb	r3, r3
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b01      	cmp	r3, #1
 800250e:	d105      	bne.n	800251c <HAL_RCC_OscConfig+0x5d4>
 8002510:	4b01      	ldr	r3, [pc, #4]	; (8002518 <HAL_RCC_OscConfig+0x5d0>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	e016      	b.n	8002544 <HAL_RCC_OscConfig+0x5fc>
 8002516:	bf00      	nop
 8002518:	40021000 	.word	0x40021000
 800251c:	2302      	movs	r3, #2
 800251e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002522:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002526:	fa93 f3a3 	rbit	r3, r3
 800252a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800252e:	2302      	movs	r3, #2
 8002530:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002534:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002538:	fa93 f3a3 	rbit	r3, r3
 800253c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002540:	4bbf      	ldr	r3, [pc, #764]	; (8002840 <HAL_RCC_OscConfig+0x8f8>)
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	2202      	movs	r2, #2
 8002546:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800254a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800254e:	fa92 f2a2 	rbit	r2, r2
 8002552:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002556:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800255a:	fab2 f282 	clz	r2, r2
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	f042 0220 	orr.w	r2, r2, #32
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	f002 021f 	and.w	r2, r2, #31
 800256a:	2101      	movs	r1, #1
 800256c:	fa01 f202 	lsl.w	r2, r1, r2
 8002570:	4013      	ands	r3, r2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1ac      	bne.n	80024d0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002576:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800257a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 8113 	beq.w	80027b2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800258c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002590:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d07c      	beq.n	8002696 <HAL_RCC_OscConfig+0x74e>
 800259c:	2301      	movs	r3, #1
 800259e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80025a6:	fa93 f3a3 	rbit	r3, r3
 80025aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80025ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025b2:	fab3 f383 	clz	r3, r3
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	461a      	mov	r2, r3
 80025ba:	4ba2      	ldr	r3, [pc, #648]	; (8002844 <HAL_RCC_OscConfig+0x8fc>)
 80025bc:	4413      	add	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	461a      	mov	r2, r3
 80025c2:	2301      	movs	r3, #1
 80025c4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c6:	f7fe f8f1 	bl	80007ac <HAL_GetTick>
 80025ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ce:	e00a      	b.n	80025e6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025d0:	f7fe f8ec 	bl	80007ac <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d902      	bls.n	80025e6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	f000 bcfe 	b.w	8002fe2 <HAL_RCC_OscConfig+0x109a>
 80025e6:	2302      	movs	r3, #2
 80025e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025f0:	fa93 f2a3 	rbit	r2, r3
 80025f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002602:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002606:	2202      	movs	r2, #2
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800260e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	fa93 f2a3 	rbit	r2, r3
 8002618:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800261c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002626:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800262a:	2202      	movs	r2, #2
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002632:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	fa93 f2a3 	rbit	r2, r3
 800263c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002640:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002644:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002646:	4b7e      	ldr	r3, [pc, #504]	; (8002840 <HAL_RCC_OscConfig+0x8f8>)
 8002648:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800264a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800264e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002652:	2102      	movs	r1, #2
 8002654:	6019      	str	r1, [r3, #0]
 8002656:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800265a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	fa93 f1a3 	rbit	r1, r3
 8002664:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002668:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800266c:	6019      	str	r1, [r3, #0]
  return result;
 800266e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002672:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	fab3 f383 	clz	r3, r3
 800267c:	b2db      	uxtb	r3, r3
 800267e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002682:	b2db      	uxtb	r3, r3
 8002684:	f003 031f 	and.w	r3, r3, #31
 8002688:	2101      	movs	r1, #1
 800268a:	fa01 f303 	lsl.w	r3, r1, r3
 800268e:	4013      	ands	r3, r2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d09d      	beq.n	80025d0 <HAL_RCC_OscConfig+0x688>
 8002694:	e08d      	b.n	80027b2 <HAL_RCC_OscConfig+0x86a>
 8002696:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800269a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800269e:	2201      	movs	r2, #1
 80026a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026a6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	fa93 f2a3 	rbit	r2, r3
 80026b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026b4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80026b8:	601a      	str	r2, [r3, #0]
  return result;
 80026ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026be:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80026c2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026c4:	fab3 f383 	clz	r3, r3
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	461a      	mov	r2, r3
 80026cc:	4b5d      	ldr	r3, [pc, #372]	; (8002844 <HAL_RCC_OscConfig+0x8fc>)
 80026ce:	4413      	add	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	461a      	mov	r2, r3
 80026d4:	2300      	movs	r3, #0
 80026d6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d8:	f7fe f868 	bl	80007ac <HAL_GetTick>
 80026dc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e0:	e00a      	b.n	80026f8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026e2:	f7fe f863 	bl	80007ac <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d902      	bls.n	80026f8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	f000 bc75 	b.w	8002fe2 <HAL_RCC_OscConfig+0x109a>
 80026f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026fc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002700:	2202      	movs	r2, #2
 8002702:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002704:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002708:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	fa93 f2a3 	rbit	r2, r3
 8002712:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002716:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002720:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002724:	2202      	movs	r2, #2
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800272c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	fa93 f2a3 	rbit	r2, r3
 8002736:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800273a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002744:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002748:	2202      	movs	r2, #2
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002750:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	fa93 f2a3 	rbit	r2, r3
 800275a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800275e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002762:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002764:	4b36      	ldr	r3, [pc, #216]	; (8002840 <HAL_RCC_OscConfig+0x8f8>)
 8002766:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002768:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800276c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002770:	2102      	movs	r1, #2
 8002772:	6019      	str	r1, [r3, #0]
 8002774:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002778:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	fa93 f1a3 	rbit	r1, r3
 8002782:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002786:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800278a:	6019      	str	r1, [r3, #0]
  return result;
 800278c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002790:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	fab3 f383 	clz	r3, r3
 800279a:	b2db      	uxtb	r3, r3
 800279c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	f003 031f 	and.w	r3, r3, #31
 80027a6:	2101      	movs	r1, #1
 80027a8:	fa01 f303 	lsl.w	r3, r1, r3
 80027ac:	4013      	ands	r3, r2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d197      	bne.n	80026e2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0304 	and.w	r3, r3, #4
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 81a5 	beq.w	8002b12 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027c8:	2300      	movs	r3, #0
 80027ca:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ce:	4b1c      	ldr	r3, [pc, #112]	; (8002840 <HAL_RCC_OscConfig+0x8f8>)
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d116      	bne.n	8002808 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027da:	4b19      	ldr	r3, [pc, #100]	; (8002840 <HAL_RCC_OscConfig+0x8f8>)
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	4a18      	ldr	r2, [pc, #96]	; (8002840 <HAL_RCC_OscConfig+0x8f8>)
 80027e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e4:	61d3      	str	r3, [r2, #28]
 80027e6:	4b16      	ldr	r3, [pc, #88]	; (8002840 <HAL_RCC_OscConfig+0x8f8>)
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80027ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002800:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002802:	2301      	movs	r3, #1
 8002804:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002808:	4b0f      	ldr	r3, [pc, #60]	; (8002848 <HAL_RCC_OscConfig+0x900>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002810:	2b00      	cmp	r3, #0
 8002812:	d121      	bne.n	8002858 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002814:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <HAL_RCC_OscConfig+0x900>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a0b      	ldr	r2, [pc, #44]	; (8002848 <HAL_RCC_OscConfig+0x900>)
 800281a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800281e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002820:	f7fd ffc4 	bl	80007ac <HAL_GetTick>
 8002824:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002828:	e010      	b.n	800284c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800282a:	f7fd ffbf 	bl	80007ac <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b64      	cmp	r3, #100	; 0x64
 8002838:	d908      	bls.n	800284c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e3d1      	b.n	8002fe2 <HAL_RCC_OscConfig+0x109a>
 800283e:	bf00      	nop
 8002840:	40021000 	.word	0x40021000
 8002844:	10908120 	.word	0x10908120
 8002848:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800284c:	4b8d      	ldr	r3, [pc, #564]	; (8002a84 <HAL_RCC_OscConfig+0xb3c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0e8      	beq.n	800282a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002858:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800285c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d106      	bne.n	8002876 <HAL_RCC_OscConfig+0x92e>
 8002868:	4b87      	ldr	r3, [pc, #540]	; (8002a88 <HAL_RCC_OscConfig+0xb40>)
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	4a86      	ldr	r2, [pc, #536]	; (8002a88 <HAL_RCC_OscConfig+0xb40>)
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	6213      	str	r3, [r2, #32]
 8002874:	e035      	b.n	80028e2 <HAL_RCC_OscConfig+0x99a>
 8002876:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800287a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10c      	bne.n	80028a0 <HAL_RCC_OscConfig+0x958>
 8002886:	4b80      	ldr	r3, [pc, #512]	; (8002a88 <HAL_RCC_OscConfig+0xb40>)
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	4a7f      	ldr	r2, [pc, #508]	; (8002a88 <HAL_RCC_OscConfig+0xb40>)
 800288c:	f023 0301 	bic.w	r3, r3, #1
 8002890:	6213      	str	r3, [r2, #32]
 8002892:	4b7d      	ldr	r3, [pc, #500]	; (8002a88 <HAL_RCC_OscConfig+0xb40>)
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	4a7c      	ldr	r2, [pc, #496]	; (8002a88 <HAL_RCC_OscConfig+0xb40>)
 8002898:	f023 0304 	bic.w	r3, r3, #4
 800289c:	6213      	str	r3, [r2, #32]
 800289e:	e020      	b.n	80028e2 <HAL_RCC_OscConfig+0x99a>
 80028a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	2b05      	cmp	r3, #5
 80028ae:	d10c      	bne.n	80028ca <HAL_RCC_OscConfig+0x982>
 80028b0:	4b75      	ldr	r3, [pc, #468]	; (8002a88 <HAL_RCC_OscConfig+0xb40>)
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	4a74      	ldr	r2, [pc, #464]	; (8002a88 <HAL_RCC_OscConfig+0xb40>)
 80028b6:	f043 0304 	orr.w	r3, r3, #4
 80028ba:	6213      	str	r3, [r2, #32]
 80028bc:	4b72      	ldr	r3, [pc, #456]	; (8002a88 <HAL_RCC_OscConfig+0xb40>)
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	4a71      	ldr	r2, [pc, #452]	; (8002a88 <HAL_RCC_OscConfig+0xb40>)
 80028c2:	f043 0301 	orr.w	r3, r3, #1
 80028c6:	6213      	str	r3, [r2, #32]
 80028c8:	e00b      	b.n	80028e2 <HAL_RCC_OscConfig+0x99a>
 80028ca:	4b6f      	ldr	r3, [pc, #444]	; (8002a88 <HAL_RCC_OscConfig+0xb40>)
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	4a6e      	ldr	r2, [pc, #440]	; (8002a88 <HAL_RCC_OscConfig+0xb40>)
 80028d0:	f023 0301 	bic.w	r3, r3, #1
 80028d4:	6213      	str	r3, [r2, #32]
 80028d6:	4b6c      	ldr	r3, [pc, #432]	; (8002a88 <HAL_RCC_OscConfig+0xb40>)
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	4a6b      	ldr	r2, [pc, #428]	; (8002a88 <HAL_RCC_OscConfig+0xb40>)
 80028dc:	f023 0304 	bic.w	r3, r3, #4
 80028e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 8081 	beq.w	80029f6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f4:	f7fd ff5a 	bl	80007ac <HAL_GetTick>
 80028f8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028fc:	e00b      	b.n	8002916 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028fe:	f7fd ff55 	bl	80007ac <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	f241 3288 	movw	r2, #5000	; 0x1388
 800290e:	4293      	cmp	r3, r2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e365      	b.n	8002fe2 <HAL_RCC_OscConfig+0x109a>
 8002916:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800291a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800291e:	2202      	movs	r2, #2
 8002920:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002922:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002926:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	fa93 f2a3 	rbit	r2, r3
 8002930:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002934:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800293e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002942:	2202      	movs	r2, #2
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800294a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	fa93 f2a3 	rbit	r2, r3
 8002954:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002958:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800295c:	601a      	str	r2, [r3, #0]
  return result;
 800295e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002962:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002966:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002968:	fab3 f383 	clz	r3, r3
 800296c:	b2db      	uxtb	r3, r3
 800296e:	095b      	lsrs	r3, r3, #5
 8002970:	b2db      	uxtb	r3, r3
 8002972:	f043 0302 	orr.w	r3, r3, #2
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d102      	bne.n	8002982 <HAL_RCC_OscConfig+0xa3a>
 800297c:	4b42      	ldr	r3, [pc, #264]	; (8002a88 <HAL_RCC_OscConfig+0xb40>)
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	e013      	b.n	80029aa <HAL_RCC_OscConfig+0xa62>
 8002982:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002986:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800298a:	2202      	movs	r2, #2
 800298c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002992:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	fa93 f2a3 	rbit	r2, r3
 800299c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029a0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	4b38      	ldr	r3, [pc, #224]	; (8002a88 <HAL_RCC_OscConfig+0xb40>)
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80029ae:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80029b2:	2102      	movs	r1, #2
 80029b4:	6011      	str	r1, [r2, #0]
 80029b6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80029ba:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80029be:	6812      	ldr	r2, [r2, #0]
 80029c0:	fa92 f1a2 	rbit	r1, r2
 80029c4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80029c8:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80029cc:	6011      	str	r1, [r2, #0]
  return result;
 80029ce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80029d2:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80029d6:	6812      	ldr	r2, [r2, #0]
 80029d8:	fab2 f282 	clz	r2, r2
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	f002 021f 	and.w	r2, r2, #31
 80029e8:	2101      	movs	r1, #1
 80029ea:	fa01 f202 	lsl.w	r2, r1, r2
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d084      	beq.n	80028fe <HAL_RCC_OscConfig+0x9b6>
 80029f4:	e083      	b.n	8002afe <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f6:	f7fd fed9 	bl	80007ac <HAL_GetTick>
 80029fa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029fe:	e00b      	b.n	8002a18 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a00:	f7fd fed4 	bl	80007ac <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e2e4      	b.n	8002fe2 <HAL_RCC_OscConfig+0x109a>
 8002a18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a1c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002a20:	2202      	movs	r2, #2
 8002a22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a28:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	fa93 f2a3 	rbit	r2, r3
 8002a32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a36:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a40:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002a44:	2202      	movs	r2, #2
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a4c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	fa93 f2a3 	rbit	r2, r3
 8002a56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a5a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002a5e:	601a      	str	r2, [r3, #0]
  return result;
 8002a60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a64:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002a68:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a6a:	fab3 f383 	clz	r3, r3
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	095b      	lsrs	r3, r3, #5
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	f043 0302 	orr.w	r3, r3, #2
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d106      	bne.n	8002a8c <HAL_RCC_OscConfig+0xb44>
 8002a7e:	4b02      	ldr	r3, [pc, #8]	; (8002a88 <HAL_RCC_OscConfig+0xb40>)
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	e017      	b.n	8002ab4 <HAL_RCC_OscConfig+0xb6c>
 8002a84:	40007000 	.word	0x40007000
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a90:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002a94:	2202      	movs	r2, #2
 8002a96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a9c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	fa93 f2a3 	rbit	r2, r3
 8002aa6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aaa:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	4bb3      	ldr	r3, [pc, #716]	; (8002d80 <HAL_RCC_OscConfig+0xe38>)
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ab8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002abc:	2102      	movs	r1, #2
 8002abe:	6011      	str	r1, [r2, #0]
 8002ac0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ac4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002ac8:	6812      	ldr	r2, [r2, #0]
 8002aca:	fa92 f1a2 	rbit	r1, r2
 8002ace:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ad2:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002ad6:	6011      	str	r1, [r2, #0]
  return result;
 8002ad8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002adc:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002ae0:	6812      	ldr	r2, [r2, #0]
 8002ae2:	fab2 f282 	clz	r2, r2
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	f002 021f 	and.w	r2, r2, #31
 8002af2:	2101      	movs	r1, #1
 8002af4:	fa01 f202 	lsl.w	r2, r1, r2
 8002af8:	4013      	ands	r3, r2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d180      	bne.n	8002a00 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002afe:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d105      	bne.n	8002b12 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b06:	4b9e      	ldr	r3, [pc, #632]	; (8002d80 <HAL_RCC_OscConfig+0xe38>)
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	4a9d      	ldr	r2, [pc, #628]	; (8002d80 <HAL_RCC_OscConfig+0xe38>)
 8002b0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b10:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b16:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 825e 	beq.w	8002fe0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b24:	4b96      	ldr	r3, [pc, #600]	; (8002d80 <HAL_RCC_OscConfig+0xe38>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 030c 	and.w	r3, r3, #12
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	f000 821f 	beq.w	8002f70 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b36:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	f040 8170 	bne.w	8002e24 <HAL_RCC_OscConfig+0xedc>
 8002b44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b48:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002b4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b56:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	fa93 f2a3 	rbit	r2, r3
 8002b60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b64:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002b68:	601a      	str	r2, [r3, #0]
  return result;
 8002b6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b6e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002b72:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b74:	fab3 f383 	clz	r3, r3
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b7e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	461a      	mov	r2, r3
 8002b86:	2300      	movs	r3, #0
 8002b88:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8a:	f7fd fe0f 	bl	80007ac <HAL_GetTick>
 8002b8e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b92:	e009      	b.n	8002ba8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b94:	f7fd fe0a 	bl	80007ac <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e21c      	b.n	8002fe2 <HAL_RCC_OscConfig+0x109a>
 8002ba8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bac:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002bb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	fa93 f2a3 	rbit	r2, r3
 8002bc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bc8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002bcc:	601a      	str	r2, [r3, #0]
  return result;
 8002bce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bd2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002bd6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bd8:	fab3 f383 	clz	r3, r3
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	095b      	lsrs	r3, r3, #5
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d102      	bne.n	8002bf2 <HAL_RCC_OscConfig+0xcaa>
 8002bec:	4b64      	ldr	r3, [pc, #400]	; (8002d80 <HAL_RCC_OscConfig+0xe38>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	e027      	b.n	8002c42 <HAL_RCC_OscConfig+0xcfa>
 8002bf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bf6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002bfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c04:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	fa93 f2a3 	rbit	r2, r3
 8002c0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c12:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c1c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002c20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c2a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	fa93 f2a3 	rbit	r2, r3
 8002c34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c38:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	4b50      	ldr	r3, [pc, #320]	; (8002d80 <HAL_RCC_OscConfig+0xe38>)
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c46:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002c4a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c4e:	6011      	str	r1, [r2, #0]
 8002c50:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c54:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	fa92 f1a2 	rbit	r1, r2
 8002c5e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c62:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002c66:	6011      	str	r1, [r2, #0]
  return result;
 8002c68:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c6c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002c70:	6812      	ldr	r2, [r2, #0]
 8002c72:	fab2 f282 	clz	r2, r2
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	f042 0220 	orr.w	r2, r2, #32
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	f002 021f 	and.w	r2, r2, #31
 8002c82:	2101      	movs	r1, #1
 8002c84:	fa01 f202 	lsl.w	r2, r1, r2
 8002c88:	4013      	ands	r3, r2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d182      	bne.n	8002b94 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c8e:	4b3c      	ldr	r3, [pc, #240]	; (8002d80 <HAL_RCC_OscConfig+0xe38>)
 8002c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c92:	f023 020f 	bic.w	r2, r3, #15
 8002c96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c9a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	4937      	ldr	r1, [pc, #220]	; (8002d80 <HAL_RCC_OscConfig+0xe38>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002ca8:	4b35      	ldr	r3, [pc, #212]	; (8002d80 <HAL_RCC_OscConfig+0xe38>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002cb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cb4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6a19      	ldr	r1, [r3, #32]
 8002cbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cc0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	69db      	ldr	r3, [r3, #28]
 8002cc8:	430b      	orrs	r3, r1
 8002cca:	492d      	ldr	r1, [pc, #180]	; (8002d80 <HAL_RCC_OscConfig+0xe38>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	604b      	str	r3, [r1, #4]
 8002cd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cd4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002cd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002cdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ce2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	fa93 f2a3 	rbit	r2, r3
 8002cec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cf0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002cf4:	601a      	str	r2, [r3, #0]
  return result;
 8002cf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cfa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002cfe:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d00:	fab3 f383 	clz	r3, r3
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d0a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	461a      	mov	r2, r3
 8002d12:	2301      	movs	r3, #1
 8002d14:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d16:	f7fd fd49 	bl	80007ac <HAL_GetTick>
 8002d1a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d1e:	e009      	b.n	8002d34 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d20:	f7fd fd44 	bl	80007ac <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e156      	b.n	8002fe2 <HAL_RCC_OscConfig+0x109a>
 8002d34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d38:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002d3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d46:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	fa93 f2a3 	rbit	r2, r3
 8002d50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d54:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002d58:	601a      	str	r2, [r3, #0]
  return result;
 8002d5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d5e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002d62:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d64:	fab3 f383 	clz	r3, r3
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	095b      	lsrs	r3, r3, #5
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	f043 0301 	orr.w	r3, r3, #1
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d105      	bne.n	8002d84 <HAL_RCC_OscConfig+0xe3c>
 8002d78:	4b01      	ldr	r3, [pc, #4]	; (8002d80 <HAL_RCC_OscConfig+0xe38>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	e02a      	b.n	8002dd4 <HAL_RCC_OscConfig+0xe8c>
 8002d7e:	bf00      	nop
 8002d80:	40021000 	.word	0x40021000
 8002d84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d88:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002d8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d96:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	fa93 f2a3 	rbit	r2, r3
 8002da0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002da4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dae:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002db2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dbc:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	fa93 f2a3 	rbit	r2, r3
 8002dc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dca:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	4b86      	ldr	r3, [pc, #536]	; (8002fec <HAL_RCC_OscConfig+0x10a4>)
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002dd8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002ddc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002de0:	6011      	str	r1, [r2, #0]
 8002de2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002de6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002dea:	6812      	ldr	r2, [r2, #0]
 8002dec:	fa92 f1a2 	rbit	r1, r2
 8002df0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002df4:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002df8:	6011      	str	r1, [r2, #0]
  return result;
 8002dfa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002dfe:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002e02:	6812      	ldr	r2, [r2, #0]
 8002e04:	fab2 f282 	clz	r2, r2
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	f042 0220 	orr.w	r2, r2, #32
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	f002 021f 	and.w	r2, r2, #31
 8002e14:	2101      	movs	r1, #1
 8002e16:	fa01 f202 	lsl.w	r2, r1, r2
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f43f af7f 	beq.w	8002d20 <HAL_RCC_OscConfig+0xdd8>
 8002e22:	e0dd      	b.n	8002fe0 <HAL_RCC_OscConfig+0x1098>
 8002e24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e28:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002e2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e36:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	fa93 f2a3 	rbit	r2, r3
 8002e40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e44:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002e48:	601a      	str	r2, [r3, #0]
  return result;
 8002e4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e4e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002e52:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e54:	fab3 f383 	clz	r3, r3
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e5e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	461a      	mov	r2, r3
 8002e66:	2300      	movs	r3, #0
 8002e68:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6a:	f7fd fc9f 	bl	80007ac <HAL_GetTick>
 8002e6e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e72:	e009      	b.n	8002e88 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e74:	f7fd fc9a 	bl	80007ac <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e0ac      	b.n	8002fe2 <HAL_RCC_OscConfig+0x109a>
 8002e88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e8c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e9a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	fa93 f2a3 	rbit	r2, r3
 8002ea4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ea8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002eac:	601a      	str	r2, [r3, #0]
  return result;
 8002eae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eb2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002eb6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eb8:	fab3 f383 	clz	r3, r3
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	095b      	lsrs	r3, r3, #5
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	f043 0301 	orr.w	r3, r3, #1
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d102      	bne.n	8002ed2 <HAL_RCC_OscConfig+0xf8a>
 8002ecc:	4b47      	ldr	r3, [pc, #284]	; (8002fec <HAL_RCC_OscConfig+0x10a4>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	e027      	b.n	8002f22 <HAL_RCC_OscConfig+0xfda>
 8002ed2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ed6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002eda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ede:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ee4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	fa93 f2a3 	rbit	r2, r3
 8002eee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ef2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002efc:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002f00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f0a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	fa93 f2a3 	rbit	r2, r3
 8002f14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f18:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	4b33      	ldr	r3, [pc, #204]	; (8002fec <HAL_RCC_OscConfig+0x10a4>)
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f26:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002f2a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f2e:	6011      	str	r1, [r2, #0]
 8002f30:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f34:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002f38:	6812      	ldr	r2, [r2, #0]
 8002f3a:	fa92 f1a2 	rbit	r1, r2
 8002f3e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f42:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002f46:	6011      	str	r1, [r2, #0]
  return result;
 8002f48:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f4c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002f50:	6812      	ldr	r2, [r2, #0]
 8002f52:	fab2 f282 	clz	r2, r2
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	f042 0220 	orr.w	r2, r2, #32
 8002f5c:	b2d2      	uxtb	r2, r2
 8002f5e:	f002 021f 	and.w	r2, r2, #31
 8002f62:	2101      	movs	r1, #1
 8002f64:	fa01 f202 	lsl.w	r2, r1, r2
 8002f68:	4013      	ands	r3, r2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d182      	bne.n	8002e74 <HAL_RCC_OscConfig+0xf2c>
 8002f6e:	e037      	b.n	8002fe0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f74:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e02e      	b.n	8002fe2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f84:	4b19      	ldr	r3, [pc, #100]	; (8002fec <HAL_RCC_OscConfig+0x10a4>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002f8c:	4b17      	ldr	r3, [pc, #92]	; (8002fec <HAL_RCC_OscConfig+0x10a4>)
 8002f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f90:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002f94:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002f98:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002f9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fa0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	69db      	ldr	r3, [r3, #28]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d117      	bne.n	8002fdc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002fac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002fb0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002fb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fb8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d10b      	bne.n	8002fdc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002fc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fc8:	f003 020f 	and.w	r2, r3, #15
 8002fcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fd0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d001      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e000      	b.n	8002fe2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40021000 	.word	0x40021000

08002ff0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b09e      	sub	sp, #120	; 0x78
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e162      	b.n	80032ce <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003008:	4b90      	ldr	r3, [pc, #576]	; (800324c <HAL_RCC_ClockConfig+0x25c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0307 	and.w	r3, r3, #7
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	429a      	cmp	r2, r3
 8003014:	d910      	bls.n	8003038 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003016:	4b8d      	ldr	r3, [pc, #564]	; (800324c <HAL_RCC_ClockConfig+0x25c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f023 0207 	bic.w	r2, r3, #7
 800301e:	498b      	ldr	r1, [pc, #556]	; (800324c <HAL_RCC_ClockConfig+0x25c>)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	4313      	orrs	r3, r2
 8003024:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003026:	4b89      	ldr	r3, [pc, #548]	; (800324c <HAL_RCC_ClockConfig+0x25c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	429a      	cmp	r2, r3
 8003032:	d001      	beq.n	8003038 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e14a      	b.n	80032ce <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d008      	beq.n	8003056 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003044:	4b82      	ldr	r3, [pc, #520]	; (8003250 <HAL_RCC_ClockConfig+0x260>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	497f      	ldr	r1, [pc, #508]	; (8003250 <HAL_RCC_ClockConfig+0x260>)
 8003052:	4313      	orrs	r3, r2
 8003054:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 80dc 	beq.w	800321c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d13c      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xf6>
 800306c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003070:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003072:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003074:	fa93 f3a3 	rbit	r3, r3
 8003078:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800307a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800307c:	fab3 f383 	clz	r3, r3
 8003080:	b2db      	uxtb	r3, r3
 8003082:	095b      	lsrs	r3, r3, #5
 8003084:	b2db      	uxtb	r3, r3
 8003086:	f043 0301 	orr.w	r3, r3, #1
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b01      	cmp	r3, #1
 800308e:	d102      	bne.n	8003096 <HAL_RCC_ClockConfig+0xa6>
 8003090:	4b6f      	ldr	r3, [pc, #444]	; (8003250 <HAL_RCC_ClockConfig+0x260>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	e00f      	b.n	80030b6 <HAL_RCC_ClockConfig+0xc6>
 8003096:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800309a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800309e:	fa93 f3a3 	rbit	r3, r3
 80030a2:	667b      	str	r3, [r7, #100]	; 0x64
 80030a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030a8:	663b      	str	r3, [r7, #96]	; 0x60
 80030aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030ac:	fa93 f3a3 	rbit	r3, r3
 80030b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030b2:	4b67      	ldr	r3, [pc, #412]	; (8003250 <HAL_RCC_ClockConfig+0x260>)
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030ba:	65ba      	str	r2, [r7, #88]	; 0x58
 80030bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030be:	fa92 f2a2 	rbit	r2, r2
 80030c2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80030c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80030c6:	fab2 f282 	clz	r2, r2
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	f042 0220 	orr.w	r2, r2, #32
 80030d0:	b2d2      	uxtb	r2, r2
 80030d2:	f002 021f 	and.w	r2, r2, #31
 80030d6:	2101      	movs	r1, #1
 80030d8:	fa01 f202 	lsl.w	r2, r1, r2
 80030dc:	4013      	ands	r3, r2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d17b      	bne.n	80031da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e0f3      	b.n	80032ce <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d13c      	bne.n	8003168 <HAL_RCC_ClockConfig+0x178>
 80030ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030f2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030f6:	fa93 f3a3 	rbit	r3, r3
 80030fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80030fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030fe:	fab3 f383 	clz	r3, r3
 8003102:	b2db      	uxtb	r3, r3
 8003104:	095b      	lsrs	r3, r3, #5
 8003106:	b2db      	uxtb	r3, r3
 8003108:	f043 0301 	orr.w	r3, r3, #1
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b01      	cmp	r3, #1
 8003110:	d102      	bne.n	8003118 <HAL_RCC_ClockConfig+0x128>
 8003112:	4b4f      	ldr	r3, [pc, #316]	; (8003250 <HAL_RCC_ClockConfig+0x260>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	e00f      	b.n	8003138 <HAL_RCC_ClockConfig+0x148>
 8003118:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800311c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003120:	fa93 f3a3 	rbit	r3, r3
 8003124:	647b      	str	r3, [r7, #68]	; 0x44
 8003126:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800312a:	643b      	str	r3, [r7, #64]	; 0x40
 800312c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800312e:	fa93 f3a3 	rbit	r3, r3
 8003132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003134:	4b46      	ldr	r3, [pc, #280]	; (8003250 <HAL_RCC_ClockConfig+0x260>)
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800313c:	63ba      	str	r2, [r7, #56]	; 0x38
 800313e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003140:	fa92 f2a2 	rbit	r2, r2
 8003144:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003146:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003148:	fab2 f282 	clz	r2, r2
 800314c:	b2d2      	uxtb	r2, r2
 800314e:	f042 0220 	orr.w	r2, r2, #32
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	f002 021f 	and.w	r2, r2, #31
 8003158:	2101      	movs	r1, #1
 800315a:	fa01 f202 	lsl.w	r2, r1, r2
 800315e:	4013      	ands	r3, r2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d13a      	bne.n	80031da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e0b2      	b.n	80032ce <HAL_RCC_ClockConfig+0x2de>
 8003168:	2302      	movs	r3, #2
 800316a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316e:	fa93 f3a3 	rbit	r3, r3
 8003172:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003176:	fab3 f383 	clz	r3, r3
 800317a:	b2db      	uxtb	r3, r3
 800317c:	095b      	lsrs	r3, r3, #5
 800317e:	b2db      	uxtb	r3, r3
 8003180:	f043 0301 	orr.w	r3, r3, #1
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b01      	cmp	r3, #1
 8003188:	d102      	bne.n	8003190 <HAL_RCC_ClockConfig+0x1a0>
 800318a:	4b31      	ldr	r3, [pc, #196]	; (8003250 <HAL_RCC_ClockConfig+0x260>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	e00d      	b.n	80031ac <HAL_RCC_ClockConfig+0x1bc>
 8003190:	2302      	movs	r3, #2
 8003192:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003196:	fa93 f3a3 	rbit	r3, r3
 800319a:	627b      	str	r3, [r7, #36]	; 0x24
 800319c:	2302      	movs	r3, #2
 800319e:	623b      	str	r3, [r7, #32]
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	fa93 f3a3 	rbit	r3, r3
 80031a6:	61fb      	str	r3, [r7, #28]
 80031a8:	4b29      	ldr	r3, [pc, #164]	; (8003250 <HAL_RCC_ClockConfig+0x260>)
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	2202      	movs	r2, #2
 80031ae:	61ba      	str	r2, [r7, #24]
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	fa92 f2a2 	rbit	r2, r2
 80031b6:	617a      	str	r2, [r7, #20]
  return result;
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	fab2 f282 	clz	r2, r2
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	f042 0220 	orr.w	r2, r2, #32
 80031c4:	b2d2      	uxtb	r2, r2
 80031c6:	f002 021f 	and.w	r2, r2, #31
 80031ca:	2101      	movs	r1, #1
 80031cc:	fa01 f202 	lsl.w	r2, r1, r2
 80031d0:	4013      	ands	r3, r2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e079      	b.n	80032ce <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031da:	4b1d      	ldr	r3, [pc, #116]	; (8003250 <HAL_RCC_ClockConfig+0x260>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f023 0203 	bic.w	r2, r3, #3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	491a      	ldr	r1, [pc, #104]	; (8003250 <HAL_RCC_ClockConfig+0x260>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031ec:	f7fd fade 	bl	80007ac <HAL_GetTick>
 80031f0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f2:	e00a      	b.n	800320a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031f4:	f7fd fada 	bl	80007ac <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003202:	4293      	cmp	r3, r2
 8003204:	d901      	bls.n	800320a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e061      	b.n	80032ce <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320a:	4b11      	ldr	r3, [pc, #68]	; (8003250 <HAL_RCC_ClockConfig+0x260>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f003 020c 	and.w	r2, r3, #12
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	429a      	cmp	r2, r3
 800321a:	d1eb      	bne.n	80031f4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800321c:	4b0b      	ldr	r3, [pc, #44]	; (800324c <HAL_RCC_ClockConfig+0x25c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d214      	bcs.n	8003254 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322a:	4b08      	ldr	r3, [pc, #32]	; (800324c <HAL_RCC_ClockConfig+0x25c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f023 0207 	bic.w	r2, r3, #7
 8003232:	4906      	ldr	r1, [pc, #24]	; (800324c <HAL_RCC_ClockConfig+0x25c>)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	4313      	orrs	r3, r2
 8003238:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800323a:	4b04      	ldr	r3, [pc, #16]	; (800324c <HAL_RCC_ClockConfig+0x25c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	429a      	cmp	r2, r3
 8003246:	d005      	beq.n	8003254 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e040      	b.n	80032ce <HAL_RCC_ClockConfig+0x2de>
 800324c:	40022000 	.word	0x40022000
 8003250:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b00      	cmp	r3, #0
 800325e:	d008      	beq.n	8003272 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003260:	4b1d      	ldr	r3, [pc, #116]	; (80032d8 <HAL_RCC_ClockConfig+0x2e8>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	491a      	ldr	r1, [pc, #104]	; (80032d8 <HAL_RCC_ClockConfig+0x2e8>)
 800326e:	4313      	orrs	r3, r2
 8003270:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0308 	and.w	r3, r3, #8
 800327a:	2b00      	cmp	r3, #0
 800327c:	d009      	beq.n	8003292 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800327e:	4b16      	ldr	r3, [pc, #88]	; (80032d8 <HAL_RCC_ClockConfig+0x2e8>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	4912      	ldr	r1, [pc, #72]	; (80032d8 <HAL_RCC_ClockConfig+0x2e8>)
 800328e:	4313      	orrs	r3, r2
 8003290:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003292:	f000 f829 	bl	80032e8 <HAL_RCC_GetSysClockFreq>
 8003296:	4601      	mov	r1, r0
 8003298:	4b0f      	ldr	r3, [pc, #60]	; (80032d8 <HAL_RCC_ClockConfig+0x2e8>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032a0:	22f0      	movs	r2, #240	; 0xf0
 80032a2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	fa92 f2a2 	rbit	r2, r2
 80032aa:	60fa      	str	r2, [r7, #12]
  return result;
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	fab2 f282 	clz	r2, r2
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	40d3      	lsrs	r3, r2
 80032b6:	4a09      	ldr	r2, [pc, #36]	; (80032dc <HAL_RCC_ClockConfig+0x2ec>)
 80032b8:	5cd3      	ldrb	r3, [r2, r3]
 80032ba:	fa21 f303 	lsr.w	r3, r1, r3
 80032be:	4a08      	ldr	r2, [pc, #32]	; (80032e0 <HAL_RCC_ClockConfig+0x2f0>)
 80032c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80032c2:	4b08      	ldr	r3, [pc, #32]	; (80032e4 <HAL_RCC_ClockConfig+0x2f4>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fd fa2c 	bl	8000724 <HAL_InitTick>
  
  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3778      	adds	r7, #120	; 0x78
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40021000 	.word	0x40021000
 80032dc:	08003868 	.word	0x08003868
 80032e0:	20000000 	.word	0x20000000
 80032e4:	20000004 	.word	0x20000004

080032e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b08b      	sub	sp, #44	; 0x2c
 80032ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	61fb      	str	r3, [r7, #28]
 80032f2:	2300      	movs	r3, #0
 80032f4:	61bb      	str	r3, [r7, #24]
 80032f6:	2300      	movs	r3, #0
 80032f8:	627b      	str	r3, [r7, #36]	; 0x24
 80032fa:	2300      	movs	r3, #0
 80032fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80032fe:	2300      	movs	r3, #0
 8003300:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003302:	4b2a      	ldr	r3, [pc, #168]	; (80033ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	f003 030c 	and.w	r3, r3, #12
 800330e:	2b04      	cmp	r3, #4
 8003310:	d002      	beq.n	8003318 <HAL_RCC_GetSysClockFreq+0x30>
 8003312:	2b08      	cmp	r3, #8
 8003314:	d003      	beq.n	800331e <HAL_RCC_GetSysClockFreq+0x36>
 8003316:	e03f      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003318:	4b25      	ldr	r3, [pc, #148]	; (80033b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800331a:	623b      	str	r3, [r7, #32]
      break;
 800331c:	e03f      	b.n	800339e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003324:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003328:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	fa92 f2a2 	rbit	r2, r2
 8003330:	607a      	str	r2, [r7, #4]
  return result;
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	fab2 f282 	clz	r2, r2
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	40d3      	lsrs	r3, r2
 800333c:	4a1d      	ldr	r2, [pc, #116]	; (80033b4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800333e:	5cd3      	ldrb	r3, [r2, r3]
 8003340:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003342:	4b1a      	ldr	r3, [pc, #104]	; (80033ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8003344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	220f      	movs	r2, #15
 800334c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	fa92 f2a2 	rbit	r2, r2
 8003354:	60fa      	str	r2, [r7, #12]
  return result;
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	fab2 f282 	clz	r2, r2
 800335c:	b2d2      	uxtb	r2, r2
 800335e:	40d3      	lsrs	r3, r2
 8003360:	4a15      	ldr	r2, [pc, #84]	; (80033b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003362:	5cd3      	ldrb	r3, [r2, r3]
 8003364:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d008      	beq.n	8003382 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003370:	4a0f      	ldr	r2, [pc, #60]	; (80033b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	fbb2 f2f3 	udiv	r2, r2, r3
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	fb02 f303 	mul.w	r3, r2, r3
 800337e:	627b      	str	r3, [r7, #36]	; 0x24
 8003380:	e007      	b.n	8003392 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003382:	4a0b      	ldr	r2, [pc, #44]	; (80033b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	fbb2 f2f3 	udiv	r2, r2, r3
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	fb02 f303 	mul.w	r3, r2, r3
 8003390:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	623b      	str	r3, [r7, #32]
      break;
 8003396:	e002      	b.n	800339e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003398:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800339a:	623b      	str	r3, [r7, #32]
      break;
 800339c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800339e:	6a3b      	ldr	r3, [r7, #32]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	372c      	adds	r7, #44	; 0x2c
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	40021000 	.word	0x40021000
 80033b0:	007a1200 	.word	0x007a1200
 80033b4:	08003878 	.word	0x08003878
 80033b8:	08003888 	.word	0x08003888

080033bc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b092      	sub	sp, #72	; 0x48
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80033cc:	2300      	movs	r3, #0
 80033ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 80d4 	beq.w	8003588 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033e0:	4b4e      	ldr	r3, [pc, #312]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10e      	bne.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ec:	4b4b      	ldr	r3, [pc, #300]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	4a4a      	ldr	r2, [pc, #296]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f6:	61d3      	str	r3, [r2, #28]
 80033f8:	4b48      	ldr	r3, [pc, #288]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003404:	2301      	movs	r3, #1
 8003406:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800340a:	4b45      	ldr	r3, [pc, #276]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003412:	2b00      	cmp	r3, #0
 8003414:	d118      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003416:	4b42      	ldr	r3, [pc, #264]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a41      	ldr	r2, [pc, #260]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800341c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003420:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003422:	f7fd f9c3 	bl	80007ac <HAL_GetTick>
 8003426:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003428:	e008      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800342a:	f7fd f9bf 	bl	80007ac <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b64      	cmp	r3, #100	; 0x64
 8003436:	d901      	bls.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e1d6      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343c:	4b38      	ldr	r3, [pc, #224]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0f0      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003448:	4b34      	ldr	r3, [pc, #208]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003450:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 8084 	beq.w	8003562 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003462:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003464:	429a      	cmp	r2, r3
 8003466:	d07c      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003468:	4b2c      	ldr	r3, [pc, #176]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003470:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003472:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003476:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347a:	fa93 f3a3 	rbit	r3, r3
 800347e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003482:	fab3 f383 	clz	r3, r3
 8003486:	b2db      	uxtb	r3, r3
 8003488:	461a      	mov	r2, r3
 800348a:	4b26      	ldr	r3, [pc, #152]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800348c:	4413      	add	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	461a      	mov	r2, r3
 8003492:	2301      	movs	r3, #1
 8003494:	6013      	str	r3, [r2, #0]
 8003496:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800349a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349e:	fa93 f3a3 	rbit	r3, r3
 80034a2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80034a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034a6:	fab3 f383 	clz	r3, r3
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	461a      	mov	r2, r3
 80034ae:	4b1d      	ldr	r3, [pc, #116]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034b0:	4413      	add	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	461a      	mov	r2, r3
 80034b6:	2300      	movs	r3, #0
 80034b8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034ba:	4a18      	ldr	r2, [pc, #96]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034be:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d04b      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ca:	f7fd f96f 	bl	80007ac <HAL_GetTick>
 80034ce:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d0:	e00a      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d2:	f7fd f96b 	bl	80007ac <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e180      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80034e8:	2302      	movs	r3, #2
 80034ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ee:	fa93 f3a3 	rbit	r3, r3
 80034f2:	627b      	str	r3, [r7, #36]	; 0x24
 80034f4:	2302      	movs	r3, #2
 80034f6:	623b      	str	r3, [r7, #32]
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	fa93 f3a3 	rbit	r3, r3
 80034fe:	61fb      	str	r3, [r7, #28]
  return result;
 8003500:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003502:	fab3 f383 	clz	r3, r3
 8003506:	b2db      	uxtb	r3, r3
 8003508:	095b      	lsrs	r3, r3, #5
 800350a:	b2db      	uxtb	r3, r3
 800350c:	f043 0302 	orr.w	r3, r3, #2
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d108      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003516:	4b01      	ldr	r3, [pc, #4]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	e00d      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800351c:	40021000 	.word	0x40021000
 8003520:	40007000 	.word	0x40007000
 8003524:	10908100 	.word	0x10908100
 8003528:	2302      	movs	r3, #2
 800352a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	fa93 f3a3 	rbit	r3, r3
 8003532:	617b      	str	r3, [r7, #20]
 8003534:	4b9a      	ldr	r3, [pc, #616]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	2202      	movs	r2, #2
 800353a:	613a      	str	r2, [r7, #16]
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	fa92 f2a2 	rbit	r2, r2
 8003542:	60fa      	str	r2, [r7, #12]
  return result;
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	fab2 f282 	clz	r2, r2
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	f002 021f 	and.w	r2, r2, #31
 8003556:	2101      	movs	r1, #1
 8003558:	fa01 f202 	lsl.w	r2, r1, r2
 800355c:	4013      	ands	r3, r2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0b7      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003562:	4b8f      	ldr	r3, [pc, #572]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	498c      	ldr	r1, [pc, #560]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003570:	4313      	orrs	r3, r2
 8003572:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003574:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003578:	2b01      	cmp	r3, #1
 800357a:	d105      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800357c:	4b88      	ldr	r3, [pc, #544]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800357e:	69db      	ldr	r3, [r3, #28]
 8003580:	4a87      	ldr	r2, [pc, #540]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003582:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003586:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	2b00      	cmp	r3, #0
 8003592:	d008      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003594:	4b82      	ldr	r3, [pc, #520]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003598:	f023 0203 	bic.w	r2, r3, #3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	497f      	ldr	r1, [pc, #508]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d008      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035b2:	4b7b      	ldr	r3, [pc, #492]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	4978      	ldr	r1, [pc, #480]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d008      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035d0:	4b73      	ldr	r3, [pc, #460]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	4970      	ldr	r1, [pc, #448]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0320 	and.w	r3, r3, #32
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d008      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035ee:	4b6c      	ldr	r3, [pc, #432]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	f023 0210 	bic.w	r2, r3, #16
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	4969      	ldr	r1, [pc, #420]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d008      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800360c:	4b64      	ldr	r3, [pc, #400]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003618:	4961      	ldr	r1, [pc, #388]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800361a:	4313      	orrs	r3, r2
 800361c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003626:	2b00      	cmp	r3, #0
 8003628:	d008      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800362a:	4b5d      	ldr	r3, [pc, #372]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	f023 0220 	bic.w	r2, r3, #32
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	495a      	ldr	r1, [pc, #360]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003638:	4313      	orrs	r3, r2
 800363a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d008      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003648:	4b55      	ldr	r3, [pc, #340]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800364a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	4952      	ldr	r1, [pc, #328]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003656:	4313      	orrs	r3, r2
 8003658:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	2b00      	cmp	r3, #0
 8003664:	d008      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003666:	4b4e      	ldr	r3, [pc, #312]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	494b      	ldr	r1, [pc, #300]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003674:	4313      	orrs	r3, r2
 8003676:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0310 	and.w	r3, r3, #16
 8003680:	2b00      	cmp	r3, #0
 8003682:	d008      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003684:	4b46      	ldr	r3, [pc, #280]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003688:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	4943      	ldr	r1, [pc, #268]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003692:	4313      	orrs	r3, r2
 8003694:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d008      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80036a2:	4b3f      	ldr	r3, [pc, #252]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	493c      	ldr	r1, [pc, #240]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d008      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80036c0:	4b37      	ldr	r3, [pc, #220]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036cc:	4934      	ldr	r1, [pc, #208]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d008      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80036de:	4b30      	ldr	r3, [pc, #192]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ea:	492d      	ldr	r1, [pc, #180]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d008      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80036fc:	4b28      	ldr	r3, [pc, #160]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003700:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003708:	4925      	ldr	r1, [pc, #148]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800370a:	4313      	orrs	r3, r2
 800370c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d008      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800371a:	4b21      	ldr	r3, [pc, #132]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800371c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	491e      	ldr	r1, [pc, #120]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003728:	4313      	orrs	r3, r2
 800372a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d008      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003738:	4b19      	ldr	r3, [pc, #100]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800373a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003744:	4916      	ldr	r1, [pc, #88]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003746:	4313      	orrs	r3, r2
 8003748:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d008      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003756:	4b12      	ldr	r3, [pc, #72]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003762:	490f      	ldr	r1, [pc, #60]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003764:	4313      	orrs	r3, r2
 8003766:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d008      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003774:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003778:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003780:	4907      	ldr	r1, [pc, #28]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003782:	4313      	orrs	r3, r2
 8003784:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00c      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003792:	4b03      	ldr	r3, [pc, #12]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	e002      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800379e:	bf00      	nop
 80037a0:	40021000 	.word	0x40021000
 80037a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037a6:	4913      	ldr	r1, [pc, #76]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d008      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80037b8:	4b0e      	ldr	r3, [pc, #56]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c4:	490b      	ldr	r1, [pc, #44]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d008      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80037d6:	4b07      	ldr	r3, [pc, #28]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e2:	4904      	ldr	r1, [pc, #16]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3748      	adds	r7, #72	; 0x48
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40021000 	.word	0x40021000

080037f8 <__libc_init_array>:
 80037f8:	b570      	push	{r4, r5, r6, lr}
 80037fa:	4d0d      	ldr	r5, [pc, #52]	; (8003830 <__libc_init_array+0x38>)
 80037fc:	4c0d      	ldr	r4, [pc, #52]	; (8003834 <__libc_init_array+0x3c>)
 80037fe:	1b64      	subs	r4, r4, r5
 8003800:	10a4      	asrs	r4, r4, #2
 8003802:	2600      	movs	r6, #0
 8003804:	42a6      	cmp	r6, r4
 8003806:	d109      	bne.n	800381c <__libc_init_array+0x24>
 8003808:	4d0b      	ldr	r5, [pc, #44]	; (8003838 <__libc_init_array+0x40>)
 800380a:	4c0c      	ldr	r4, [pc, #48]	; (800383c <__libc_init_array+0x44>)
 800380c:	f000 f820 	bl	8003850 <_init>
 8003810:	1b64      	subs	r4, r4, r5
 8003812:	10a4      	asrs	r4, r4, #2
 8003814:	2600      	movs	r6, #0
 8003816:	42a6      	cmp	r6, r4
 8003818:	d105      	bne.n	8003826 <__libc_init_array+0x2e>
 800381a:	bd70      	pop	{r4, r5, r6, pc}
 800381c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003820:	4798      	blx	r3
 8003822:	3601      	adds	r6, #1
 8003824:	e7ee      	b.n	8003804 <__libc_init_array+0xc>
 8003826:	f855 3b04 	ldr.w	r3, [r5], #4
 800382a:	4798      	blx	r3
 800382c:	3601      	adds	r6, #1
 800382e:	e7f2      	b.n	8003816 <__libc_init_array+0x1e>
 8003830:	08003898 	.word	0x08003898
 8003834:	08003898 	.word	0x08003898
 8003838:	08003898 	.word	0x08003898
 800383c:	0800389c 	.word	0x0800389c

08003840 <memset>:
 8003840:	4402      	add	r2, r0
 8003842:	4603      	mov	r3, r0
 8003844:	4293      	cmp	r3, r2
 8003846:	d100      	bne.n	800384a <memset+0xa>
 8003848:	4770      	bx	lr
 800384a:	f803 1b01 	strb.w	r1, [r3], #1
 800384e:	e7f9      	b.n	8003844 <memset+0x4>

08003850 <_init>:
 8003850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003852:	bf00      	nop
 8003854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003856:	bc08      	pop	{r3}
 8003858:	469e      	mov	lr, r3
 800385a:	4770      	bx	lr

0800385c <_fini>:
 800385c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385e:	bf00      	nop
 8003860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003862:	bc08      	pop	{r3}
 8003864:	469e      	mov	lr, r3
 8003866:	4770      	bx	lr
