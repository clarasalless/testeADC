
testeADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038bc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003a50  08003a50  00013a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a80  08003a80  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003a80  08003a80  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a80  08003a80  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a80  08003a80  00013a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a84  08003a84  00013a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000084  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000090  20000090  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007d89  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001719  00000000  00000000  00027dc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000620  00000000  00000000  000294e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000568  00000000  00000000  00029b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f637  00000000  00000000  0002a068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000093a0  00000000  00000000  0004969f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c42a7  00000000  00000000  00052a3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00116ce6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001758  00000000  00000000  00116d38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003a38 	.word	0x08003a38

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003a38 	.word	0x08003a38

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80001d6:	b0a7      	sub	sp, #156	; 0x9c
 80001d8:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001da:	f000 fb73 	bl	80008c4 <HAL_Init>
  //CLKEnable(GPIOC);
  //buttonInit(GPIOC, GPIO_PIN_13);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001de:	f000 f8a1 	bl	8000324 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
//  MX_GPIO_Init();
  buttonInit(GPIOC, GPIO_PIN_13);
 80001e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001e6:	4846      	ldr	r0, [pc, #280]	; (8000300 <main+0x12c>)
 80001e8:	f000 f9fe 	bl	80005e8 <buttonInit>
  //MX_ADC1_Init();
  hadc1 = ADC_HandleConfiguration(hadc1);
 80001ec:	4e45      	ldr	r6, [pc, #276]	; (8000304 <main+0x130>)
 80001ee:	463d      	mov	r5, r7
 80001f0:	4c44      	ldr	r4, [pc, #272]	; (8000304 <main+0x130>)
 80001f2:	4668      	mov	r0, sp
 80001f4:	f104 030c 	add.w	r3, r4, #12
 80001f8:	2244      	movs	r2, #68	; 0x44
 80001fa:	4619      	mov	r1, r3
 80001fc:	f003 fc06 	bl	8003a0c <memcpy>
 8000200:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000204:	4628      	mov	r0, r5
 8000206:	f000 fa2a 	bl	800065e <ADC_HandleConfiguration>
 800020a:	4630      	mov	r0, r6
 800020c:	463b      	mov	r3, r7
 800020e:	2250      	movs	r2, #80	; 0x50
 8000210:	4619      	mov	r1, r3
 8000212:	f003 fbfb 	bl	8003a0c <memcpy>
  ADC_Init2(hadc1,ADC1,ADC_CHANNEL_1);
 8000216:	4e3b      	ldr	r6, [pc, #236]	; (8000304 <main+0x130>)
 8000218:	2301      	movs	r3, #1
 800021a:	9311      	str	r3, [sp, #68]	; 0x44
 800021c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000220:	9310      	str	r3, [sp, #64]	; 0x40
 8000222:	466d      	mov	r5, sp
 8000224:	f106 0410 	add.w	r4, r6, #16
 8000228:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800022a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800022c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800022e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000230:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000232:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000234:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000238:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800023c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000240:	f000 fa46 	bl	80006d0 <ADC_Init2>
  ADC_Calibration(&hadc1, ADC_SINGLE_ENDED);
 8000244:	2100      	movs	r1, #0
 8000246:	482f      	ldr	r0, [pc, #188]	; (8000304 <main+0x130>)
 8000248:	f000 fa8e 	bl	8000768 <ADC_Calibration>
  /* USER CODE BEGIN 2 */
  tick = HAL_GetTick();
 800024c:	f000 fb94 	bl	8000978 <HAL_GetTick>
 8000250:	4603      	mov	r3, r0
 8000252:	4a2d      	ldr	r2, [pc, #180]	; (8000308 <main+0x134>)
 8000254:	6013      	str	r3, [r2, #0]
  currentBtnState = GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000256:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800025a:	4829      	ldr	r0, [pc, #164]	; (8000300 <main+0x12c>)
 800025c:	f000 f9e8 	bl	8000630 <GPIO_ReadPin>
 8000260:	4603      	mov	r3, r0
 8000262:	461a      	mov	r2, r3
 8000264:	4b29      	ldr	r3, [pc, #164]	; (800030c <main+0x138>)
 8000266:	701a      	strb	r2, [r3, #0]
  btn_action = currentBtnState;
 8000268:	4b28      	ldr	r3, [pc, #160]	; (800030c <main+0x138>)
 800026a:	781a      	ldrb	r2, [r3, #0]
 800026c:	4b28      	ldr	r3, [pc, #160]	; (8000310 <main+0x13c>)
 800026e:	701a      	strb	r2, [r3, #0]
  delay = 1000;
 8000270:	4b28      	ldr	r3, [pc, #160]	; (8000314 <main+0x140>)
 8000272:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000276:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  currentBtnState = GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000278:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800027c:	4820      	ldr	r0, [pc, #128]	; (8000300 <main+0x12c>)
 800027e:	f000 f9d7 	bl	8000630 <GPIO_ReadPin>
 8000282:	4603      	mov	r3, r0
 8000284:	461a      	mov	r2, r3
 8000286:	4b21      	ldr	r3, [pc, #132]	; (800030c <main+0x138>)
 8000288:	701a      	strb	r2, [r3, #0]

	  if(currentBtnState!=previousBtnState)
 800028a:	4b20      	ldr	r3, [pc, #128]	; (800030c <main+0x138>)
 800028c:	781a      	ldrb	r2, [r3, #0]
 800028e:	4b22      	ldr	r3, [pc, #136]	; (8000318 <main+0x144>)
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	429a      	cmp	r2, r3
 8000294:	d004      	beq.n	80002a0 <main+0xcc>
	  {
		  tick = GetTick();
 8000296:	f000 f9db 	bl	8000650 <GetTick>
 800029a:	4603      	mov	r3, r0
 800029c:	4a1a      	ldr	r2, [pc, #104]	; (8000308 <main+0x134>)
 800029e:	6013      	str	r3, [r2, #0]
	  }

	  if((GetTick() - tick) > delay)
 80002a0:	f000 f9d6 	bl	8000650 <GetTick>
 80002a4:	4602      	mov	r2, r0
 80002a6:	4b18      	ldr	r3, [pc, #96]	; (8000308 <main+0x134>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	1ad2      	subs	r2, r2, r3
 80002ac:	4b19      	ldr	r3, [pc, #100]	; (8000314 <main+0x140>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	429a      	cmp	r2, r3
 80002b2:	d903      	bls.n	80002bc <main+0xe8>
	  {
		  btn_action = currentBtnState;
 80002b4:	4b15      	ldr	r3, [pc, #84]	; (800030c <main+0x138>)
 80002b6:	781a      	ldrb	r2, [r3, #0]
 80002b8:	4b15      	ldr	r3, [pc, #84]	; (8000310 <main+0x13c>)
 80002ba:	701a      	strb	r2, [r3, #0]
	  }

	  if (btn_action == 0 && btn_lock == 0)
 80002bc:	4b14      	ldr	r3, [pc, #80]	; (8000310 <main+0x13c>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d10c      	bne.n	80002de <main+0x10a>
 80002c4:	4b15      	ldr	r3, [pc, #84]	; (800031c <main+0x148>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d108      	bne.n	80002de <main+0x10a>
	  {
		  btn_lock = 1;
 80002cc:	4b13      	ldr	r3, [pc, #76]	; (800031c <main+0x148>)
 80002ce:	2201      	movs	r2, #1
 80002d0:	601a      	str	r2, [r3, #0]
		  tensao_media = teste_ADC(&hadc1);
 80002d2:	480c      	ldr	r0, [pc, #48]	; (8000304 <main+0x130>)
 80002d4:	f000 fa7c 	bl	80007d0 <teste_ADC>
 80002d8:	4603      	mov	r3, r0
 80002da:	4a11      	ldr	r2, [pc, #68]	; (8000320 <main+0x14c>)
 80002dc:	6013      	str	r3, [r2, #0]
	  }

	  if (btn_action == 1 && btn_lock == 1)
 80002de:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <main+0x13c>)
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	d106      	bne.n	80002f4 <main+0x120>
 80002e6:	4b0d      	ldr	r3, [pc, #52]	; (800031c <main+0x148>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	2b01      	cmp	r3, #1
 80002ec:	d102      	bne.n	80002f4 <main+0x120>
	  {
		  btn_lock = 0;
 80002ee:	4b0b      	ldr	r3, [pc, #44]	; (800031c <main+0x148>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
	  }
	  previousBtnState = currentBtnState;
 80002f4:	4b05      	ldr	r3, [pc, #20]	; (800030c <main+0x138>)
 80002f6:	781a      	ldrb	r2, [r3, #0]
 80002f8:	4b07      	ldr	r3, [pc, #28]	; (8000318 <main+0x144>)
 80002fa:	701a      	strb	r2, [r3, #0]
	  currentBtnState = GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80002fc:	e7bc      	b.n	8000278 <main+0xa4>
 80002fe:	bf00      	nop
 8000300:	48000800 	.word	0x48000800
 8000304:	20000028 	.word	0x20000028
 8000308:	20000084 	.word	0x20000084
 800030c:	20000088 	.word	0x20000088
 8000310:	2000008a 	.word	0x2000008a
 8000314:	20000080 	.word	0x20000080
 8000318:	20000089 	.word	0x20000089
 800031c:	20000078 	.word	0x20000078
 8000320:	2000007c 	.word	0x2000007c

08000324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b0a6      	sub	sp, #152	; 0x98
 8000328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800032e:	2228      	movs	r2, #40	; 0x28
 8000330:	2100      	movs	r1, #0
 8000332:	4618      	mov	r0, r3
 8000334:	f003 fb78 	bl	8003a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000338:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800033c:	2200      	movs	r2, #0
 800033e:	601a      	str	r2, [r3, #0]
 8000340:	605a      	str	r2, [r3, #4]
 8000342:	609a      	str	r2, [r3, #8]
 8000344:	60da      	str	r2, [r3, #12]
 8000346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	2258      	movs	r2, #88	; 0x58
 800034c:	2100      	movs	r1, #0
 800034e:	4618      	mov	r0, r3
 8000350:	f003 fb6a 	bl	8003a28 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000354:	2302      	movs	r3, #2
 8000356:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000358:	2301      	movs	r3, #1
 800035a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800035c:	2310      	movs	r3, #16
 800035e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000362:	2302      	movs	r3, #2
 8000364:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000368:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800036c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000370:	2300      	movs	r3, #0
 8000372:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000376:	2300      	movs	r3, #0
 8000378:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000380:	4618      	mov	r0, r3
 8000382:	f001 fec7 	bl	8002114 <HAL_RCC_OscConfig>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800038c:	f000 f827 	bl	80003de <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000390:	230f      	movs	r3, #15
 8000392:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000394:	2300      	movs	r3, #0
 8000396:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800039c:	2300      	movs	r3, #0
 800039e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a0:	2300      	movs	r3, #0
 80003a2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003a8:	2100      	movs	r1, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f002 ff06 	bl	80031bc <HAL_RCC_ClockConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80003b6:	f000 f812 	bl	80003de <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80003ba:	2380      	movs	r3, #128	; 0x80
 80003bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80003be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	4618      	mov	r0, r3
 80003c8:	f003 f8de 	bl	8003588 <HAL_RCCEx_PeriphCLKConfig>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80003d2:	f000 f804 	bl	80003de <Error_Handler>
  }
}
 80003d6:	bf00      	nop
 80003d8:	3798      	adds	r7, #152	; 0x98
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}

080003de <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003de:	b480      	push	{r7}
 80003e0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e2:	b672      	cpsid	i
}
 80003e4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80003e6:	e7fe      	b.n	80003e6 <Error_Handler+0x8>

080003e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003ee:	4b0f      	ldr	r3, [pc, #60]	; (800042c <HAL_MspInit+0x44>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	4a0e      	ldr	r2, [pc, #56]	; (800042c <HAL_MspInit+0x44>)
 80003f4:	f043 0301 	orr.w	r3, r3, #1
 80003f8:	6193      	str	r3, [r2, #24]
 80003fa:	4b0c      	ldr	r3, [pc, #48]	; (800042c <HAL_MspInit+0x44>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	f003 0301 	and.w	r3, r3, #1
 8000402:	607b      	str	r3, [r7, #4]
 8000404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000406:	4b09      	ldr	r3, [pc, #36]	; (800042c <HAL_MspInit+0x44>)
 8000408:	69db      	ldr	r3, [r3, #28]
 800040a:	4a08      	ldr	r2, [pc, #32]	; (800042c <HAL_MspInit+0x44>)
 800040c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000410:	61d3      	str	r3, [r2, #28]
 8000412:	4b06      	ldr	r3, [pc, #24]	; (800042c <HAL_MspInit+0x44>)
 8000414:	69db      	ldr	r3, [r3, #28]
 8000416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800041a:	603b      	str	r3, [r7, #0]
 800041c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800041e:	bf00      	nop
 8000420:	370c      	adds	r7, #12
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	40021000 	.word	0x40021000

08000430 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b08a      	sub	sp, #40	; 0x28
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000438:	f107 0314 	add.w	r3, r7, #20
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
 8000440:	605a      	str	r2, [r3, #4]
 8000442:	609a      	str	r2, [r3, #8]
 8000444:	60da      	str	r2, [r3, #12]
 8000446:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000450:	d124      	bne.n	800049c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000452:	4b14      	ldr	r3, [pc, #80]	; (80004a4 <HAL_ADC_MspInit+0x74>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	4a13      	ldr	r2, [pc, #76]	; (80004a4 <HAL_ADC_MspInit+0x74>)
 8000458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800045c:	6153      	str	r3, [r2, #20]
 800045e:	4b11      	ldr	r3, [pc, #68]	; (80004a4 <HAL_ADC_MspInit+0x74>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000466:	613b      	str	r3, [r7, #16]
 8000468:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800046a:	4b0e      	ldr	r3, [pc, #56]	; (80004a4 <HAL_ADC_MspInit+0x74>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	4a0d      	ldr	r2, [pc, #52]	; (80004a4 <HAL_ADC_MspInit+0x74>)
 8000470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000474:	6153      	str	r3, [r2, #20]
 8000476:	4b0b      	ldr	r3, [pc, #44]	; (80004a4 <HAL_ADC_MspInit+0x74>)
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000482:	2301      	movs	r3, #1
 8000484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000486:	2303      	movs	r3, #3
 8000488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048a:	2300      	movs	r3, #0
 800048c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800048e:	f107 0314 	add.w	r3, r7, #20
 8000492:	4619      	mov	r1, r3
 8000494:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000498:	f001 fc9a 	bl	8001dd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800049c:	bf00      	nop
 800049e:	3728      	adds	r7, #40	; 0x28
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40021000 	.word	0x40021000

080004a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004ac:	e7fe      	b.n	80004ac <NMI_Handler+0x4>

080004ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004b2:	e7fe      	b.n	80004b2 <HardFault_Handler+0x4>

080004b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <MemManage_Handler+0x4>

080004ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004be:	e7fe      	b.n	80004be <BusFault_Handler+0x4>

080004c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004c4:	e7fe      	b.n	80004c4 <UsageFault_Handler+0x4>

080004c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr

080004d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr

080004e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004e2:	b480      	push	{r7}
 80004e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004e6:	bf00      	nop
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr

080004f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004f4:	f000 fa2c 	bl	8000950 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}

080004fc <SystemInit>:
/**
 * @brief  Setup the microcontroller system
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
	/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <SystemInit+0x20>)
 8000502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000506:	4a05      	ldr	r2, [pc, #20]	; (800051c <SystemInit+0x20>)
 8000508:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800050c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	e000ed00 	.word	0xe000ed00

08000520 <CLKEnable>:
  * @brief  Inicializa o clock do GPIOx especificado.
  * @param  GPIOx, onde x pode ser (A..F), para selecionar qual GPIO será utilizado.
  * @retval None
  */
void CLKEnable(GPIO_TypeDef* GPIOx)
{
 8000520:	b480      	push	{r7}
 8000522:	b089      	sub	sp, #36	; 0x24
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	if(GPIOx == GPIOA)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800052e:	d10b      	bne.n	8000548 <CLKEnable+0x28>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000530:	4b28      	ldr	r3, [pc, #160]	; (80005d4 <CLKEnable+0xb4>)
 8000532:	695b      	ldr	r3, [r3, #20]
 8000534:	4a27      	ldr	r2, [pc, #156]	; (80005d4 <CLKEnable+0xb4>)
 8000536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800053a:	6153      	str	r3, [r2, #20]
 800053c:	4b25      	ldr	r3, [pc, #148]	; (80005d4 <CLKEnable+0xb4>)
 800053e:	695b      	ldr	r3, [r3, #20]
 8000540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000544:	61fb      	str	r3, [r7, #28]
 8000546:	69fb      	ldr	r3, [r7, #28]
	if(GPIOx == GPIOB)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	4a23      	ldr	r2, [pc, #140]	; (80005d8 <CLKEnable+0xb8>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d10b      	bne.n	8000568 <CLKEnable+0x48>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000550:	4b20      	ldr	r3, [pc, #128]	; (80005d4 <CLKEnable+0xb4>)
 8000552:	695b      	ldr	r3, [r3, #20]
 8000554:	4a1f      	ldr	r2, [pc, #124]	; (80005d4 <CLKEnable+0xb4>)
 8000556:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800055a:	6153      	str	r3, [r2, #20]
 800055c:	4b1d      	ldr	r3, [pc, #116]	; (80005d4 <CLKEnable+0xb4>)
 800055e:	695b      	ldr	r3, [r3, #20]
 8000560:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000564:	61bb      	str	r3, [r7, #24]
 8000566:	69bb      	ldr	r3, [r7, #24]
	if(GPIOx == GPIOC)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4a1c      	ldr	r2, [pc, #112]	; (80005dc <CLKEnable+0xbc>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d10b      	bne.n	8000588 <CLKEnable+0x68>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000570:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <CLKEnable+0xb4>)
 8000572:	695b      	ldr	r3, [r3, #20]
 8000574:	4a17      	ldr	r2, [pc, #92]	; (80005d4 <CLKEnable+0xb4>)
 8000576:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800057a:	6153      	str	r3, [r2, #20]
 800057c:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <CLKEnable+0xb4>)
 800057e:	695b      	ldr	r3, [r3, #20]
 8000580:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000584:	617b      	str	r3, [r7, #20]
 8000586:	697b      	ldr	r3, [r7, #20]
	if(GPIOx == GPIOD)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4a15      	ldr	r2, [pc, #84]	; (80005e0 <CLKEnable+0xc0>)
 800058c:	4293      	cmp	r3, r2
 800058e:	d10b      	bne.n	80005a8 <CLKEnable+0x88>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000590:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <CLKEnable+0xb4>)
 8000592:	695b      	ldr	r3, [r3, #20]
 8000594:	4a0f      	ldr	r2, [pc, #60]	; (80005d4 <CLKEnable+0xb4>)
 8000596:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800059a:	6153      	str	r3, [r2, #20]
 800059c:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <CLKEnable+0xb4>)
 800059e:	695b      	ldr	r3, [r3, #20]
 80005a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80005a4:	613b      	str	r3, [r7, #16]
 80005a6:	693b      	ldr	r3, [r7, #16]
	if(GPIOx == GPIOF)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4a0e      	ldr	r2, [pc, #56]	; (80005e4 <CLKEnable+0xc4>)
 80005ac:	4293      	cmp	r3, r2
 80005ae:	d10b      	bne.n	80005c8 <CLKEnable+0xa8>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80005b0:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <CLKEnable+0xb4>)
 80005b2:	695b      	ldr	r3, [r3, #20]
 80005b4:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <CLKEnable+0xb4>)
 80005b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005ba:	6153      	str	r3, [r2, #20]
 80005bc:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <CLKEnable+0xb4>)
 80005be:	695b      	ldr	r3, [r3, #20]
 80005c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	68fb      	ldr	r3, [r7, #12]
}
 80005c8:	bf00      	nop
 80005ca:	3724      	adds	r7, #36	; 0x24
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	40021000 	.word	0x40021000
 80005d8:	48000400 	.word	0x48000400
 80005dc:	48000800 	.word	0x48000800
 80005e0:	48000c00 	.word	0x48000c00
 80005e4:	48001400 	.word	0x48001400

080005e8 <buttonInit>:
  * @param  GPIOx, onde x pode ser (A..F), para selecionar qual GPIO será utilizado.
  * @param  GPIO_Pin especifica o pino a ser inicializado.
  * @retval None
  */
void buttonInit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	460b      	mov	r3, r1
 80005f2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]

	/* GPIO Port Clock Enable */
	CLKEnable(GPIOx);
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f7ff ff8b 	bl	8000520 <CLKEnable>

	/*Configure GPIO pin : */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 800060a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800060e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000610:	2300      	movs	r3, #0
 8000612:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	4619      	mov	r1, r3
 800061e:	4803      	ldr	r0, [pc, #12]	; (800062c <buttonInit+0x44>)
 8000620:	f001 fbd6 	bl	8001dd0 <HAL_GPIO_Init>
}
 8000624:	bf00      	nop
 8000626:	3720      	adds	r7, #32
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	48000800 	.word	0x48000800

08000630 <GPIO_ReadPin>:
  * @param  GPIOx, onde x pode ser (A..F), para selecionar qual GPIO será utilizado.
  * @param  GPIO_Pin especifica o pino a ser lido.
  * @retval O valor do pino da porta especificada.
  */
GPIO_PinState GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	460b      	mov	r3, r1
 800063a:	807b      	strh	r3, [r7, #2]
	return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 800063c:	887b      	ldrh	r3, [r7, #2]
 800063e:	4619      	mov	r1, r3
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f001 fd4f 	bl	80020e4 <HAL_GPIO_ReadPin>
 8000646:	4603      	mov	r3, r0
}
 8000648:	4618      	mov	r0, r3
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <GetTick>:
/**
  * @brief  Retorna um valor de tick em milisegundos.
  * @retval tick value
  */
uint32_t GetTick(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000654:	f000 f990 	bl	8000978 <HAL_GetTick>
 8000658:	4603      	mov	r3, r0
}
 800065a:	4618      	mov	r0, r3
 800065c:	bd80      	pop	{r7, pc}

0800065e <ADC_HandleConfiguration>:
	  /* USER CODE END ADC1_Init 2 */

}

ADC_HandleTypeDef ADC_HandleConfiguration(ADC_HandleTypeDef hadc_origin)
{
 800065e:	b084      	sub	sp, #16
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	f107 0014 	add.w	r0, r7, #20
 800066c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	hadc_origin.Instance = ADC1;
 8000670:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000674:	617b      	str	r3, [r7, #20]
	hadc_origin.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	61bb      	str	r3, [r7, #24]
	hadc_origin.Init.Resolution = ADC_RESOLUTION_12B;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]
	hadc_origin.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800067e:	2300      	movs	r3, #0
 8000680:	627b      	str	r3, [r7, #36]	; 0x24
	hadc_origin.Init.ContinuousConvMode = DISABLE;
 8000682:	2300      	movs	r3, #0
 8000684:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	hadc_origin.Init.DiscontinuousConvMode = DISABLE;
 8000688:	2300      	movs	r3, #0
 800068a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	hadc_origin.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800068e:	2300      	movs	r3, #0
 8000690:	643b      	str	r3, [r7, #64]	; 0x40
	hadc_origin.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000692:	2301      	movs	r3, #1
 8000694:	63fb      	str	r3, [r7, #60]	; 0x3c
	hadc_origin.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000696:	2300      	movs	r3, #0
 8000698:	623b      	str	r3, [r7, #32]
	hadc_origin.Init.NbrOfConversion = 1;
 800069a:	2301      	movs	r3, #1
 800069c:	633b      	str	r3, [r7, #48]	; 0x30
	hadc_origin.Init.DMAContinuousRequests = DISABLE;
 800069e:	2300      	movs	r3, #0
 80006a0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	hadc_origin.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006a4:	2304      	movs	r3, #4
 80006a6:	62bb      	str	r3, [r7, #40]	; 0x28
	hadc_origin.Init.LowPowerAutoWait = DISABLE;
 80006a8:	2300      	movs	r3, #0
 80006aa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	hadc_origin.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006ae:	2300      	movs	r3, #0
 80006b0:	64bb      	str	r3, [r7, #72]	; 0x48

	return hadc_origin;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	2250      	movs	r2, #80	; 0x50
 80006bc:	4619      	mov	r1, r3
 80006be:	f003 f9a5 	bl	8003a0c <memcpy>

}
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006cc:	b004      	add	sp, #16
 80006ce:	4770      	bx	lr

080006d0 <ADC_Init2>:

void ADC_Init2(ADC_HandleTypeDef hadc_origin,ADC_TypeDef* ADC, uint32_t ADC_CHANNEL)
{
 80006d0:	b084      	sub	sp, #16
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b08a      	sub	sp, #40	; 0x28
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	f107 0c30 	add.w	ip, r7, #48	; 0x30
 80006dc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	 /* USER CODE BEGIN ADC1_Init 0 */
		//hadc = ADC_HandleConfiguration(hadc_origin);
	  /* USER CODE END ADC1_Init 0 */

	  ADC_MultiModeTypeDef multimode = {0};
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
	  ADC_ChannelConfTypeDef sConfig = {0};
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]
 80006fa:	615a      	str	r2, [r3, #20]
//	  hadc.Init.NbrOfConversion = 1;
//	  hadc.Init.DMAContinuousRequests = DISABLE;
//	  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
//	  hadc.Init.LowPowerAutoWait = DISABLE;
//	  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
	  if (HAL_ADC_Init(&hadc_origin) != HAL_OK)
 80006fc:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000700:	f000 f946 	bl	8000990 <HAL_ADC_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <ADC_Init2+0x3e>
	  {
	    Error_Handler();
 800070a:	f7ff fe68 	bl	80003de <Error_Handler>
	  }

	  /** Configure the ADC multi-mode
	  */
	  multimode.Mode = ADC_MODE_INDEPENDENT;
 800070e:	2300      	movs	r3, #0
 8000710:	61fb      	str	r3, [r7, #28]
	  if (HAL_ADCEx_MultiModeConfigChannel(&hadc_origin, &multimode) != HAL_OK)
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	4619      	mov	r1, r3
 8000718:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800071c:	f001 f8b6 	bl	800188c <HAL_ADCEx_MultiModeConfigChannel>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <ADC_Init2+0x5a>
	  {
	    Error_Handler();
 8000726:	f7ff fe5a 	bl	80003de <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL;
 800072a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800072e:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000730:	2301      	movs	r3, #1
 8000732:	60bb      	str	r3, [r7, #8]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000734:	2300      	movs	r3, #0
 8000736:	613b      	str	r3, [r7, #16]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc_origin, &sConfig) != HAL_OK)
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	4619      	mov	r1, r3
 8000748:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800074c:	f000 fdb2 	bl	80012b4 <HAL_ADC_ConfigChannel>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <ADC_Init2+0x8a>
	  {
	    Error_Handler();
 8000756:	f7ff fe42 	bl	80003de <Error_Handler>
	  }
	  /* USER CODE BEGIN ADC1_Init 2 */

	  /* USER CODE END ADC1_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	3728      	adds	r7, #40	; 0x28
 800075e:	46bd      	mov	sp, r7
 8000760:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <ADC_Calibration>:
  *            @arg ADC_SINGLE_ENDED: Canal em modo de single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Canal em modo differential ended
  * @retval HAL status
  */
void ADC_Calibration(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	6039      	str	r1, [r7, #0]
	HAL_ADCEx_Calibration_Start(hadc, SingleDiff);
 8000772:	6839      	ldr	r1, [r7, #0]
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f000 fd2a 	bl	80011ce <HAL_ADCEx_Calibration_Start>
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <ADC_Start>:
  * @brief  Inicia o ADC e começa a conversão.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	b082      	sub	sp, #8
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
	return HAL_ADC_Start(hadc);
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f000 fafa 	bl	8000d84 <HAL_ADC_Start>
 8000790:	4603      	mov	r3, r0
}
 8000792:	4618      	mov	r0, r3
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Valor do tempo de espera em milisegundos
  * @retval HAL status
  */
HAL_StatusTypeDef ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	b082      	sub	sp, #8
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
 80007a2:	6039      	str	r1, [r7, #0]
	return HAL_ADC_PollForConversion(hadc, Timeout);
 80007a4:	6839      	ldr	r1, [r7, #0]
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f000 fc02 	bl	8000fb0 <HAL_ADC_PollForConversion>
 80007ac:	4603      	mov	r3, r0
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <ADC_GetValue>:
  * @brief  Recebe o valor do ADC após conversão.
  * @param  hadc ADC handle
  * @retval Valor convertido
  */
uint32_t ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b082      	sub	sp, #8
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
	return HAL_ADC_GetValue(hadc);
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f000 fcf8 	bl	80011b4 <HAL_ADC_GetValue>
 80007c4:	4603      	mov	r3, r0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <teste_ADC>:

uint32_t teste_ADC(ADC_HandleTypeDef* hadc)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08e      	sub	sp, #56	; 0x38
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	status = ADC_Start(hadc);
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f7ff ffd2 	bl	8000782 <ADC_Start>
 80007de:	4603      	mov	r3, r0
 80007e0:	461a      	mov	r2, r3
 80007e2:	4b21      	ldr	r3, [pc, #132]	; (8000868 <teste_ADC+0x98>)
 80007e4:	701a      	strb	r2, [r3, #0]
	uint32_t avrg_value = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t adc_values[10];
	if (status != HAL_OK)
 80007ea:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <teste_ADC+0x98>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <teste_ADC+0x26>
	{
		Error_Handler();
 80007f2:	f7ff fdf4 	bl	80003de <Error_Handler>
	}

	status = ADC_PollForConversion(hadc, 100);
 80007f6:	2164      	movs	r1, #100	; 0x64
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f7ff ffce 	bl	800079a <ADC_PollForConversion>
 80007fe:	4603      	mov	r3, r0
 8000800:	461a      	mov	r2, r3
 8000802:	4b19      	ldr	r3, [pc, #100]	; (8000868 <teste_ADC+0x98>)
 8000804:	701a      	strb	r2, [r3, #0]
	if (status != HAL_OK)
 8000806:	4b18      	ldr	r3, [pc, #96]	; (8000868 <teste_ADC+0x98>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <teste_ADC+0x42>
	{
		Error_Handler();
 800080e:	f7ff fde6 	bl	80003de <Error_Handler>
	}
	for(int i=0; i<10;i++){
 8000812:	2300      	movs	r3, #0
 8000814:	633b      	str	r3, [r7, #48]	; 0x30
 8000816:	e015      	b.n	8000844 <teste_ADC+0x74>
		adc_values[i] = ADC_GetValue(hadc);
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f7ff ffcc 	bl	80007b6 <ADC_GetValue>
 800081e:	4602      	mov	r2, r0
 8000820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	3338      	adds	r3, #56	; 0x38
 8000826:	443b      	add	r3, r7
 8000828:	f843 2c30 	str.w	r2, [r3, #-48]
		avrg_value = avrg_value + adc_values[i];
 800082c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	3338      	adds	r3, #56	; 0x38
 8000832:	443b      	add	r3, r7
 8000834:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000838:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800083a:	4413      	add	r3, r2
 800083c:	637b      	str	r3, [r7, #52]	; 0x34
	for(int i=0; i<10;i++){
 800083e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000840:	3301      	adds	r3, #1
 8000842:	633b      	str	r3, [r7, #48]	; 0x30
 8000844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000846:	2b09      	cmp	r3, #9
 8000848:	dde6      	ble.n	8000818 <teste_ADC+0x48>
	}
	avrg_value = avrg_value*3300/40950;
 800084a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800084c:	f640 42e4 	movw	r2, #3300	; 0xce4
 8000850:	fb02 f303 	mul.w	r3, r2, r3
 8000854:	4a05      	ldr	r2, [pc, #20]	; (800086c <teste_ADC+0x9c>)
 8000856:	fba2 2303 	umull	r2, r3, r2, r3
 800085a:	0bdb      	lsrs	r3, r3, #15
 800085c:	637b      	str	r3, [r7, #52]	; 0x34
	return avrg_value;
 800085e:	6b7b      	ldr	r3, [r7, #52]	; 0x34

}
 8000860:	4618      	mov	r0, r3
 8000862:	3738      	adds	r7, #56	; 0x38
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	2000008b 	.word	0x2000008b
 800086c:	ccd99a67 	.word	0xccd99a67

08000870 <Reset_Handler>:
 8000870:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008a8 <LoopForever+0x2>
 8000874:	f7ff fe42 	bl	80004fc <SystemInit>
 8000878:	480c      	ldr	r0, [pc, #48]	; (80008ac <LoopForever+0x6>)
 800087a:	490d      	ldr	r1, [pc, #52]	; (80008b0 <LoopForever+0xa>)
 800087c:	4a0d      	ldr	r2, [pc, #52]	; (80008b4 <LoopForever+0xe>)
 800087e:	2300      	movs	r3, #0
 8000880:	e002      	b.n	8000888 <LoopCopyDataInit>

08000882 <CopyDataInit>:
 8000882:	58d4      	ldr	r4, [r2, r3]
 8000884:	50c4      	str	r4, [r0, r3]
 8000886:	3304      	adds	r3, #4

08000888 <LoopCopyDataInit>:
 8000888:	18c4      	adds	r4, r0, r3
 800088a:	428c      	cmp	r4, r1
 800088c:	d3f9      	bcc.n	8000882 <CopyDataInit>
 800088e:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <LoopForever+0x12>)
 8000890:	4c0a      	ldr	r4, [pc, #40]	; (80008bc <LoopForever+0x16>)
 8000892:	2300      	movs	r3, #0
 8000894:	e001      	b.n	800089a <LoopFillZerobss>

08000896 <FillZerobss>:
 8000896:	6013      	str	r3, [r2, #0]
 8000898:	3204      	adds	r2, #4

0800089a <LoopFillZerobss>:
 800089a:	42a2      	cmp	r2, r4
 800089c:	d3fb      	bcc.n	8000896 <FillZerobss>
 800089e:	f003 f891 	bl	80039c4 <__libc_init_array>
 80008a2:	f7ff fc97 	bl	80001d4 <main>

080008a6 <LoopForever>:
 80008a6:	e7fe      	b.n	80008a6 <LoopForever>
 80008a8:	20010000 	.word	0x20010000
 80008ac:	20000000 	.word	0x20000000
 80008b0:	2000000c 	.word	0x2000000c
 80008b4:	08003a88 	.word	0x08003a88
 80008b8:	2000000c 	.word	0x2000000c
 80008bc:	20000090 	.word	0x20000090

080008c0 <ADC1_2_IRQHandler>:
 80008c0:	e7fe      	b.n	80008c0 <ADC1_2_IRQHandler>
	...

080008c4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008c8:	4b08      	ldr	r3, [pc, #32]	; (80008ec <HAL_Init+0x28>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a07      	ldr	r2, [pc, #28]	; (80008ec <HAL_Init+0x28>)
 80008ce:	f043 0310 	orr.w	r3, r3, #16
 80008d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d4:	2003      	movs	r0, #3
 80008d6:	f001 fa47 	bl	8001d68 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008da:	200f      	movs	r0, #15
 80008dc:	f000 f808 	bl	80008f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e0:	f7ff fd82 	bl	80003e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40022000 	.word	0x40022000

080008f0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <HAL_InitTick+0x54>)
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <HAL_InitTick+0x58>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	4619      	mov	r1, r3
 8000902:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000906:	fbb3 f3f1 	udiv	r3, r3, r1
 800090a:	fbb2 f3f3 	udiv	r3, r2, r3
 800090e:	4618      	mov	r0, r3
 8000910:	f001 fa51 	bl	8001db6 <HAL_SYSTICK_Config>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800091a:	2301      	movs	r3, #1
 800091c:	e00e      	b.n	800093c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2b0f      	cmp	r3, #15
 8000922:	d80a      	bhi.n	800093a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000924:	2200      	movs	r2, #0
 8000926:	6879      	ldr	r1, [r7, #4]
 8000928:	f04f 30ff 	mov.w	r0, #4294967295
 800092c:	f001 fa27 	bl	8001d7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000930:	4a06      	ldr	r2, [pc, #24]	; (800094c <HAL_InitTick+0x5c>)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000936:	2300      	movs	r3, #0
 8000938:	e000      	b.n	800093c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800093a:	2301      	movs	r3, #1
}
 800093c:	4618      	mov	r0, r3
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000000 	.word	0x20000000
 8000948:	20000008 	.word	0x20000008
 800094c:	20000004 	.word	0x20000004

08000950 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <HAL_IncTick+0x20>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	461a      	mov	r2, r3
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <HAL_IncTick+0x24>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4413      	add	r3, r2
 8000960:	4a04      	ldr	r2, [pc, #16]	; (8000974 <HAL_IncTick+0x24>)
 8000962:	6013      	str	r3, [r2, #0]
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	20000008 	.word	0x20000008
 8000974:	2000008c 	.word	0x2000008c

08000978 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  return uwTick;  
 800097c:	4b03      	ldr	r3, [pc, #12]	; (800098c <HAL_GetTick+0x14>)
 800097e:	681b      	ldr	r3, [r3, #0]
}
 8000980:	4618      	mov	r0, r3
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	2000008c 	.word	0x2000008c

08000990 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b09a      	sub	sp, #104	; 0x68
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000998:	2300      	movs	r3, #0
 800099a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800099e:	2300      	movs	r3, #0
 80009a0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80009a2:	2300      	movs	r3, #0
 80009a4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d101      	bne.n	80009b0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80009ac:	2301      	movs	r3, #1
 80009ae:	e1e3      	b.n	8000d78 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	691b      	ldr	r3, [r3, #16]
 80009b4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	f003 0310 	and.w	r3, r3, #16
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d176      	bne.n	8000ab0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d152      	bne.n	8000a70 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2200      	movs	r2, #0
 80009ce:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2200      	movs	r2, #0
 80009d4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2200      	movs	r2, #0
 80009da:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2200      	movs	r2, #0
 80009e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f7ff fd23 	bl	8000430 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d13b      	bne.n	8000a70 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f001 f89d 	bl	8001b38 <ADC_Disable>
 80009fe:	4603      	mov	r3, r0
 8000a00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a08:	f003 0310 	and.w	r3, r3, #16
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d12f      	bne.n	8000a70 <HAL_ADC_Init+0xe0>
 8000a10:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d12b      	bne.n	8000a70 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a20:	f023 0302 	bic.w	r3, r3, #2
 8000a24:	f043 0202 	orr.w	r2, r3, #2
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	689a      	ldr	r2, [r3, #8]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000a3a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	689a      	ldr	r2, [r3, #8]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a4a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000a4c:	4b92      	ldr	r3, [pc, #584]	; (8000c98 <HAL_ADC_Init+0x308>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a92      	ldr	r2, [pc, #584]	; (8000c9c <HAL_ADC_Init+0x30c>)
 8000a52:	fba2 2303 	umull	r2, r3, r2, r3
 8000a56:	0c9a      	lsrs	r2, r3, #18
 8000a58:	4613      	mov	r3, r2
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	4413      	add	r3, r2
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a62:	e002      	b.n	8000a6a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d1f9      	bne.n	8000a64 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	689b      	ldr	r3, [r3, #8]
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d007      	beq.n	8000a8e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000a88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a8c:	d110      	bne.n	8000ab0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	f023 0312 	bic.w	r3, r3, #18
 8000a96:	f043 0210 	orr.w	r2, r3, #16
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	f043 0201 	orr.w	r2, r3, #1
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab4:	f003 0310 	and.w	r3, r3, #16
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	f040 8150 	bne.w	8000d5e <HAL_ADC_Init+0x3ce>
 8000abe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	f040 814b 	bne.w	8000d5e <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	f040 8143 	bne.w	8000d5e <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000adc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000ae0:	f043 0202 	orr.w	r2, r3, #2
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000af0:	d004      	beq.n	8000afc <HAL_ADC_Init+0x16c>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a6a      	ldr	r2, [pc, #424]	; (8000ca0 <HAL_ADC_Init+0x310>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d101      	bne.n	8000b00 <HAL_ADC_Init+0x170>
 8000afc:	4b69      	ldr	r3, [pc, #420]	; (8000ca4 <HAL_ADC_Init+0x314>)
 8000afe:	e000      	b.n	8000b02 <HAL_ADC_Init+0x172>
 8000b00:	4b69      	ldr	r3, [pc, #420]	; (8000ca8 <HAL_ADC_Init+0x318>)
 8000b02:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b0c:	d102      	bne.n	8000b14 <HAL_ADC_Init+0x184>
 8000b0e:	4b64      	ldr	r3, [pc, #400]	; (8000ca0 <HAL_ADC_Init+0x310>)
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	e01a      	b.n	8000b4a <HAL_ADC_Init+0x1ba>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a61      	ldr	r2, [pc, #388]	; (8000ca0 <HAL_ADC_Init+0x310>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d103      	bne.n	8000b26 <HAL_ADC_Init+0x196>
 8000b1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	e011      	b.n	8000b4a <HAL_ADC_Init+0x1ba>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a60      	ldr	r2, [pc, #384]	; (8000cac <HAL_ADC_Init+0x31c>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d102      	bne.n	8000b36 <HAL_ADC_Init+0x1a6>
 8000b30:	4b5f      	ldr	r3, [pc, #380]	; (8000cb0 <HAL_ADC_Init+0x320>)
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	e009      	b.n	8000b4a <HAL_ADC_Init+0x1ba>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a5d      	ldr	r2, [pc, #372]	; (8000cb0 <HAL_ADC_Init+0x320>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d102      	bne.n	8000b46 <HAL_ADC_Init+0x1b6>
 8000b40:	4b5a      	ldr	r3, [pc, #360]	; (8000cac <HAL_ADC_Init+0x31c>)
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	e001      	b.n	8000b4a <HAL_ADC_Init+0x1ba>
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	f003 0303 	and.w	r3, r3, #3
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d108      	bne.n	8000b6a <HAL_ADC_Init+0x1da>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d101      	bne.n	8000b6a <HAL_ADC_Init+0x1da>
 8000b66:	2301      	movs	r3, #1
 8000b68:	e000      	b.n	8000b6c <HAL_ADC_Init+0x1dc>
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d11c      	bne.n	8000baa <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000b70:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d010      	beq.n	8000b98 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	f003 0303 	and.w	r3, r3, #3
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d107      	bne.n	8000b92 <HAL_ADC_Init+0x202>
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d101      	bne.n	8000b92 <HAL_ADC_Init+0x202>
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e000      	b.n	8000b94 <HAL_ADC_Init+0x204>
 8000b92:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d108      	bne.n	8000baa <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000b98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	431a      	orrs	r2, r3
 8000ba6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ba8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	7e5b      	ldrb	r3, [r3, #25]
 8000bae:	035b      	lsls	r3, r3, #13
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000bb4:	2a01      	cmp	r2, #1
 8000bb6:	d002      	beq.n	8000bbe <HAL_ADC_Init+0x22e>
 8000bb8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bbc:	e000      	b.n	8000bc0 <HAL_ADC_Init+0x230>
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	431a      	orrs	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	68db      	ldr	r3, [r3, #12]
 8000bc6:	431a      	orrs	r2, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d11b      	bne.n	8000c16 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	7e5b      	ldrb	r3, [r3, #25]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d109      	bne.n	8000bfa <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bea:	3b01      	subs	r3, #1
 8000bec:	045a      	lsls	r2, r3, #17
 8000bee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bf6:	663b      	str	r3, [r7, #96]	; 0x60
 8000bf8:	e00d      	b.n	8000c16 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000c02:	f043 0220 	orr.w	r2, r3, #32
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	f043 0201 	orr.w	r2, r3, #1
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d054      	beq.n	8000cc8 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a22      	ldr	r2, [pc, #136]	; (8000cac <HAL_ADC_Init+0x31c>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d004      	beq.n	8000c32 <HAL_ADC_Init+0x2a2>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a20      	ldr	r2, [pc, #128]	; (8000cb0 <HAL_ADC_Init+0x320>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d140      	bne.n	8000cb4 <HAL_ADC_Init+0x324>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c36:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000c3a:	d02a      	beq.n	8000c92 <HAL_ADC_Init+0x302>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c44:	d022      	beq.n	8000c8c <HAL_ADC_Init+0x2fc>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c4a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000c4e:	d01a      	beq.n	8000c86 <HAL_ADC_Init+0x2f6>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c54:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8000c58:	d012      	beq.n	8000c80 <HAL_ADC_Init+0x2f0>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c5e:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8000c62:	d00a      	beq.n	8000c7a <HAL_ADC_Init+0x2ea>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c68:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8000c6c:	d002      	beq.n	8000c74 <HAL_ADC_Init+0x2e4>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c72:	e023      	b.n	8000cbc <HAL_ADC_Init+0x32c>
 8000c74:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c78:	e020      	b.n	8000cbc <HAL_ADC_Init+0x32c>
 8000c7a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000c7e:	e01d      	b.n	8000cbc <HAL_ADC_Init+0x32c>
 8000c80:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000c84:	e01a      	b.n	8000cbc <HAL_ADC_Init+0x32c>
 8000c86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c8a:	e017      	b.n	8000cbc <HAL_ADC_Init+0x32c>
 8000c8c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000c90:	e014      	b.n	8000cbc <HAL_ADC_Init+0x32c>
 8000c92:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000c96:	e011      	b.n	8000cbc <HAL_ADC_Init+0x32c>
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	431bde83 	.word	0x431bde83
 8000ca0:	50000100 	.word	0x50000100
 8000ca4:	50000300 	.word	0x50000300
 8000ca8:	50000700 	.word	0x50000700
 8000cac:	50000400 	.word	0x50000400
 8000cb0:	50000500 	.word	0x50000500
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	f003 030c 	and.w	r3, r3, #12
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d114      	bne.n	8000d00 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	6812      	ldr	r2, [r2, #0]
 8000ce0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ce4:	f023 0302 	bic.w	r3, r3, #2
 8000ce8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	7e1b      	ldrb	r3, [r3, #24]
 8000cee:	039a      	lsls	r2, r3, #14
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	68da      	ldr	r2, [r3, #12]
 8000d06:	4b1e      	ldr	r3, [pc, #120]	; (8000d80 <HAL_ADC_Init+0x3f0>)
 8000d08:	4013      	ands	r3, r2
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	6812      	ldr	r2, [r2, #0]
 8000d0e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000d10:	430b      	orrs	r3, r1
 8000d12:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	691b      	ldr	r3, [r3, #16]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d10c      	bne.n	8000d36 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f023 010f 	bic.w	r1, r3, #15
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	1e5a      	subs	r2, r3, #1
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	430a      	orrs	r2, r1
 8000d32:	631a      	str	r2, [r3, #48]	; 0x30
 8000d34:	e007      	b.n	8000d46 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f022 020f 	bic.w	r2, r2, #15
 8000d44:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d50:	f023 0303 	bic.w	r3, r3, #3
 8000d54:	f043 0201 	orr.w	r2, r3, #1
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	641a      	str	r2, [r3, #64]	; 0x40
 8000d5c:	e00a      	b.n	8000d74 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	f023 0312 	bic.w	r3, r3, #18
 8000d66:	f043 0210 	orr.w	r2, r3, #16
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000d6e:	2301      	movs	r3, #1
 8000d70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000d74:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3768      	adds	r7, #104	; 0x68
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	fff0c007 	.word	0xfff0c007

08000d84 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	f003 0304 	and.w	r3, r3, #4
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f040 80f9 	bne.w	8000f92 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d101      	bne.n	8000dae <HAL_ADC_Start+0x2a>
 8000daa:	2302      	movs	r3, #2
 8000dac:	e0f4      	b.n	8000f98 <HAL_ADC_Start+0x214>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2201      	movs	r2, #1
 8000db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f000 fe5a 	bl	8001a70 <ADC_Enable>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000dc0:	7bfb      	ldrb	r3, [r7, #15]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f040 80e0 	bne.w	8000f88 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dcc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000dd0:	f023 0301 	bic.w	r3, r3, #1
 8000dd4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000de4:	d004      	beq.n	8000df0 <HAL_ADC_Start+0x6c>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a6d      	ldr	r2, [pc, #436]	; (8000fa0 <HAL_ADC_Start+0x21c>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d106      	bne.n	8000dfe <HAL_ADC_Start+0x7a>
 8000df0:	4b6c      	ldr	r3, [pc, #432]	; (8000fa4 <HAL_ADC_Start+0x220>)
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	f003 031f 	and.w	r3, r3, #31
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d010      	beq.n	8000e1e <HAL_ADC_Start+0x9a>
 8000dfc:	e005      	b.n	8000e0a <HAL_ADC_Start+0x86>
 8000dfe:	4b6a      	ldr	r3, [pc, #424]	; (8000fa8 <HAL_ADC_Start+0x224>)
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	f003 031f 	and.w	r3, r3, #31
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d009      	beq.n	8000e1e <HAL_ADC_Start+0x9a>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e12:	d004      	beq.n	8000e1e <HAL_ADC_Start+0x9a>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a64      	ldr	r2, [pc, #400]	; (8000fac <HAL_ADC_Start+0x228>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d115      	bne.n	8000e4a <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d036      	beq.n	8000ea6 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e40:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000e48:	e02d      	b.n	8000ea6 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e5e:	d004      	beq.n	8000e6a <HAL_ADC_Start+0xe6>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a4e      	ldr	r2, [pc, #312]	; (8000fa0 <HAL_ADC_Start+0x21c>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d10a      	bne.n	8000e80 <HAL_ADC_Start+0xfc>
 8000e6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	bf14      	ite	ne
 8000e78:	2301      	movne	r3, #1
 8000e7a:	2300      	moveq	r3, #0
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	e008      	b.n	8000e92 <HAL_ADC_Start+0x10e>
 8000e80:	4b4a      	ldr	r3, [pc, #296]	; (8000fac <HAL_ADC_Start+0x228>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	bf14      	ite	ne
 8000e8c:	2301      	movne	r3, #1
 8000e8e:	2300      	moveq	r3, #0
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d007      	beq.n	8000ea6 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e9e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000eb2:	d106      	bne.n	8000ec2 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb8:	f023 0206 	bic.w	r2, r3, #6
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	645a      	str	r2, [r3, #68]	; 0x44
 8000ec0:	e002      	b.n	8000ec8 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	221c      	movs	r2, #28
 8000ed6:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ee0:	d004      	beq.n	8000eec <HAL_ADC_Start+0x168>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a2e      	ldr	r2, [pc, #184]	; (8000fa0 <HAL_ADC_Start+0x21c>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d106      	bne.n	8000efa <HAL_ADC_Start+0x176>
 8000eec:	4b2d      	ldr	r3, [pc, #180]	; (8000fa4 <HAL_ADC_Start+0x220>)
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	f003 031f 	and.w	r3, r3, #31
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d03e      	beq.n	8000f76 <HAL_ADC_Start+0x1f2>
 8000ef8:	e005      	b.n	8000f06 <HAL_ADC_Start+0x182>
 8000efa:	4b2b      	ldr	r3, [pc, #172]	; (8000fa8 <HAL_ADC_Start+0x224>)
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	f003 031f 	and.w	r3, r3, #31
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d037      	beq.n	8000f76 <HAL_ADC_Start+0x1f2>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f0e:	d004      	beq.n	8000f1a <HAL_ADC_Start+0x196>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a22      	ldr	r2, [pc, #136]	; (8000fa0 <HAL_ADC_Start+0x21c>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d106      	bne.n	8000f28 <HAL_ADC_Start+0x1a4>
 8000f1a:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <HAL_ADC_Start+0x220>)
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	f003 031f 	and.w	r3, r3, #31
 8000f22:	2b05      	cmp	r3, #5
 8000f24:	d027      	beq.n	8000f76 <HAL_ADC_Start+0x1f2>
 8000f26:	e005      	b.n	8000f34 <HAL_ADC_Start+0x1b0>
 8000f28:	4b1f      	ldr	r3, [pc, #124]	; (8000fa8 <HAL_ADC_Start+0x224>)
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	f003 031f 	and.w	r3, r3, #31
 8000f30:	2b05      	cmp	r3, #5
 8000f32:	d020      	beq.n	8000f76 <HAL_ADC_Start+0x1f2>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f3c:	d004      	beq.n	8000f48 <HAL_ADC_Start+0x1c4>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a17      	ldr	r2, [pc, #92]	; (8000fa0 <HAL_ADC_Start+0x21c>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d106      	bne.n	8000f56 <HAL_ADC_Start+0x1d2>
 8000f48:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <HAL_ADC_Start+0x220>)
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	f003 031f 	and.w	r3, r3, #31
 8000f50:	2b09      	cmp	r3, #9
 8000f52:	d010      	beq.n	8000f76 <HAL_ADC_Start+0x1f2>
 8000f54:	e005      	b.n	8000f62 <HAL_ADC_Start+0x1de>
 8000f56:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <HAL_ADC_Start+0x224>)
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	f003 031f 	and.w	r3, r3, #31
 8000f5e:	2b09      	cmp	r3, #9
 8000f60:	d009      	beq.n	8000f76 <HAL_ADC_Start+0x1f2>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f6a:	d004      	beq.n	8000f76 <HAL_ADC_Start+0x1f2>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0e      	ldr	r2, [pc, #56]	; (8000fac <HAL_ADC_Start+0x228>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d10f      	bne.n	8000f96 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	689a      	ldr	r2, [r3, #8]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f042 0204 	orr.w	r2, r2, #4
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	e006      	b.n	8000f96 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000f90:	e001      	b.n	8000f96 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000f92:	2302      	movs	r3, #2
 8000f94:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	50000100 	.word	0x50000100
 8000fa4:	50000300 	.word	0x50000300
 8000fa8:	50000700 	.word	0x50000700
 8000fac:	50000400 	.word	0x50000400

08000fb0 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	2b08      	cmp	r3, #8
 8000fc4:	d102      	bne.n	8000fcc <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000fc6:	2308      	movs	r3, #8
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	e03a      	b.n	8001042 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fd4:	d004      	beq.n	8000fe0 <HAL_ADC_PollForConversion+0x30>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a72      	ldr	r2, [pc, #456]	; (80011a4 <HAL_ADC_PollForConversion+0x1f4>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d101      	bne.n	8000fe4 <HAL_ADC_PollForConversion+0x34>
 8000fe0:	4b71      	ldr	r3, [pc, #452]	; (80011a8 <HAL_ADC_PollForConversion+0x1f8>)
 8000fe2:	e000      	b.n	8000fe6 <HAL_ADC_PollForConversion+0x36>
 8000fe4:	4b71      	ldr	r3, [pc, #452]	; (80011ac <HAL_ADC_PollForConversion+0x1fc>)
 8000fe6:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	f003 031f 	and.w	r3, r3, #31
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d112      	bne.n	800101a <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d11d      	bne.n	800103e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	f043 0220 	orr.w	r2, r3, #32
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e0bf      	b.n	800119a <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d00b      	beq.n	800103e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	f043 0220 	orr.w	r2, r3, #32
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e0ad      	b.n	800119a <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800103e:	230c      	movs	r3, #12
 8001040:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800104a:	d004      	beq.n	8001056 <HAL_ADC_PollForConversion+0xa6>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a54      	ldr	r2, [pc, #336]	; (80011a4 <HAL_ADC_PollForConversion+0x1f4>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d106      	bne.n	8001064 <HAL_ADC_PollForConversion+0xb4>
 8001056:	4b54      	ldr	r3, [pc, #336]	; (80011a8 <HAL_ADC_PollForConversion+0x1f8>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f003 031f 	and.w	r3, r3, #31
 800105e:	2b00      	cmp	r3, #0
 8001060:	d010      	beq.n	8001084 <HAL_ADC_PollForConversion+0xd4>
 8001062:	e005      	b.n	8001070 <HAL_ADC_PollForConversion+0xc0>
 8001064:	4b51      	ldr	r3, [pc, #324]	; (80011ac <HAL_ADC_PollForConversion+0x1fc>)
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	f003 031f 	and.w	r3, r3, #31
 800106c:	2b00      	cmp	r3, #0
 800106e:	d009      	beq.n	8001084 <HAL_ADC_PollForConversion+0xd4>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001078:	d004      	beq.n	8001084 <HAL_ADC_PollForConversion+0xd4>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a4c      	ldr	r2, [pc, #304]	; (80011b0 <HAL_ADC_PollForConversion+0x200>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d104      	bne.n	800108e <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	e00f      	b.n	80010ae <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001096:	d004      	beq.n	80010a2 <HAL_ADC_PollForConversion+0xf2>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a41      	ldr	r2, [pc, #260]	; (80011a4 <HAL_ADC_PollForConversion+0x1f4>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d102      	bne.n	80010a8 <HAL_ADC_PollForConversion+0xf8>
 80010a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80010a6:	e000      	b.n	80010aa <HAL_ADC_PollForConversion+0xfa>
 80010a8:	4b41      	ldr	r3, [pc, #260]	; (80011b0 <HAL_ADC_PollForConversion+0x200>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80010ae:	f7ff fc63 	bl	8000978 <HAL_GetTick>
 80010b2:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80010b4:	e021      	b.n	80010fa <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010bc:	d01d      	beq.n	80010fa <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d007      	beq.n	80010d4 <HAL_ADC_PollForConversion+0x124>
 80010c4:	f7ff fc58 	bl	8000978 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d212      	bcs.n	80010fa <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	4013      	ands	r3, r2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d10b      	bne.n	80010fa <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	f043 0204 	orr.w	r2, r3, #4
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e04f      	b.n	800119a <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	4013      	ands	r3, r2
 8001104:	2b00      	cmp	r3, #0
 8001106:	d0d6      	beq.n	80010b6 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800111e:	2b00      	cmp	r3, #0
 8001120:	d131      	bne.n	8001186 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001128:	2b00      	cmp	r3, #0
 800112a:	d12c      	bne.n	8001186 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0308 	and.w	r3, r3, #8
 8001136:	2b08      	cmp	r3, #8
 8001138:	d125      	bne.n	8001186 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f003 0304 	and.w	r3, r3, #4
 8001144:	2b00      	cmp	r3, #0
 8001146:	d112      	bne.n	800116e <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d112      	bne.n	8001186 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	f043 0201 	orr.w	r2, r3, #1
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	641a      	str	r2, [r3, #64]	; 0x40
 800116c:	e00b      	b.n	8001186 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	f043 0220 	orr.w	r2, r3, #32
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	f043 0201 	orr.w	r2, r3, #1
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d103      	bne.n	8001198 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	697a      	ldr	r2, [r7, #20]
 8001196:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	50000100 	.word	0x50000100
 80011a8:	50000300 	.word	0x50000300
 80011ac:	50000700 	.word	0x50000700
 80011b0:	50000400 	.word	0x50000400

080011b4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
 80011d6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011d8:	2300      	movs	r3, #0
 80011da:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d101      	bne.n	80011ea <HAL_ADCEx_Calibration_Start+0x1c>
 80011e6:	2302      	movs	r3, #2
 80011e8:	e05f      	b.n	80012aa <HAL_ADCEx_Calibration_Start+0xdc>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2201      	movs	r2, #1
 80011ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f000 fca0 	bl	8001b38 <ADC_Disable>
 80011f8:	4603      	mov	r3, r0
 80011fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d14e      	bne.n	80012a0 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2201      	movs	r2, #1
 8001206:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	689a      	ldr	r2, [r3, #8]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001216:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d107      	bne.n	800122e <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800122c:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800123c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800123e:	f7ff fb9b 	bl	8000978 <HAL_GetTick>
 8001242:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001244:	e01c      	b.n	8001280 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001246:	f7ff fb97 	bl	8000978 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b0a      	cmp	r3, #10
 8001252:	d915      	bls.n	8001280 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800125e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001262:	d10d      	bne.n	8001280 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	f023 0312 	bic.w	r3, r3, #18
 800126c:	f043 0210 	orr.w	r2, r3, #16
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e014      	b.n	80012aa <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800128a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800128e:	d0da      	beq.n	8001246 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	f023 0303 	bic.w	r3, r3, #3
 8001298:	f043 0201 	orr.w	r2, r3, #1
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b09b      	sub	sp, #108	; 0x6c
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012be:	2300      	movs	r3, #0
 80012c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d101      	bne.n	80012d6 <HAL_ADC_ConfigChannel+0x22>
 80012d2:	2302      	movs	r3, #2
 80012d4:	e2ca      	b.n	800186c <HAL_ADC_ConfigChannel+0x5b8>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2201      	movs	r2, #1
 80012da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f003 0304 	and.w	r3, r3, #4
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f040 82ae 	bne.w	800184a <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	d81c      	bhi.n	8001330 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685a      	ldr	r2, [r3, #4]
 8001300:	4613      	mov	r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	4413      	add	r3, r2
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	461a      	mov	r2, r3
 800130a:	231f      	movs	r3, #31
 800130c:	4093      	lsls	r3, r2
 800130e:	43db      	mvns	r3, r3
 8001310:	4019      	ands	r1, r3
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	6818      	ldr	r0, [r3, #0]
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685a      	ldr	r2, [r3, #4]
 800131a:	4613      	mov	r3, r2
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	4413      	add	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	fa00 f203 	lsl.w	r2, r0, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	430a      	orrs	r2, r1
 800132c:	631a      	str	r2, [r3, #48]	; 0x30
 800132e:	e063      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	2b09      	cmp	r3, #9
 8001336:	d81e      	bhi.n	8001376 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	4613      	mov	r3, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	4413      	add	r3, r2
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	3b1e      	subs	r3, #30
 800134c:	221f      	movs	r2, #31
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	4019      	ands	r1, r3
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	6818      	ldr	r0, [r3, #0]
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	4613      	mov	r3, r2
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	4413      	add	r3, r2
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	3b1e      	subs	r3, #30
 8001368:	fa00 f203 	lsl.w	r2, r0, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	430a      	orrs	r2, r1
 8001372:	635a      	str	r2, [r3, #52]	; 0x34
 8001374:	e040      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b0e      	cmp	r3, #14
 800137c:	d81e      	bhi.n	80013bc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	4613      	mov	r3, r2
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	4413      	add	r3, r2
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	3b3c      	subs	r3, #60	; 0x3c
 8001392:	221f      	movs	r2, #31
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	4019      	ands	r1, r3
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	6818      	ldr	r0, [r3, #0]
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685a      	ldr	r2, [r3, #4]
 80013a4:	4613      	mov	r3, r2
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	4413      	add	r3, r2
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	3b3c      	subs	r3, #60	; 0x3c
 80013ae:	fa00 f203 	lsl.w	r2, r0, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	639a      	str	r2, [r3, #56]	; 0x38
 80013ba:	e01d      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	4613      	mov	r3, r2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4413      	add	r3, r2
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	3b5a      	subs	r3, #90	; 0x5a
 80013d0:	221f      	movs	r2, #31
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43db      	mvns	r3, r3
 80013d8:	4019      	ands	r1, r3
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	6818      	ldr	r0, [r3, #0]
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	4613      	mov	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4413      	add	r3, r2
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	3b5a      	subs	r3, #90	; 0x5a
 80013ec:	fa00 f203 	lsl.w	r2, r0, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	430a      	orrs	r2, r1
 80013f6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 030c 	and.w	r3, r3, #12
 8001402:	2b00      	cmp	r3, #0
 8001404:	f040 80e5 	bne.w	80015d2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b09      	cmp	r3, #9
 800140e:	d91c      	bls.n	800144a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6999      	ldr	r1, [r3, #24]
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	4613      	mov	r3, r2
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4413      	add	r3, r2
 8001420:	3b1e      	subs	r3, #30
 8001422:	2207      	movs	r2, #7
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	4019      	ands	r1, r3
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	6898      	ldr	r0, [r3, #8]
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4613      	mov	r3, r2
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	4413      	add	r3, r2
 800143a:	3b1e      	subs	r3, #30
 800143c:	fa00 f203 	lsl.w	r2, r0, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	430a      	orrs	r2, r1
 8001446:	619a      	str	r2, [r3, #24]
 8001448:	e019      	b.n	800147e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6959      	ldr	r1, [r3, #20]
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4613      	mov	r3, r2
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	4413      	add	r3, r2
 800145a:	2207      	movs	r2, #7
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	4019      	ands	r1, r3
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	6898      	ldr	r0, [r3, #8]
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4613      	mov	r3, r2
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	4413      	add	r3, r2
 8001472:	fa00 f203 	lsl.w	r2, r0, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	430a      	orrs	r2, r1
 800147c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	695a      	ldr	r2, [r3, #20]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	08db      	lsrs	r3, r3, #3
 800148a:	f003 0303 	and.w	r3, r3, #3
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	3b01      	subs	r3, #1
 800149c:	2b03      	cmp	r3, #3
 800149e:	d84f      	bhi.n	8001540 <HAL_ADC_ConfigChannel+0x28c>
 80014a0:	a201      	add	r2, pc, #4	; (adr r2, 80014a8 <HAL_ADC_ConfigChannel+0x1f4>)
 80014a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a6:	bf00      	nop
 80014a8:	080014b9 	.word	0x080014b9
 80014ac:	080014db 	.word	0x080014db
 80014b0:	080014fd 	.word	0x080014fd
 80014b4:	0800151f 	.word	0x0800151f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014be:	4b9a      	ldr	r3, [pc, #616]	; (8001728 <HAL_ADC_ConfigChannel+0x474>)
 80014c0:	4013      	ands	r3, r2
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	6812      	ldr	r2, [r2, #0]
 80014c6:	0691      	lsls	r1, r2, #26
 80014c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80014ca:	430a      	orrs	r2, r1
 80014cc:	431a      	orrs	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80014d6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80014d8:	e07e      	b.n	80015d8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80014e0:	4b91      	ldr	r3, [pc, #580]	; (8001728 <HAL_ADC_ConfigChannel+0x474>)
 80014e2:	4013      	ands	r3, r2
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	6812      	ldr	r2, [r2, #0]
 80014e8:	0691      	lsls	r1, r2, #26
 80014ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80014ec:	430a      	orrs	r2, r1
 80014ee:	431a      	orrs	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80014f8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80014fa:	e06d      	b.n	80015d8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001502:	4b89      	ldr	r3, [pc, #548]	; (8001728 <HAL_ADC_ConfigChannel+0x474>)
 8001504:	4013      	ands	r3, r2
 8001506:	683a      	ldr	r2, [r7, #0]
 8001508:	6812      	ldr	r2, [r2, #0]
 800150a:	0691      	lsls	r1, r2, #26
 800150c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800150e:	430a      	orrs	r2, r1
 8001510:	431a      	orrs	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800151a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800151c:	e05c      	b.n	80015d8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001524:	4b80      	ldr	r3, [pc, #512]	; (8001728 <HAL_ADC_ConfigChannel+0x474>)
 8001526:	4013      	ands	r3, r2
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	6812      	ldr	r2, [r2, #0]
 800152c:	0691      	lsls	r1, r2, #26
 800152e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001530:	430a      	orrs	r2, r1
 8001532:	431a      	orrs	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800153c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800153e:	e04b      	b.n	80015d8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001546:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	069b      	lsls	r3, r3, #26
 8001550:	429a      	cmp	r2, r3
 8001552:	d107      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001562:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800156a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	069b      	lsls	r3, r3, #26
 8001574:	429a      	cmp	r2, r3
 8001576:	d107      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001586:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800158e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	069b      	lsls	r3, r3, #26
 8001598:	429a      	cmp	r2, r3
 800159a:	d107      	bne.n	80015ac <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80015aa:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80015b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	069b      	lsls	r3, r3, #26
 80015bc:	429a      	cmp	r2, r3
 80015be:	d10a      	bne.n	80015d6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80015ce:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80015d0:	e001      	b.n	80015d6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80015d2:	bf00      	nop
 80015d4:	e000      	b.n	80015d8 <HAL_ADC_ConfigChannel+0x324>
      break;
 80015d6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 0303 	and.w	r3, r3, #3
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d108      	bne.n	80015f8 <HAL_ADC_ConfigChannel+0x344>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d101      	bne.n	80015f8 <HAL_ADC_ConfigChannel+0x344>
 80015f4:	2301      	movs	r3, #1
 80015f6:	e000      	b.n	80015fa <HAL_ADC_ConfigChannel+0x346>
 80015f8:	2300      	movs	r3, #0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f040 8130 	bne.w	8001860 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d00f      	beq.n	8001628 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2201      	movs	r2, #1
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43da      	mvns	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	400a      	ands	r2, r1
 8001622:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001626:	e049      	b.n	80016bc <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2201      	movs	r2, #1
 8001636:	409a      	lsls	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	430a      	orrs	r2, r1
 800163e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b09      	cmp	r3, #9
 8001648:	d91c      	bls.n	8001684 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6999      	ldr	r1, [r3, #24]
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4613      	mov	r3, r2
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	4413      	add	r3, r2
 800165a:	3b1b      	subs	r3, #27
 800165c:	2207      	movs	r2, #7
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43db      	mvns	r3, r3
 8001664:	4019      	ands	r1, r3
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	6898      	ldr	r0, [r3, #8]
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	4613      	mov	r3, r2
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	4413      	add	r3, r2
 8001674:	3b1b      	subs	r3, #27
 8001676:	fa00 f203 	lsl.w	r2, r0, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	430a      	orrs	r2, r1
 8001680:	619a      	str	r2, [r3, #24]
 8001682:	e01b      	b.n	80016bc <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6959      	ldr	r1, [r3, #20]
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	1c5a      	adds	r2, r3, #1
 8001690:	4613      	mov	r3, r2
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4413      	add	r3, r2
 8001696:	2207      	movs	r2, #7
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	4019      	ands	r1, r3
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	6898      	ldr	r0, [r3, #8]
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	1c5a      	adds	r2, r3, #1
 80016aa:	4613      	mov	r3, r2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	4413      	add	r3, r2
 80016b0:	fa00 f203 	lsl.w	r2, r0, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	430a      	orrs	r2, r1
 80016ba:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016c4:	d004      	beq.n	80016d0 <HAL_ADC_ConfigChannel+0x41c>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a18      	ldr	r2, [pc, #96]	; (800172c <HAL_ADC_ConfigChannel+0x478>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d101      	bne.n	80016d4 <HAL_ADC_ConfigChannel+0x420>
 80016d0:	4b17      	ldr	r3, [pc, #92]	; (8001730 <HAL_ADC_ConfigChannel+0x47c>)
 80016d2:	e000      	b.n	80016d6 <HAL_ADC_ConfigChannel+0x422>
 80016d4:	4b17      	ldr	r3, [pc, #92]	; (8001734 <HAL_ADC_ConfigChannel+0x480>)
 80016d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b10      	cmp	r3, #16
 80016de:	d105      	bne.n	80016ec <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80016e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d015      	beq.n	8001718 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80016f0:	2b11      	cmp	r3, #17
 80016f2:	d105      	bne.n	8001700 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80016f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d00b      	beq.n	8001718 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001704:	2b12      	cmp	r3, #18
 8001706:	f040 80ab 	bne.w	8001860 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800170a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001712:	2b00      	cmp	r3, #0
 8001714:	f040 80a4 	bne.w	8001860 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001720:	d10a      	bne.n	8001738 <HAL_ADC_ConfigChannel+0x484>
 8001722:	4b02      	ldr	r3, [pc, #8]	; (800172c <HAL_ADC_ConfigChannel+0x478>)
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	e022      	b.n	800176e <HAL_ADC_ConfigChannel+0x4ba>
 8001728:	83fff000 	.word	0x83fff000
 800172c:	50000100 	.word	0x50000100
 8001730:	50000300 	.word	0x50000300
 8001734:	50000700 	.word	0x50000700
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a4e      	ldr	r2, [pc, #312]	; (8001878 <HAL_ADC_ConfigChannel+0x5c4>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d103      	bne.n	800174a <HAL_ADC_ConfigChannel+0x496>
 8001742:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	e011      	b.n	800176e <HAL_ADC_ConfigChannel+0x4ba>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a4b      	ldr	r2, [pc, #300]	; (800187c <HAL_ADC_ConfigChannel+0x5c8>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d102      	bne.n	800175a <HAL_ADC_ConfigChannel+0x4a6>
 8001754:	4b4a      	ldr	r3, [pc, #296]	; (8001880 <HAL_ADC_ConfigChannel+0x5cc>)
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	e009      	b.n	800176e <HAL_ADC_ConfigChannel+0x4ba>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a48      	ldr	r2, [pc, #288]	; (8001880 <HAL_ADC_ConfigChannel+0x5cc>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d102      	bne.n	800176a <HAL_ADC_ConfigChannel+0x4b6>
 8001764:	4b45      	ldr	r3, [pc, #276]	; (800187c <HAL_ADC_ConfigChannel+0x5c8>)
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	e001      	b.n	800176e <HAL_ADC_ConfigChannel+0x4ba>
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 0303 	and.w	r3, r3, #3
 8001778:	2b01      	cmp	r3, #1
 800177a:	d108      	bne.n	800178e <HAL_ADC_ConfigChannel+0x4da>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b01      	cmp	r3, #1
 8001788:	d101      	bne.n	800178e <HAL_ADC_ConfigChannel+0x4da>
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <HAL_ADC_ConfigChannel+0x4dc>
 800178e:	2300      	movs	r3, #0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d150      	bne.n	8001836 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001794:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001796:	2b00      	cmp	r3, #0
 8001798:	d010      	beq.n	80017bc <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d107      	bne.n	80017b6 <HAL_ADC_ConfigChannel+0x502>
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d101      	bne.n	80017b6 <HAL_ADC_ConfigChannel+0x502>
 80017b2:	2301      	movs	r3, #1
 80017b4:	e000      	b.n	80017b8 <HAL_ADC_ConfigChannel+0x504>
 80017b6:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d13c      	bne.n	8001836 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b10      	cmp	r3, #16
 80017c2:	d11d      	bne.n	8001800 <HAL_ADC_ConfigChannel+0x54c>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017cc:	d118      	bne.n	8001800 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80017ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80017d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017d8:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017da:	4b2a      	ldr	r3, [pc, #168]	; (8001884 <HAL_ADC_ConfigChannel+0x5d0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a2a      	ldr	r2, [pc, #168]	; (8001888 <HAL_ADC_ConfigChannel+0x5d4>)
 80017e0:	fba2 2303 	umull	r2, r3, r2, r3
 80017e4:	0c9a      	lsrs	r2, r3, #18
 80017e6:	4613      	mov	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017f0:	e002      	b.n	80017f8 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	3b01      	subs	r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f9      	bne.n	80017f2 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017fe:	e02e      	b.n	800185e <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b11      	cmp	r3, #17
 8001806:	d10b      	bne.n	8001820 <HAL_ADC_ConfigChannel+0x56c>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001810:	d106      	bne.n	8001820 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800181a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800181c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800181e:	e01e      	b.n	800185e <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b12      	cmp	r3, #18
 8001826:	d11a      	bne.n	800185e <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001828:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001830:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001832:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001834:	e013      	b.n	800185e <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	f043 0220 	orr.w	r2, r3, #32
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001848:	e00a      	b.n	8001860 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	f043 0220 	orr.w	r2, r3, #32
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800185c:	e000      	b.n	8001860 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800185e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001868:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800186c:	4618      	mov	r0, r3
 800186e:	376c      	adds	r7, #108	; 0x6c
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	50000100 	.word	0x50000100
 800187c:	50000400 	.word	0x50000400
 8001880:	50000500 	.word	0x50000500
 8001884:	20000000 	.word	0x20000000
 8001888:	431bde83 	.word	0x431bde83

0800188c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800188c:	b480      	push	{r7}
 800188e:	b099      	sub	sp, #100	; 0x64
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001896:	2300      	movs	r3, #0
 8001898:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018a4:	d102      	bne.n	80018ac <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80018a6:	4b6d      	ldr	r3, [pc, #436]	; (8001a5c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80018a8:	60bb      	str	r3, [r7, #8]
 80018aa:	e01a      	b.n	80018e2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a6a      	ldr	r2, [pc, #424]	; (8001a5c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d103      	bne.n	80018be <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80018b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	e011      	b.n	80018e2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a67      	ldr	r2, [pc, #412]	; (8001a60 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d102      	bne.n	80018ce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80018c8:	4b66      	ldr	r3, [pc, #408]	; (8001a64 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	e009      	b.n	80018e2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a64      	ldr	r2, [pc, #400]	; (8001a64 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d102      	bne.n	80018de <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80018d8:	4b61      	ldr	r3, [pc, #388]	; (8001a60 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	e001      	b.n	80018e2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80018de:	2300      	movs	r3, #0
 80018e0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e0b0      	b.n	8001a4e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d101      	bne.n	80018fa <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80018f6:	2302      	movs	r3, #2
 80018f8:	e0a9      	b.n	8001a4e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b00      	cmp	r3, #0
 800190e:	f040 808d 	bne.w	8001a2c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	2b00      	cmp	r3, #0
 800191c:	f040 8086 	bne.w	8001a2c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001928:	d004      	beq.n	8001934 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a4b      	ldr	r2, [pc, #300]	; (8001a5c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d101      	bne.n	8001938 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001934:	4b4c      	ldr	r3, [pc, #304]	; (8001a68 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001936:	e000      	b.n	800193a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001938:	4b4c      	ldr	r3, [pc, #304]	; (8001a6c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800193a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d040      	beq.n	80019c6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001944:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	6859      	ldr	r1, [r3, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001956:	035b      	lsls	r3, r3, #13
 8001958:	430b      	orrs	r3, r1
 800195a:	431a      	orrs	r2, r3
 800195c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800195e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	2b01      	cmp	r3, #1
 800196c:	d108      	bne.n	8001980 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b01      	cmp	r3, #1
 800197a:	d101      	bne.n	8001980 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800197c:	2301      	movs	r3, #1
 800197e:	e000      	b.n	8001982 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001980:	2300      	movs	r3, #0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d15c      	bne.n	8001a40 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	2b01      	cmp	r3, #1
 8001990:	d107      	bne.n	80019a2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b01      	cmp	r3, #1
 800199c:	d101      	bne.n	80019a2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800199e:	2301      	movs	r3, #1
 80019a0:	e000      	b.n	80019a4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80019a2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d14b      	bne.n	8001a40 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80019a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80019b0:	f023 030f 	bic.w	r3, r3, #15
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	6811      	ldr	r1, [r2, #0]
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	6892      	ldr	r2, [r2, #8]
 80019bc:	430a      	orrs	r2, r1
 80019be:	431a      	orrs	r2, r3
 80019c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019c2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80019c4:	e03c      	b.n	8001a40 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80019c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019d0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 0303 	and.w	r3, r3, #3
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d108      	bne.n	80019f2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d101      	bne.n	80019f2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80019ee:	2301      	movs	r3, #1
 80019f0:	e000      	b.n	80019f4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80019f2:	2300      	movs	r3, #0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d123      	bne.n	8001a40 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 0303 	and.w	r3, r3, #3
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d107      	bne.n	8001a14 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d101      	bne.n	8001a14 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001a10:	2301      	movs	r3, #1
 8001a12:	e000      	b.n	8001a16 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001a14:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d112      	bne.n	8001a40 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001a1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001a22:	f023 030f 	bic.w	r3, r3, #15
 8001a26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a28:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a2a:	e009      	b.n	8001a40 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a30:	f043 0220 	orr.w	r2, r3, #32
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001a3e:	e000      	b.n	8001a42 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a40:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001a4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3764      	adds	r7, #100	; 0x64
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	50000100 	.word	0x50000100
 8001a60:	50000400 	.word	0x50000400
 8001a64:	50000500 	.word	0x50000500
 8001a68:	50000300 	.word	0x50000300
 8001a6c:	50000700 	.word	0x50000700

08001a70 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d108      	bne.n	8001a9c <ADC_Enable+0x2c>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d101      	bne.n	8001a9c <ADC_Enable+0x2c>
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e000      	b.n	8001a9e <ADC_Enable+0x2e>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d143      	bne.n	8001b2a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	4b22      	ldr	r3, [pc, #136]	; (8001b34 <ADC_Enable+0xc4>)
 8001aaa:	4013      	ands	r3, r2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d00d      	beq.n	8001acc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	f043 0210 	orr.w	r2, r3, #16
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac0:	f043 0201 	orr.w	r2, r3, #1
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e02f      	b.n	8001b2c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689a      	ldr	r2, [r3, #8]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f042 0201 	orr.w	r2, r2, #1
 8001ada:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001adc:	f7fe ff4c 	bl	8000978 <HAL_GetTick>
 8001ae0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ae2:	e01b      	b.n	8001b1c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ae4:	f7fe ff48 	bl	8000978 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d914      	bls.n	8001b1c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d00d      	beq.n	8001b1c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	f043 0210 	orr.w	r2, r3, #16
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b10:	f043 0201 	orr.w	r2, r3, #1
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e007      	b.n	8001b2c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d1dc      	bne.n	8001ae4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	8000003f 	.word	0x8000003f

08001b38 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d108      	bne.n	8001b64 <ADC_Disable+0x2c>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d101      	bne.n	8001b64 <ADC_Disable+0x2c>
 8001b60:	2301      	movs	r3, #1
 8001b62:	e000      	b.n	8001b66 <ADC_Disable+0x2e>
 8001b64:	2300      	movs	r3, #0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d047      	beq.n	8001bfa <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 030d 	and.w	r3, r3, #13
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d10f      	bne.n	8001b98 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 0202 	orr.w	r2, r2, #2
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2203      	movs	r2, #3
 8001b8e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001b90:	f7fe fef2 	bl	8000978 <HAL_GetTick>
 8001b94:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b96:	e029      	b.n	8001bec <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9c:	f043 0210 	orr.w	r2, r3, #16
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba8:	f043 0201 	orr.w	r2, r3, #1
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e023      	b.n	8001bfc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001bb4:	f7fe fee0 	bl	8000978 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d914      	bls.n	8001bec <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d10d      	bne.n	8001bec <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	f043 0210 	orr.w	r2, r3, #16
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be0:	f043 0201 	orr.w	r2, r3, #1
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e007      	b.n	8001bfc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d0dc      	beq.n	8001bb4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c14:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <__NVIC_SetPriorityGrouping+0x44>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c20:	4013      	ands	r3, r2
 8001c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c36:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <__NVIC_SetPriorityGrouping+0x44>)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	60d3      	str	r3, [r2, #12]
}
 8001c3c:	bf00      	nop
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c50:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <__NVIC_GetPriorityGrouping+0x18>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	0a1b      	lsrs	r3, r3, #8
 8001c56:	f003 0307 	and.w	r3, r3, #7
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	6039      	str	r1, [r7, #0]
 8001c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	db0a      	blt.n	8001c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	490c      	ldr	r1, [pc, #48]	; (8001cb4 <__NVIC_SetPriority+0x4c>)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	0112      	lsls	r2, r2, #4
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	440b      	add	r3, r1
 8001c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c90:	e00a      	b.n	8001ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	4908      	ldr	r1, [pc, #32]	; (8001cb8 <__NVIC_SetPriority+0x50>)
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	3b04      	subs	r3, #4
 8001ca0:	0112      	lsls	r2, r2, #4
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	761a      	strb	r2, [r3, #24]
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	e000e100 	.word	0xe000e100
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b089      	sub	sp, #36	; 0x24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f1c3 0307 	rsb	r3, r3, #7
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	bf28      	it	cs
 8001cda:	2304      	movcs	r3, #4
 8001cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	2b06      	cmp	r3, #6
 8001ce4:	d902      	bls.n	8001cec <NVIC_EncodePriority+0x30>
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3b03      	subs	r3, #3
 8001cea:	e000      	b.n	8001cee <NVIC_EncodePriority+0x32>
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43da      	mvns	r2, r3
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	401a      	ands	r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d04:	f04f 31ff 	mov.w	r1, #4294967295
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0e:	43d9      	mvns	r1, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	4313      	orrs	r3, r2
         );
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3724      	adds	r7, #36	; 0x24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
	...

08001d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d34:	d301      	bcc.n	8001d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d36:	2301      	movs	r3, #1
 8001d38:	e00f      	b.n	8001d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <SysTick_Config+0x40>)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d42:	210f      	movs	r1, #15
 8001d44:	f04f 30ff 	mov.w	r0, #4294967295
 8001d48:	f7ff ff8e 	bl	8001c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <SysTick_Config+0x40>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d52:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <SysTick_Config+0x40>)
 8001d54:	2207      	movs	r2, #7
 8001d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	e000e010 	.word	0xe000e010

08001d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff ff47 	bl	8001c04 <__NVIC_SetPriorityGrouping>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b086      	sub	sp, #24
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4603      	mov	r3, r0
 8001d86:	60b9      	str	r1, [r7, #8]
 8001d88:	607a      	str	r2, [r7, #4]
 8001d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d90:	f7ff ff5c 	bl	8001c4c <__NVIC_GetPriorityGrouping>
 8001d94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	68b9      	ldr	r1, [r7, #8]
 8001d9a:	6978      	ldr	r0, [r7, #20]
 8001d9c:	f7ff ff8e 	bl	8001cbc <NVIC_EncodePriority>
 8001da0:	4602      	mov	r2, r0
 8001da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da6:	4611      	mov	r1, r2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff5d 	bl	8001c68 <__NVIC_SetPriority>
}
 8001dae:	bf00      	nop
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff ffb0 	bl	8001d24 <SysTick_Config>
 8001dc4:	4603      	mov	r3, r0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b087      	sub	sp, #28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dde:	e160      	b.n	80020a2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	2101      	movs	r1, #1
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dec:	4013      	ands	r3, r2
 8001dee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 8152 	beq.w	800209c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d005      	beq.n	8001e10 <HAL_GPIO_Init+0x40>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d130      	bne.n	8001e72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4013      	ands	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	68da      	ldr	r2, [r3, #12]
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e46:	2201      	movs	r2, #1
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	4013      	ands	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	091b      	lsrs	r3, r3, #4
 8001e5c:	f003 0201 	and.w	r2, r3, #1
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	2b03      	cmp	r3, #3
 8001e7c:	d017      	beq.n	8001eae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	2203      	movs	r2, #3
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	4013      	ands	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	689a      	ldr	r2, [r3, #8]
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d123      	bne.n	8001f02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	08da      	lsrs	r2, r3, #3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	3208      	adds	r2, #8
 8001ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	220f      	movs	r2, #15
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	4013      	ands	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	691a      	ldr	r2, [r3, #16]
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	08da      	lsrs	r2, r3, #3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3208      	adds	r2, #8
 8001efc:	6939      	ldr	r1, [r7, #16]
 8001efe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	4013      	ands	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 0203 	and.w	r2, r3, #3
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 80ac 	beq.w	800209c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f44:	4b5e      	ldr	r3, [pc, #376]	; (80020c0 <HAL_GPIO_Init+0x2f0>)
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	4a5d      	ldr	r2, [pc, #372]	; (80020c0 <HAL_GPIO_Init+0x2f0>)
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	6193      	str	r3, [r2, #24]
 8001f50:	4b5b      	ldr	r3, [pc, #364]	; (80020c0 <HAL_GPIO_Init+0x2f0>)
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f5c:	4a59      	ldr	r2, [pc, #356]	; (80020c4 <HAL_GPIO_Init+0x2f4>)
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	089b      	lsrs	r3, r3, #2
 8001f62:	3302      	adds	r3, #2
 8001f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	220f      	movs	r2, #15
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f86:	d025      	beq.n	8001fd4 <HAL_GPIO_Init+0x204>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a4f      	ldr	r2, [pc, #316]	; (80020c8 <HAL_GPIO_Init+0x2f8>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d01f      	beq.n	8001fd0 <HAL_GPIO_Init+0x200>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a4e      	ldr	r2, [pc, #312]	; (80020cc <HAL_GPIO_Init+0x2fc>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d019      	beq.n	8001fcc <HAL_GPIO_Init+0x1fc>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a4d      	ldr	r2, [pc, #308]	; (80020d0 <HAL_GPIO_Init+0x300>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d013      	beq.n	8001fc8 <HAL_GPIO_Init+0x1f8>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a4c      	ldr	r2, [pc, #304]	; (80020d4 <HAL_GPIO_Init+0x304>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d00d      	beq.n	8001fc4 <HAL_GPIO_Init+0x1f4>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a4b      	ldr	r2, [pc, #300]	; (80020d8 <HAL_GPIO_Init+0x308>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d007      	beq.n	8001fc0 <HAL_GPIO_Init+0x1f0>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a4a      	ldr	r2, [pc, #296]	; (80020dc <HAL_GPIO_Init+0x30c>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d101      	bne.n	8001fbc <HAL_GPIO_Init+0x1ec>
 8001fb8:	2306      	movs	r3, #6
 8001fba:	e00c      	b.n	8001fd6 <HAL_GPIO_Init+0x206>
 8001fbc:	2307      	movs	r3, #7
 8001fbe:	e00a      	b.n	8001fd6 <HAL_GPIO_Init+0x206>
 8001fc0:	2305      	movs	r3, #5
 8001fc2:	e008      	b.n	8001fd6 <HAL_GPIO_Init+0x206>
 8001fc4:	2304      	movs	r3, #4
 8001fc6:	e006      	b.n	8001fd6 <HAL_GPIO_Init+0x206>
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e004      	b.n	8001fd6 <HAL_GPIO_Init+0x206>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	e002      	b.n	8001fd6 <HAL_GPIO_Init+0x206>
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e000      	b.n	8001fd6 <HAL_GPIO_Init+0x206>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	f002 0203 	and.w	r2, r2, #3
 8001fdc:	0092      	lsls	r2, r2, #2
 8001fde:	4093      	lsls	r3, r2
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fe6:	4937      	ldr	r1, [pc, #220]	; (80020c4 <HAL_GPIO_Init+0x2f4>)
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	089b      	lsrs	r3, r3, #2
 8001fec:	3302      	adds	r3, #2
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ff4:	4b3a      	ldr	r3, [pc, #232]	; (80020e0 <HAL_GPIO_Init+0x310>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4013      	ands	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	4313      	orrs	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002018:	4a31      	ldr	r2, [pc, #196]	; (80020e0 <HAL_GPIO_Init+0x310>)
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800201e:	4b30      	ldr	r3, [pc, #192]	; (80020e0 <HAL_GPIO_Init+0x310>)
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	43db      	mvns	r3, r3
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	4013      	ands	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4313      	orrs	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002042:	4a27      	ldr	r2, [pc, #156]	; (80020e0 <HAL_GPIO_Init+0x310>)
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002048:	4b25      	ldr	r3, [pc, #148]	; (80020e0 <HAL_GPIO_Init+0x310>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	43db      	mvns	r3, r3
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4013      	ands	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4313      	orrs	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800206c:	4a1c      	ldr	r2, [pc, #112]	; (80020e0 <HAL_GPIO_Init+0x310>)
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002072:	4b1b      	ldr	r3, [pc, #108]	; (80020e0 <HAL_GPIO_Init+0x310>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	43db      	mvns	r3, r3
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	4013      	ands	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4313      	orrs	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002096:	4a12      	ldr	r2, [pc, #72]	; (80020e0 <HAL_GPIO_Init+0x310>)
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	3301      	adds	r3, #1
 80020a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	fa22 f303 	lsr.w	r3, r2, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f47f ae97 	bne.w	8001de0 <HAL_GPIO_Init+0x10>
  }
}
 80020b2:	bf00      	nop
 80020b4:	bf00      	nop
 80020b6:	371c      	adds	r7, #28
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40010000 	.word	0x40010000
 80020c8:	48000400 	.word	0x48000400
 80020cc:	48000800 	.word	0x48000800
 80020d0:	48000c00 	.word	0x48000c00
 80020d4:	48001000 	.word	0x48001000
 80020d8:	48001400 	.word	0x48001400
 80020dc:	48001800 	.word	0x48001800
 80020e0:	40010400 	.word	0x40010400

080020e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691a      	ldr	r2, [r3, #16]
 80020f4:	887b      	ldrh	r3, [r7, #2]
 80020f6:	4013      	ands	r3, r2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d002      	beq.n	8002102 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020fc:	2301      	movs	r3, #1
 80020fe:	73fb      	strb	r3, [r7, #15]
 8002100:	e001      	b.n	8002106 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002102:	2300      	movs	r3, #0
 8002104:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002106:	7bfb      	ldrb	r3, [r7, #15]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800211a:	af00      	add	r7, sp, #0
 800211c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002120:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002124:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002126:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800212a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d102      	bne.n	800213a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	f001 b83a 	b.w	80031ae <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800213a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800213e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 816f 	beq.w	800242e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002150:	4bb5      	ldr	r3, [pc, #724]	; (8002428 <HAL_RCC_OscConfig+0x314>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 030c 	and.w	r3, r3, #12
 8002158:	2b04      	cmp	r3, #4
 800215a:	d00c      	beq.n	8002176 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800215c:	4bb2      	ldr	r3, [pc, #712]	; (8002428 <HAL_RCC_OscConfig+0x314>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 030c 	and.w	r3, r3, #12
 8002164:	2b08      	cmp	r3, #8
 8002166:	d15c      	bne.n	8002222 <HAL_RCC_OscConfig+0x10e>
 8002168:	4baf      	ldr	r3, [pc, #700]	; (8002428 <HAL_RCC_OscConfig+0x314>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002174:	d155      	bne.n	8002222 <HAL_RCC_OscConfig+0x10e>
 8002176:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800217a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002182:	fa93 f3a3 	rbit	r3, r3
 8002186:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800218a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800218e:	fab3 f383 	clz	r3, r3
 8002192:	b2db      	uxtb	r3, r3
 8002194:	095b      	lsrs	r3, r3, #5
 8002196:	b2db      	uxtb	r3, r3
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d102      	bne.n	80021a8 <HAL_RCC_OscConfig+0x94>
 80021a2:	4ba1      	ldr	r3, [pc, #644]	; (8002428 <HAL_RCC_OscConfig+0x314>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	e015      	b.n	80021d4 <HAL_RCC_OscConfig+0xc0>
 80021a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021ac:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80021b4:	fa93 f3a3 	rbit	r3, r3
 80021b8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80021bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021c0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80021c4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80021c8:	fa93 f3a3 	rbit	r3, r3
 80021cc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80021d0:	4b95      	ldr	r3, [pc, #596]	; (8002428 <HAL_RCC_OscConfig+0x314>)
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021d8:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80021dc:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80021e0:	fa92 f2a2 	rbit	r2, r2
 80021e4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80021e8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80021ec:	fab2 f282 	clz	r2, r2
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	f042 0220 	orr.w	r2, r2, #32
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	f002 021f 	and.w	r2, r2, #31
 80021fc:	2101      	movs	r1, #1
 80021fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002202:	4013      	ands	r3, r2
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 8111 	beq.w	800242c <HAL_RCC_OscConfig+0x318>
 800220a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800220e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	f040 8108 	bne.w	800242c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	f000 bfc6 	b.w	80031ae <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002222:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002226:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002232:	d106      	bne.n	8002242 <HAL_RCC_OscConfig+0x12e>
 8002234:	4b7c      	ldr	r3, [pc, #496]	; (8002428 <HAL_RCC_OscConfig+0x314>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a7b      	ldr	r2, [pc, #492]	; (8002428 <HAL_RCC_OscConfig+0x314>)
 800223a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	e036      	b.n	80022b0 <HAL_RCC_OscConfig+0x19c>
 8002242:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002246:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10c      	bne.n	800226c <HAL_RCC_OscConfig+0x158>
 8002252:	4b75      	ldr	r3, [pc, #468]	; (8002428 <HAL_RCC_OscConfig+0x314>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a74      	ldr	r2, [pc, #464]	; (8002428 <HAL_RCC_OscConfig+0x314>)
 8002258:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800225c:	6013      	str	r3, [r2, #0]
 800225e:	4b72      	ldr	r3, [pc, #456]	; (8002428 <HAL_RCC_OscConfig+0x314>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a71      	ldr	r2, [pc, #452]	; (8002428 <HAL_RCC_OscConfig+0x314>)
 8002264:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	e021      	b.n	80022b0 <HAL_RCC_OscConfig+0x19c>
 800226c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002270:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800227c:	d10c      	bne.n	8002298 <HAL_RCC_OscConfig+0x184>
 800227e:	4b6a      	ldr	r3, [pc, #424]	; (8002428 <HAL_RCC_OscConfig+0x314>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a69      	ldr	r2, [pc, #420]	; (8002428 <HAL_RCC_OscConfig+0x314>)
 8002284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	4b67      	ldr	r3, [pc, #412]	; (8002428 <HAL_RCC_OscConfig+0x314>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a66      	ldr	r2, [pc, #408]	; (8002428 <HAL_RCC_OscConfig+0x314>)
 8002290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	e00b      	b.n	80022b0 <HAL_RCC_OscConfig+0x19c>
 8002298:	4b63      	ldr	r3, [pc, #396]	; (8002428 <HAL_RCC_OscConfig+0x314>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a62      	ldr	r2, [pc, #392]	; (8002428 <HAL_RCC_OscConfig+0x314>)
 800229e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	4b60      	ldr	r3, [pc, #384]	; (8002428 <HAL_RCC_OscConfig+0x314>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a5f      	ldr	r2, [pc, #380]	; (8002428 <HAL_RCC_OscConfig+0x314>)
 80022aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ae:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d059      	beq.n	8002374 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c0:	f7fe fb5a 	bl	8000978 <HAL_GetTick>
 80022c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c8:	e00a      	b.n	80022e0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022ca:	f7fe fb55 	bl	8000978 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b64      	cmp	r3, #100	; 0x64
 80022d8:	d902      	bls.n	80022e0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	f000 bf67 	b.w	80031ae <HAL_RCC_OscConfig+0x109a>
 80022e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022e4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80022ec:	fa93 f3a3 	rbit	r3, r3
 80022f0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80022f4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f8:	fab3 f383 	clz	r3, r3
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	095b      	lsrs	r3, r3, #5
 8002300:	b2db      	uxtb	r3, r3
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b01      	cmp	r3, #1
 800230a:	d102      	bne.n	8002312 <HAL_RCC_OscConfig+0x1fe>
 800230c:	4b46      	ldr	r3, [pc, #280]	; (8002428 <HAL_RCC_OscConfig+0x314>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	e015      	b.n	800233e <HAL_RCC_OscConfig+0x22a>
 8002312:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002316:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800231e:	fa93 f3a3 	rbit	r3, r3
 8002322:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002326:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800232a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800232e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002332:	fa93 f3a3 	rbit	r3, r3
 8002336:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800233a:	4b3b      	ldr	r3, [pc, #236]	; (8002428 <HAL_RCC_OscConfig+0x314>)
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002342:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002346:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800234a:	fa92 f2a2 	rbit	r2, r2
 800234e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002352:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002356:	fab2 f282 	clz	r2, r2
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	f042 0220 	orr.w	r2, r2, #32
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	f002 021f 	and.w	r2, r2, #31
 8002366:	2101      	movs	r1, #1
 8002368:	fa01 f202 	lsl.w	r2, r1, r2
 800236c:	4013      	ands	r3, r2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0ab      	beq.n	80022ca <HAL_RCC_OscConfig+0x1b6>
 8002372:	e05c      	b.n	800242e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002374:	f7fe fb00 	bl	8000978 <HAL_GetTick>
 8002378:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800237c:	e00a      	b.n	8002394 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800237e:	f7fe fafb 	bl	8000978 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b64      	cmp	r3, #100	; 0x64
 800238c:	d902      	bls.n	8002394 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	f000 bf0d 	b.w	80031ae <HAL_RCC_OscConfig+0x109a>
 8002394:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002398:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80023a0:	fa93 f3a3 	rbit	r3, r3
 80023a4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80023a8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ac:	fab3 f383 	clz	r3, r3
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	095b      	lsrs	r3, r3, #5
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	f043 0301 	orr.w	r3, r3, #1
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d102      	bne.n	80023c6 <HAL_RCC_OscConfig+0x2b2>
 80023c0:	4b19      	ldr	r3, [pc, #100]	; (8002428 <HAL_RCC_OscConfig+0x314>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	e015      	b.n	80023f2 <HAL_RCC_OscConfig+0x2de>
 80023c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023ca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80023d2:	fa93 f3a3 	rbit	r3, r3
 80023d6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80023da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023de:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80023e2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80023e6:	fa93 f3a3 	rbit	r3, r3
 80023ea:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80023ee:	4b0e      	ldr	r3, [pc, #56]	; (8002428 <HAL_RCC_OscConfig+0x314>)
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023f6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80023fa:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80023fe:	fa92 f2a2 	rbit	r2, r2
 8002402:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002406:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800240a:	fab2 f282 	clz	r2, r2
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	f042 0220 	orr.w	r2, r2, #32
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	f002 021f 	and.w	r2, r2, #31
 800241a:	2101      	movs	r1, #1
 800241c:	fa01 f202 	lsl.w	r2, r1, r2
 8002420:	4013      	ands	r3, r2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1ab      	bne.n	800237e <HAL_RCC_OscConfig+0x26a>
 8002426:	e002      	b.n	800242e <HAL_RCC_OscConfig+0x31a>
 8002428:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800242c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800242e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002432:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 817f 	beq.w	8002742 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002444:	4ba7      	ldr	r3, [pc, #668]	; (80026e4 <HAL_RCC_OscConfig+0x5d0>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 030c 	and.w	r3, r3, #12
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00c      	beq.n	800246a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002450:	4ba4      	ldr	r3, [pc, #656]	; (80026e4 <HAL_RCC_OscConfig+0x5d0>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 030c 	and.w	r3, r3, #12
 8002458:	2b08      	cmp	r3, #8
 800245a:	d173      	bne.n	8002544 <HAL_RCC_OscConfig+0x430>
 800245c:	4ba1      	ldr	r3, [pc, #644]	; (80026e4 <HAL_RCC_OscConfig+0x5d0>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002468:	d16c      	bne.n	8002544 <HAL_RCC_OscConfig+0x430>
 800246a:	2302      	movs	r3, #2
 800246c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002470:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002474:	fa93 f3a3 	rbit	r3, r3
 8002478:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800247c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002480:	fab3 f383 	clz	r3, r3
 8002484:	b2db      	uxtb	r3, r3
 8002486:	095b      	lsrs	r3, r3, #5
 8002488:	b2db      	uxtb	r3, r3
 800248a:	f043 0301 	orr.w	r3, r3, #1
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b01      	cmp	r3, #1
 8002492:	d102      	bne.n	800249a <HAL_RCC_OscConfig+0x386>
 8002494:	4b93      	ldr	r3, [pc, #588]	; (80026e4 <HAL_RCC_OscConfig+0x5d0>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	e013      	b.n	80024c2 <HAL_RCC_OscConfig+0x3ae>
 800249a:	2302      	movs	r3, #2
 800249c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80024a4:	fa93 f3a3 	rbit	r3, r3
 80024a8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80024ac:	2302      	movs	r3, #2
 80024ae:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80024b2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80024b6:	fa93 f3a3 	rbit	r3, r3
 80024ba:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80024be:	4b89      	ldr	r3, [pc, #548]	; (80026e4 <HAL_RCC_OscConfig+0x5d0>)
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	2202      	movs	r2, #2
 80024c4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80024c8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80024cc:	fa92 f2a2 	rbit	r2, r2
 80024d0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80024d4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80024d8:	fab2 f282 	clz	r2, r2
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	f042 0220 	orr.w	r2, r2, #32
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	f002 021f 	and.w	r2, r2, #31
 80024e8:	2101      	movs	r1, #1
 80024ea:	fa01 f202 	lsl.w	r2, r1, r2
 80024ee:	4013      	ands	r3, r2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00a      	beq.n	800250a <HAL_RCC_OscConfig+0x3f6>
 80024f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d002      	beq.n	800250a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	f000 be52 	b.w	80031ae <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800250a:	4b76      	ldr	r3, [pc, #472]	; (80026e4 <HAL_RCC_OscConfig+0x5d0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002512:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002516:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	21f8      	movs	r1, #248	; 0xf8
 8002520:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002524:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002528:	fa91 f1a1 	rbit	r1, r1
 800252c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002530:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002534:	fab1 f181 	clz	r1, r1
 8002538:	b2c9      	uxtb	r1, r1
 800253a:	408b      	lsls	r3, r1
 800253c:	4969      	ldr	r1, [pc, #420]	; (80026e4 <HAL_RCC_OscConfig+0x5d0>)
 800253e:	4313      	orrs	r3, r2
 8002540:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002542:	e0fe      	b.n	8002742 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002544:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002548:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 8088 	beq.w	8002666 <HAL_RCC_OscConfig+0x552>
 8002556:	2301      	movs	r3, #1
 8002558:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002560:	fa93 f3a3 	rbit	r3, r3
 8002564:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002568:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800256c:	fab3 f383 	clz	r3, r3
 8002570:	b2db      	uxtb	r3, r3
 8002572:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002576:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	461a      	mov	r2, r3
 800257e:	2301      	movs	r3, #1
 8002580:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002582:	f7fe f9f9 	bl	8000978 <HAL_GetTick>
 8002586:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800258a:	e00a      	b.n	80025a2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800258c:	f7fe f9f4 	bl	8000978 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d902      	bls.n	80025a2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	f000 be06 	b.w	80031ae <HAL_RCC_OscConfig+0x109a>
 80025a2:	2302      	movs	r3, #2
 80025a4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80025ac:	fa93 f3a3 	rbit	r3, r3
 80025b0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80025b4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b8:	fab3 f383 	clz	r3, r3
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	095b      	lsrs	r3, r3, #5
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	f043 0301 	orr.w	r3, r3, #1
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d102      	bne.n	80025d2 <HAL_RCC_OscConfig+0x4be>
 80025cc:	4b45      	ldr	r3, [pc, #276]	; (80026e4 <HAL_RCC_OscConfig+0x5d0>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	e013      	b.n	80025fa <HAL_RCC_OscConfig+0x4e6>
 80025d2:	2302      	movs	r3, #2
 80025d4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80025dc:	fa93 f3a3 	rbit	r3, r3
 80025e0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80025e4:	2302      	movs	r3, #2
 80025e6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80025ea:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80025ee:	fa93 f3a3 	rbit	r3, r3
 80025f2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80025f6:	4b3b      	ldr	r3, [pc, #236]	; (80026e4 <HAL_RCC_OscConfig+0x5d0>)
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	2202      	movs	r2, #2
 80025fc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002600:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002604:	fa92 f2a2 	rbit	r2, r2
 8002608:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800260c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002610:	fab2 f282 	clz	r2, r2
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	f042 0220 	orr.w	r2, r2, #32
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	f002 021f 	and.w	r2, r2, #31
 8002620:	2101      	movs	r1, #1
 8002622:	fa01 f202 	lsl.w	r2, r1, r2
 8002626:	4013      	ands	r3, r2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0af      	beq.n	800258c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800262c:	4b2d      	ldr	r3, [pc, #180]	; (80026e4 <HAL_RCC_OscConfig+0x5d0>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002634:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002638:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	21f8      	movs	r1, #248	; 0xf8
 8002642:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002646:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800264a:	fa91 f1a1 	rbit	r1, r1
 800264e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002652:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002656:	fab1 f181 	clz	r1, r1
 800265a:	b2c9      	uxtb	r1, r1
 800265c:	408b      	lsls	r3, r1
 800265e:	4921      	ldr	r1, [pc, #132]	; (80026e4 <HAL_RCC_OscConfig+0x5d0>)
 8002660:	4313      	orrs	r3, r2
 8002662:	600b      	str	r3, [r1, #0]
 8002664:	e06d      	b.n	8002742 <HAL_RCC_OscConfig+0x62e>
 8002666:	2301      	movs	r3, #1
 8002668:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002670:	fa93 f3a3 	rbit	r3, r3
 8002674:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002678:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800267c:	fab3 f383 	clz	r3, r3
 8002680:	b2db      	uxtb	r3, r3
 8002682:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002686:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	461a      	mov	r2, r3
 800268e:	2300      	movs	r3, #0
 8002690:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002692:	f7fe f971 	bl	8000978 <HAL_GetTick>
 8002696:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269a:	e00a      	b.n	80026b2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800269c:	f7fe f96c 	bl	8000978 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d902      	bls.n	80026b2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	f000 bd7e 	b.w	80031ae <HAL_RCC_OscConfig+0x109a>
 80026b2:	2302      	movs	r3, #2
 80026b4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80026bc:	fa93 f3a3 	rbit	r3, r3
 80026c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80026c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026c8:	fab3 f383 	clz	r3, r3
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	095b      	lsrs	r3, r3, #5
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	f043 0301 	orr.w	r3, r3, #1
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d105      	bne.n	80026e8 <HAL_RCC_OscConfig+0x5d4>
 80026dc:	4b01      	ldr	r3, [pc, #4]	; (80026e4 <HAL_RCC_OscConfig+0x5d0>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	e016      	b.n	8002710 <HAL_RCC_OscConfig+0x5fc>
 80026e2:	bf00      	nop
 80026e4:	40021000 	.word	0x40021000
 80026e8:	2302      	movs	r3, #2
 80026ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80026f2:	fa93 f3a3 	rbit	r3, r3
 80026f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80026fa:	2302      	movs	r3, #2
 80026fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002700:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002704:	fa93 f3a3 	rbit	r3, r3
 8002708:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800270c:	4bbf      	ldr	r3, [pc, #764]	; (8002a0c <HAL_RCC_OscConfig+0x8f8>)
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	2202      	movs	r2, #2
 8002712:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002716:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800271a:	fa92 f2a2 	rbit	r2, r2
 800271e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002722:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002726:	fab2 f282 	clz	r2, r2
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	f042 0220 	orr.w	r2, r2, #32
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	f002 021f 	and.w	r2, r2, #31
 8002736:	2101      	movs	r1, #1
 8002738:	fa01 f202 	lsl.w	r2, r1, r2
 800273c:	4013      	ands	r3, r2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1ac      	bne.n	800269c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002742:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002746:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0308 	and.w	r3, r3, #8
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 8113 	beq.w	800297e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002758:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800275c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d07c      	beq.n	8002862 <HAL_RCC_OscConfig+0x74e>
 8002768:	2301      	movs	r3, #1
 800276a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002772:	fa93 f3a3 	rbit	r3, r3
 8002776:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800277a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800277e:	fab3 f383 	clz	r3, r3
 8002782:	b2db      	uxtb	r3, r3
 8002784:	461a      	mov	r2, r3
 8002786:	4ba2      	ldr	r3, [pc, #648]	; (8002a10 <HAL_RCC_OscConfig+0x8fc>)
 8002788:	4413      	add	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	461a      	mov	r2, r3
 800278e:	2301      	movs	r3, #1
 8002790:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002792:	f7fe f8f1 	bl	8000978 <HAL_GetTick>
 8002796:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800279a:	e00a      	b.n	80027b2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800279c:	f7fe f8ec 	bl	8000978 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d902      	bls.n	80027b2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	f000 bcfe 	b.w	80031ae <HAL_RCC_OscConfig+0x109a>
 80027b2:	2302      	movs	r3, #2
 80027b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027bc:	fa93 f2a3 	rbit	r2, r3
 80027c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027c4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80027d2:	2202      	movs	r2, #2
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	fa93 f2a3 	rbit	r2, r3
 80027e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80027f6:	2202      	movs	r2, #2
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	fa93 f2a3 	rbit	r2, r3
 8002808:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800280c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002810:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002812:	4b7e      	ldr	r3, [pc, #504]	; (8002a0c <HAL_RCC_OscConfig+0x8f8>)
 8002814:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002816:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800281a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800281e:	2102      	movs	r1, #2
 8002820:	6019      	str	r1, [r3, #0]
 8002822:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002826:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	fa93 f1a3 	rbit	r1, r3
 8002830:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002834:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002838:	6019      	str	r1, [r3, #0]
  return result;
 800283a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800283e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	fab3 f383 	clz	r3, r3
 8002848:	b2db      	uxtb	r3, r3
 800284a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800284e:	b2db      	uxtb	r3, r3
 8002850:	f003 031f 	and.w	r3, r3, #31
 8002854:	2101      	movs	r1, #1
 8002856:	fa01 f303 	lsl.w	r3, r1, r3
 800285a:	4013      	ands	r3, r2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d09d      	beq.n	800279c <HAL_RCC_OscConfig+0x688>
 8002860:	e08d      	b.n	800297e <HAL_RCC_OscConfig+0x86a>
 8002862:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002866:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800286a:	2201      	movs	r2, #1
 800286c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002872:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	fa93 f2a3 	rbit	r2, r3
 800287c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002880:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002884:	601a      	str	r2, [r3, #0]
  return result;
 8002886:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800288a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800288e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002890:	fab3 f383 	clz	r3, r3
 8002894:	b2db      	uxtb	r3, r3
 8002896:	461a      	mov	r2, r3
 8002898:	4b5d      	ldr	r3, [pc, #372]	; (8002a10 <HAL_RCC_OscConfig+0x8fc>)
 800289a:	4413      	add	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	461a      	mov	r2, r3
 80028a0:	2300      	movs	r3, #0
 80028a2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a4:	f7fe f868 	bl	8000978 <HAL_GetTick>
 80028a8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ac:	e00a      	b.n	80028c4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ae:	f7fe f863 	bl	8000978 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d902      	bls.n	80028c4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	f000 bc75 	b.w	80031ae <HAL_RCC_OscConfig+0x109a>
 80028c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028c8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80028cc:	2202      	movs	r2, #2
 80028ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028d4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	fa93 f2a3 	rbit	r2, r3
 80028de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028e2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80028f0:	2202      	movs	r2, #2
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	fa93 f2a3 	rbit	r2, r3
 8002902:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002906:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002910:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002914:	2202      	movs	r2, #2
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800291c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	fa93 f2a3 	rbit	r2, r3
 8002926:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800292a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800292e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002930:	4b36      	ldr	r3, [pc, #216]	; (8002a0c <HAL_RCC_OscConfig+0x8f8>)
 8002932:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002934:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002938:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800293c:	2102      	movs	r1, #2
 800293e:	6019      	str	r1, [r3, #0]
 8002940:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002944:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	fa93 f1a3 	rbit	r1, r3
 800294e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002952:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002956:	6019      	str	r1, [r3, #0]
  return result;
 8002958:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800295c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	fab3 f383 	clz	r3, r3
 8002966:	b2db      	uxtb	r3, r3
 8002968:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800296c:	b2db      	uxtb	r3, r3
 800296e:	f003 031f 	and.w	r3, r3, #31
 8002972:	2101      	movs	r1, #1
 8002974:	fa01 f303 	lsl.w	r3, r1, r3
 8002978:	4013      	ands	r3, r2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d197      	bne.n	80028ae <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800297e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002982:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0304 	and.w	r3, r3, #4
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 81a5 	beq.w	8002cde <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002994:	2300      	movs	r3, #0
 8002996:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800299a:	4b1c      	ldr	r3, [pc, #112]	; (8002a0c <HAL_RCC_OscConfig+0x8f8>)
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d116      	bne.n	80029d4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029a6:	4b19      	ldr	r3, [pc, #100]	; (8002a0c <HAL_RCC_OscConfig+0x8f8>)
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	4a18      	ldr	r2, [pc, #96]	; (8002a0c <HAL_RCC_OscConfig+0x8f8>)
 80029ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b0:	61d3      	str	r3, [r2, #28]
 80029b2:	4b16      	ldr	r3, [pc, #88]	; (8002a0c <HAL_RCC_OscConfig+0x8f8>)
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80029ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029cc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80029ce:	2301      	movs	r3, #1
 80029d0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d4:	4b0f      	ldr	r3, [pc, #60]	; (8002a14 <HAL_RCC_OscConfig+0x900>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d121      	bne.n	8002a24 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029e0:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <HAL_RCC_OscConfig+0x900>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a0b      	ldr	r2, [pc, #44]	; (8002a14 <HAL_RCC_OscConfig+0x900>)
 80029e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ea:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ec:	f7fd ffc4 	bl	8000978 <HAL_GetTick>
 80029f0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f4:	e010      	b.n	8002a18 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f6:	f7fd ffbf 	bl	8000978 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b64      	cmp	r3, #100	; 0x64
 8002a04:	d908      	bls.n	8002a18 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e3d1      	b.n	80031ae <HAL_RCC_OscConfig+0x109a>
 8002a0a:	bf00      	nop
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	10908120 	.word	0x10908120
 8002a14:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a18:	4b8d      	ldr	r3, [pc, #564]	; (8002c50 <HAL_RCC_OscConfig+0xb3c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0e8      	beq.n	80029f6 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a28:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d106      	bne.n	8002a42 <HAL_RCC_OscConfig+0x92e>
 8002a34:	4b87      	ldr	r3, [pc, #540]	; (8002c54 <HAL_RCC_OscConfig+0xb40>)
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	4a86      	ldr	r2, [pc, #536]	; (8002c54 <HAL_RCC_OscConfig+0xb40>)
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	6213      	str	r3, [r2, #32]
 8002a40:	e035      	b.n	8002aae <HAL_RCC_OscConfig+0x99a>
 8002a42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a46:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10c      	bne.n	8002a6c <HAL_RCC_OscConfig+0x958>
 8002a52:	4b80      	ldr	r3, [pc, #512]	; (8002c54 <HAL_RCC_OscConfig+0xb40>)
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	4a7f      	ldr	r2, [pc, #508]	; (8002c54 <HAL_RCC_OscConfig+0xb40>)
 8002a58:	f023 0301 	bic.w	r3, r3, #1
 8002a5c:	6213      	str	r3, [r2, #32]
 8002a5e:	4b7d      	ldr	r3, [pc, #500]	; (8002c54 <HAL_RCC_OscConfig+0xb40>)
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	4a7c      	ldr	r2, [pc, #496]	; (8002c54 <HAL_RCC_OscConfig+0xb40>)
 8002a64:	f023 0304 	bic.w	r3, r3, #4
 8002a68:	6213      	str	r3, [r2, #32]
 8002a6a:	e020      	b.n	8002aae <HAL_RCC_OscConfig+0x99a>
 8002a6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a70:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	2b05      	cmp	r3, #5
 8002a7a:	d10c      	bne.n	8002a96 <HAL_RCC_OscConfig+0x982>
 8002a7c:	4b75      	ldr	r3, [pc, #468]	; (8002c54 <HAL_RCC_OscConfig+0xb40>)
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	4a74      	ldr	r2, [pc, #464]	; (8002c54 <HAL_RCC_OscConfig+0xb40>)
 8002a82:	f043 0304 	orr.w	r3, r3, #4
 8002a86:	6213      	str	r3, [r2, #32]
 8002a88:	4b72      	ldr	r3, [pc, #456]	; (8002c54 <HAL_RCC_OscConfig+0xb40>)
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	4a71      	ldr	r2, [pc, #452]	; (8002c54 <HAL_RCC_OscConfig+0xb40>)
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	6213      	str	r3, [r2, #32]
 8002a94:	e00b      	b.n	8002aae <HAL_RCC_OscConfig+0x99a>
 8002a96:	4b6f      	ldr	r3, [pc, #444]	; (8002c54 <HAL_RCC_OscConfig+0xb40>)
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	4a6e      	ldr	r2, [pc, #440]	; (8002c54 <HAL_RCC_OscConfig+0xb40>)
 8002a9c:	f023 0301 	bic.w	r3, r3, #1
 8002aa0:	6213      	str	r3, [r2, #32]
 8002aa2:	4b6c      	ldr	r3, [pc, #432]	; (8002c54 <HAL_RCC_OscConfig+0xb40>)
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	4a6b      	ldr	r2, [pc, #428]	; (8002c54 <HAL_RCC_OscConfig+0xb40>)
 8002aa8:	f023 0304 	bic.w	r3, r3, #4
 8002aac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ab2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f000 8081 	beq.w	8002bc2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac0:	f7fd ff5a 	bl	8000978 <HAL_GetTick>
 8002ac4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac8:	e00b      	b.n	8002ae2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aca:	f7fd ff55 	bl	8000978 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e365      	b.n	80031ae <HAL_RCC_OscConfig+0x109a>
 8002ae2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ae6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002aea:	2202      	movs	r2, #2
 8002aec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002af2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	fa93 f2a3 	rbit	r2, r3
 8002afc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b00:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b0a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002b0e:	2202      	movs	r2, #2
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b16:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	fa93 f2a3 	rbit	r2, r3
 8002b20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b24:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002b28:	601a      	str	r2, [r3, #0]
  return result;
 8002b2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b2e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002b32:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b34:	fab3 f383 	clz	r3, r3
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	095b      	lsrs	r3, r3, #5
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	f043 0302 	orr.w	r3, r3, #2
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d102      	bne.n	8002b4e <HAL_RCC_OscConfig+0xa3a>
 8002b48:	4b42      	ldr	r3, [pc, #264]	; (8002c54 <HAL_RCC_OscConfig+0xb40>)
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	e013      	b.n	8002b76 <HAL_RCC_OscConfig+0xa62>
 8002b4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b52:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002b56:	2202      	movs	r2, #2
 8002b58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b5e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	fa93 f2a3 	rbit	r2, r3
 8002b68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b6c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	4b38      	ldr	r3, [pc, #224]	; (8002c54 <HAL_RCC_OscConfig+0xb40>)
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b7a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002b7e:	2102      	movs	r1, #2
 8002b80:	6011      	str	r1, [r2, #0]
 8002b82:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b86:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002b8a:	6812      	ldr	r2, [r2, #0]
 8002b8c:	fa92 f1a2 	rbit	r1, r2
 8002b90:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b94:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002b98:	6011      	str	r1, [r2, #0]
  return result;
 8002b9a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b9e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002ba2:	6812      	ldr	r2, [r2, #0]
 8002ba4:	fab2 f282 	clz	r2, r2
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	f002 021f 	and.w	r2, r2, #31
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bba:	4013      	ands	r3, r2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d084      	beq.n	8002aca <HAL_RCC_OscConfig+0x9b6>
 8002bc0:	e083      	b.n	8002cca <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc2:	f7fd fed9 	bl	8000978 <HAL_GetTick>
 8002bc6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bca:	e00b      	b.n	8002be4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bcc:	f7fd fed4 	bl	8000978 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e2e4      	b.n	80031ae <HAL_RCC_OscConfig+0x109a>
 8002be4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002be8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002bec:	2202      	movs	r2, #2
 8002bee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bf4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	fa93 f2a3 	rbit	r2, r3
 8002bfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c02:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c0c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002c10:	2202      	movs	r2, #2
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c18:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	fa93 f2a3 	rbit	r2, r3
 8002c22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c26:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002c2a:	601a      	str	r2, [r3, #0]
  return result;
 8002c2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c30:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002c34:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c36:	fab3 f383 	clz	r3, r3
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	095b      	lsrs	r3, r3, #5
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	f043 0302 	orr.w	r3, r3, #2
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d106      	bne.n	8002c58 <HAL_RCC_OscConfig+0xb44>
 8002c4a:	4b02      	ldr	r3, [pc, #8]	; (8002c54 <HAL_RCC_OscConfig+0xb40>)
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	e017      	b.n	8002c80 <HAL_RCC_OscConfig+0xb6c>
 8002c50:	40007000 	.word	0x40007000
 8002c54:	40021000 	.word	0x40021000
 8002c58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c5c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002c60:	2202      	movs	r2, #2
 8002c62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c68:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	fa93 f2a3 	rbit	r2, r3
 8002c72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c76:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	4bb3      	ldr	r3, [pc, #716]	; (8002f4c <HAL_RCC_OscConfig+0xe38>)
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c84:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002c88:	2102      	movs	r1, #2
 8002c8a:	6011      	str	r1, [r2, #0]
 8002c8c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c90:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002c94:	6812      	ldr	r2, [r2, #0]
 8002c96:	fa92 f1a2 	rbit	r1, r2
 8002c9a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c9e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002ca2:	6011      	str	r1, [r2, #0]
  return result;
 8002ca4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ca8:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002cac:	6812      	ldr	r2, [r2, #0]
 8002cae:	fab2 f282 	clz	r2, r2
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	f002 021f 	and.w	r2, r2, #31
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d180      	bne.n	8002bcc <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cca:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d105      	bne.n	8002cde <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cd2:	4b9e      	ldr	r3, [pc, #632]	; (8002f4c <HAL_RCC_OscConfig+0xe38>)
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	4a9d      	ldr	r2, [pc, #628]	; (8002f4c <HAL_RCC_OscConfig+0xe38>)
 8002cd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cdc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ce2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 825e 	beq.w	80031ac <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cf0:	4b96      	ldr	r3, [pc, #600]	; (8002f4c <HAL_RCC_OscConfig+0xe38>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 030c 	and.w	r3, r3, #12
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	f000 821f 	beq.w	800313c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d02:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	f040 8170 	bne.w	8002ff0 <HAL_RCC_OscConfig+0xedc>
 8002d10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d14:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002d18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d22:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	fa93 f2a3 	rbit	r2, r3
 8002d2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d30:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002d34:	601a      	str	r2, [r3, #0]
  return result;
 8002d36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d3a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002d3e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d40:	fab3 f383 	clz	r3, r3
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d4a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	461a      	mov	r2, r3
 8002d52:	2300      	movs	r3, #0
 8002d54:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d56:	f7fd fe0f 	bl	8000978 <HAL_GetTick>
 8002d5a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d5e:	e009      	b.n	8002d74 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d60:	f7fd fe0a 	bl	8000978 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e21c      	b.n	80031ae <HAL_RCC_OscConfig+0x109a>
 8002d74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d78:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002d7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d86:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	fa93 f2a3 	rbit	r2, r3
 8002d90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d94:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002d98:	601a      	str	r2, [r3, #0]
  return result;
 8002d9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d9e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002da2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002da4:	fab3 f383 	clz	r3, r3
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	095b      	lsrs	r3, r3, #5
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	f043 0301 	orr.w	r3, r3, #1
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d102      	bne.n	8002dbe <HAL_RCC_OscConfig+0xcaa>
 8002db8:	4b64      	ldr	r3, [pc, #400]	; (8002f4c <HAL_RCC_OscConfig+0xe38>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	e027      	b.n	8002e0e <HAL_RCC_OscConfig+0xcfa>
 8002dbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dc2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002dc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dd0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	fa93 f2a3 	rbit	r2, r3
 8002dda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dde:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002de8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002dec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002df6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	fa93 f2a3 	rbit	r2, r3
 8002e00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e04:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	4b50      	ldr	r3, [pc, #320]	; (8002f4c <HAL_RCC_OscConfig+0xe38>)
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e12:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002e16:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e1a:	6011      	str	r1, [r2, #0]
 8002e1c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e20:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002e24:	6812      	ldr	r2, [r2, #0]
 8002e26:	fa92 f1a2 	rbit	r1, r2
 8002e2a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e2e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002e32:	6011      	str	r1, [r2, #0]
  return result;
 8002e34:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e38:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002e3c:	6812      	ldr	r2, [r2, #0]
 8002e3e:	fab2 f282 	clz	r2, r2
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	f042 0220 	orr.w	r2, r2, #32
 8002e48:	b2d2      	uxtb	r2, r2
 8002e4a:	f002 021f 	and.w	r2, r2, #31
 8002e4e:	2101      	movs	r1, #1
 8002e50:	fa01 f202 	lsl.w	r2, r1, r2
 8002e54:	4013      	ands	r3, r2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d182      	bne.n	8002d60 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e5a:	4b3c      	ldr	r3, [pc, #240]	; (8002f4c <HAL_RCC_OscConfig+0xe38>)
 8002e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5e:	f023 020f 	bic.w	r2, r3, #15
 8002e62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e66:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	4937      	ldr	r1, [pc, #220]	; (8002f4c <HAL_RCC_OscConfig+0xe38>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002e74:	4b35      	ldr	r3, [pc, #212]	; (8002f4c <HAL_RCC_OscConfig+0xe38>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002e7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e80:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6a19      	ldr	r1, [r3, #32]
 8002e88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e8c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	430b      	orrs	r3, r1
 8002e96:	492d      	ldr	r1, [pc, #180]	; (8002f4c <HAL_RCC_OscConfig+0xe38>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	604b      	str	r3, [r1, #4]
 8002e9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ea0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002ea4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ea8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eaa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eae:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	fa93 f2a3 	rbit	r2, r3
 8002eb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ebc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002ec0:	601a      	str	r2, [r3, #0]
  return result;
 8002ec2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ec6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002eca:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ecc:	fab3 f383 	clz	r3, r3
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ed6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	461a      	mov	r2, r3
 8002ede:	2301      	movs	r3, #1
 8002ee0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee2:	f7fd fd49 	bl	8000978 <HAL_GetTick>
 8002ee6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eea:	e009      	b.n	8002f00 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eec:	f7fd fd44 	bl	8000978 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e156      	b.n	80031ae <HAL_RCC_OscConfig+0x109a>
 8002f00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f04:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002f08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f12:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	fa93 f2a3 	rbit	r2, r3
 8002f1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f20:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002f24:	601a      	str	r2, [r3, #0]
  return result;
 8002f26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f2a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002f2e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f30:	fab3 f383 	clz	r3, r3
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	095b      	lsrs	r3, r3, #5
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	f043 0301 	orr.w	r3, r3, #1
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d105      	bne.n	8002f50 <HAL_RCC_OscConfig+0xe3c>
 8002f44:	4b01      	ldr	r3, [pc, #4]	; (8002f4c <HAL_RCC_OscConfig+0xe38>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	e02a      	b.n	8002fa0 <HAL_RCC_OscConfig+0xe8c>
 8002f4a:	bf00      	nop
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f54:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002f58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f62:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	fa93 f2a3 	rbit	r2, r3
 8002f6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f70:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f7a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002f7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f88:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	fa93 f2a3 	rbit	r2, r3
 8002f92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f96:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	4b86      	ldr	r3, [pc, #536]	; (80031b8 <HAL_RCC_OscConfig+0x10a4>)
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002fa4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002fa8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002fac:	6011      	str	r1, [r2, #0]
 8002fae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002fb2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002fb6:	6812      	ldr	r2, [r2, #0]
 8002fb8:	fa92 f1a2 	rbit	r1, r2
 8002fbc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002fc0:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002fc4:	6011      	str	r1, [r2, #0]
  return result;
 8002fc6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002fca:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	fab2 f282 	clz	r2, r2
 8002fd4:	b2d2      	uxtb	r2, r2
 8002fd6:	f042 0220 	orr.w	r2, r2, #32
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	f002 021f 	and.w	r2, r2, #31
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f43f af7f 	beq.w	8002eec <HAL_RCC_OscConfig+0xdd8>
 8002fee:	e0dd      	b.n	80031ac <HAL_RCC_OscConfig+0x1098>
 8002ff0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ff4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002ff8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ffc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003002:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	fa93 f2a3 	rbit	r2, r3
 800300c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003010:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003014:	601a      	str	r2, [r3, #0]
  return result;
 8003016:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800301a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800301e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003020:	fab3 f383 	clz	r3, r3
 8003024:	b2db      	uxtb	r3, r3
 8003026:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800302a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	461a      	mov	r2, r3
 8003032:	2300      	movs	r3, #0
 8003034:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003036:	f7fd fc9f 	bl	8000978 <HAL_GetTick>
 800303a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800303e:	e009      	b.n	8003054 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003040:	f7fd fc9a 	bl	8000978 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e0ac      	b.n	80031ae <HAL_RCC_OscConfig+0x109a>
 8003054:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003058:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800305c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003060:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003062:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003066:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	fa93 f2a3 	rbit	r2, r3
 8003070:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003074:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003078:	601a      	str	r2, [r3, #0]
  return result;
 800307a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800307e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003082:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003084:	fab3 f383 	clz	r3, r3
 8003088:	b2db      	uxtb	r3, r3
 800308a:	095b      	lsrs	r3, r3, #5
 800308c:	b2db      	uxtb	r3, r3
 800308e:	f043 0301 	orr.w	r3, r3, #1
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b01      	cmp	r3, #1
 8003096:	d102      	bne.n	800309e <HAL_RCC_OscConfig+0xf8a>
 8003098:	4b47      	ldr	r3, [pc, #284]	; (80031b8 <HAL_RCC_OscConfig+0x10a4>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	e027      	b.n	80030ee <HAL_RCC_OscConfig+0xfda>
 800309e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030a2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80030a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030b0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	fa93 f2a3 	rbit	r2, r3
 80030ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030be:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030c8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80030cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030d6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	fa93 f2a3 	rbit	r2, r3
 80030e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030e4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	4b33      	ldr	r3, [pc, #204]	; (80031b8 <HAL_RCC_OscConfig+0x10a4>)
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80030f2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80030f6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030fa:	6011      	str	r1, [r2, #0]
 80030fc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003100:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003104:	6812      	ldr	r2, [r2, #0]
 8003106:	fa92 f1a2 	rbit	r1, r2
 800310a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800310e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003112:	6011      	str	r1, [r2, #0]
  return result;
 8003114:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003118:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800311c:	6812      	ldr	r2, [r2, #0]
 800311e:	fab2 f282 	clz	r2, r2
 8003122:	b2d2      	uxtb	r2, r2
 8003124:	f042 0220 	orr.w	r2, r2, #32
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	f002 021f 	and.w	r2, r2, #31
 800312e:	2101      	movs	r1, #1
 8003130:	fa01 f202 	lsl.w	r2, r1, r2
 8003134:	4013      	ands	r3, r2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d182      	bne.n	8003040 <HAL_RCC_OscConfig+0xf2c>
 800313a:	e037      	b.n	80031ac <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800313c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003140:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d101      	bne.n	8003150 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e02e      	b.n	80031ae <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003150:	4b19      	ldr	r3, [pc, #100]	; (80031b8 <HAL_RCC_OscConfig+0x10a4>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003158:	4b17      	ldr	r3, [pc, #92]	; (80031b8 <HAL_RCC_OscConfig+0x10a4>)
 800315a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003160:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003164:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003168:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800316c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	69db      	ldr	r3, [r3, #28]
 8003174:	429a      	cmp	r2, r3
 8003176:	d117      	bne.n	80031a8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003178:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800317c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003180:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003184:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800318c:	429a      	cmp	r2, r3
 800318e:	d10b      	bne.n	80031a8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003190:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003194:	f003 020f 	and.w	r2, r3, #15
 8003198:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800319c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d001      	beq.n	80031ac <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e000      	b.n	80031ae <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40021000 	.word	0x40021000

080031bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b09e      	sub	sp, #120	; 0x78
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d101      	bne.n	80031d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e162      	b.n	800349a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031d4:	4b90      	ldr	r3, [pc, #576]	; (8003418 <HAL_RCC_ClockConfig+0x25c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d910      	bls.n	8003204 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e2:	4b8d      	ldr	r3, [pc, #564]	; (8003418 <HAL_RCC_ClockConfig+0x25c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f023 0207 	bic.w	r2, r3, #7
 80031ea:	498b      	ldr	r1, [pc, #556]	; (8003418 <HAL_RCC_ClockConfig+0x25c>)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f2:	4b89      	ldr	r3, [pc, #548]	; (8003418 <HAL_RCC_ClockConfig+0x25c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d001      	beq.n	8003204 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e14a      	b.n	800349a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d008      	beq.n	8003222 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003210:	4b82      	ldr	r3, [pc, #520]	; (800341c <HAL_RCC_ClockConfig+0x260>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	497f      	ldr	r1, [pc, #508]	; (800341c <HAL_RCC_ClockConfig+0x260>)
 800321e:	4313      	orrs	r3, r2
 8003220:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 80dc 	beq.w	80033e8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d13c      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xf6>
 8003238:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800323c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003240:	fa93 f3a3 	rbit	r3, r3
 8003244:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003248:	fab3 f383 	clz	r3, r3
 800324c:	b2db      	uxtb	r3, r3
 800324e:	095b      	lsrs	r3, r3, #5
 8003250:	b2db      	uxtb	r3, r3
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b01      	cmp	r3, #1
 800325a:	d102      	bne.n	8003262 <HAL_RCC_ClockConfig+0xa6>
 800325c:	4b6f      	ldr	r3, [pc, #444]	; (800341c <HAL_RCC_ClockConfig+0x260>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	e00f      	b.n	8003282 <HAL_RCC_ClockConfig+0xc6>
 8003262:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003266:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003268:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800326a:	fa93 f3a3 	rbit	r3, r3
 800326e:	667b      	str	r3, [r7, #100]	; 0x64
 8003270:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003274:	663b      	str	r3, [r7, #96]	; 0x60
 8003276:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003278:	fa93 f3a3 	rbit	r3, r3
 800327c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800327e:	4b67      	ldr	r3, [pc, #412]	; (800341c <HAL_RCC_ClockConfig+0x260>)
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003286:	65ba      	str	r2, [r7, #88]	; 0x58
 8003288:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800328a:	fa92 f2a2 	rbit	r2, r2
 800328e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003290:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003292:	fab2 f282 	clz	r2, r2
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	f042 0220 	orr.w	r2, r2, #32
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	f002 021f 	and.w	r2, r2, #31
 80032a2:	2101      	movs	r1, #1
 80032a4:	fa01 f202 	lsl.w	r2, r1, r2
 80032a8:	4013      	ands	r3, r2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d17b      	bne.n	80033a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e0f3      	b.n	800349a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d13c      	bne.n	8003334 <HAL_RCC_ClockConfig+0x178>
 80032ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032c2:	fa93 f3a3 	rbit	r3, r3
 80032c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80032c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ca:	fab3 f383 	clz	r3, r3
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	095b      	lsrs	r3, r3, #5
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d102      	bne.n	80032e4 <HAL_RCC_ClockConfig+0x128>
 80032de:	4b4f      	ldr	r3, [pc, #316]	; (800341c <HAL_RCC_ClockConfig+0x260>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	e00f      	b.n	8003304 <HAL_RCC_ClockConfig+0x148>
 80032e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ec:	fa93 f3a3 	rbit	r3, r3
 80032f0:	647b      	str	r3, [r7, #68]	; 0x44
 80032f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032f6:	643b      	str	r3, [r7, #64]	; 0x40
 80032f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032fa:	fa93 f3a3 	rbit	r3, r3
 80032fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003300:	4b46      	ldr	r3, [pc, #280]	; (800341c <HAL_RCC_ClockConfig+0x260>)
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003308:	63ba      	str	r2, [r7, #56]	; 0x38
 800330a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800330c:	fa92 f2a2 	rbit	r2, r2
 8003310:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003312:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003314:	fab2 f282 	clz	r2, r2
 8003318:	b2d2      	uxtb	r2, r2
 800331a:	f042 0220 	orr.w	r2, r2, #32
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	f002 021f 	and.w	r2, r2, #31
 8003324:	2101      	movs	r1, #1
 8003326:	fa01 f202 	lsl.w	r2, r1, r2
 800332a:	4013      	ands	r3, r2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d13a      	bne.n	80033a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e0b2      	b.n	800349a <HAL_RCC_ClockConfig+0x2de>
 8003334:	2302      	movs	r3, #2
 8003336:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333a:	fa93 f3a3 	rbit	r3, r3
 800333e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003342:	fab3 f383 	clz	r3, r3
 8003346:	b2db      	uxtb	r3, r3
 8003348:	095b      	lsrs	r3, r3, #5
 800334a:	b2db      	uxtb	r3, r3
 800334c:	f043 0301 	orr.w	r3, r3, #1
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b01      	cmp	r3, #1
 8003354:	d102      	bne.n	800335c <HAL_RCC_ClockConfig+0x1a0>
 8003356:	4b31      	ldr	r3, [pc, #196]	; (800341c <HAL_RCC_ClockConfig+0x260>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	e00d      	b.n	8003378 <HAL_RCC_ClockConfig+0x1bc>
 800335c:	2302      	movs	r3, #2
 800335e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003362:	fa93 f3a3 	rbit	r3, r3
 8003366:	627b      	str	r3, [r7, #36]	; 0x24
 8003368:	2302      	movs	r3, #2
 800336a:	623b      	str	r3, [r7, #32]
 800336c:	6a3b      	ldr	r3, [r7, #32]
 800336e:	fa93 f3a3 	rbit	r3, r3
 8003372:	61fb      	str	r3, [r7, #28]
 8003374:	4b29      	ldr	r3, [pc, #164]	; (800341c <HAL_RCC_ClockConfig+0x260>)
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	2202      	movs	r2, #2
 800337a:	61ba      	str	r2, [r7, #24]
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	fa92 f2a2 	rbit	r2, r2
 8003382:	617a      	str	r2, [r7, #20]
  return result;
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	fab2 f282 	clz	r2, r2
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	f042 0220 	orr.w	r2, r2, #32
 8003390:	b2d2      	uxtb	r2, r2
 8003392:	f002 021f 	and.w	r2, r2, #31
 8003396:	2101      	movs	r1, #1
 8003398:	fa01 f202 	lsl.w	r2, r1, r2
 800339c:	4013      	ands	r3, r2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e079      	b.n	800349a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033a6:	4b1d      	ldr	r3, [pc, #116]	; (800341c <HAL_RCC_ClockConfig+0x260>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f023 0203 	bic.w	r2, r3, #3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	491a      	ldr	r1, [pc, #104]	; (800341c <HAL_RCC_ClockConfig+0x260>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033b8:	f7fd fade 	bl	8000978 <HAL_GetTick>
 80033bc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033be:	e00a      	b.n	80033d6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c0:	f7fd fada 	bl	8000978 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e061      	b.n	800349a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d6:	4b11      	ldr	r3, [pc, #68]	; (800341c <HAL_RCC_ClockConfig+0x260>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f003 020c 	and.w	r2, r3, #12
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d1eb      	bne.n	80033c0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033e8:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <HAL_RCC_ClockConfig+0x25c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d214      	bcs.n	8003420 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f6:	4b08      	ldr	r3, [pc, #32]	; (8003418 <HAL_RCC_ClockConfig+0x25c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f023 0207 	bic.w	r2, r3, #7
 80033fe:	4906      	ldr	r1, [pc, #24]	; (8003418 <HAL_RCC_ClockConfig+0x25c>)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	4313      	orrs	r3, r2
 8003404:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003406:	4b04      	ldr	r3, [pc, #16]	; (8003418 <HAL_RCC_ClockConfig+0x25c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	d005      	beq.n	8003420 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e040      	b.n	800349a <HAL_RCC_ClockConfig+0x2de>
 8003418:	40022000 	.word	0x40022000
 800341c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	2b00      	cmp	r3, #0
 800342a:	d008      	beq.n	800343e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800342c:	4b1d      	ldr	r3, [pc, #116]	; (80034a4 <HAL_RCC_ClockConfig+0x2e8>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	491a      	ldr	r1, [pc, #104]	; (80034a4 <HAL_RCC_ClockConfig+0x2e8>)
 800343a:	4313      	orrs	r3, r2
 800343c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0308 	and.w	r3, r3, #8
 8003446:	2b00      	cmp	r3, #0
 8003448:	d009      	beq.n	800345e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800344a:	4b16      	ldr	r3, [pc, #88]	; (80034a4 <HAL_RCC_ClockConfig+0x2e8>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	4912      	ldr	r1, [pc, #72]	; (80034a4 <HAL_RCC_ClockConfig+0x2e8>)
 800345a:	4313      	orrs	r3, r2
 800345c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800345e:	f000 f829 	bl	80034b4 <HAL_RCC_GetSysClockFreq>
 8003462:	4601      	mov	r1, r0
 8003464:	4b0f      	ldr	r3, [pc, #60]	; (80034a4 <HAL_RCC_ClockConfig+0x2e8>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800346c:	22f0      	movs	r2, #240	; 0xf0
 800346e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	fa92 f2a2 	rbit	r2, r2
 8003476:	60fa      	str	r2, [r7, #12]
  return result;
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	fab2 f282 	clz	r2, r2
 800347e:	b2d2      	uxtb	r2, r2
 8003480:	40d3      	lsrs	r3, r2
 8003482:	4a09      	ldr	r2, [pc, #36]	; (80034a8 <HAL_RCC_ClockConfig+0x2ec>)
 8003484:	5cd3      	ldrb	r3, [r2, r3]
 8003486:	fa21 f303 	lsr.w	r3, r1, r3
 800348a:	4a08      	ldr	r2, [pc, #32]	; (80034ac <HAL_RCC_ClockConfig+0x2f0>)
 800348c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800348e:	4b08      	ldr	r3, [pc, #32]	; (80034b0 <HAL_RCC_ClockConfig+0x2f4>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4618      	mov	r0, r3
 8003494:	f7fd fa2c 	bl	80008f0 <HAL_InitTick>
  
  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3778      	adds	r7, #120	; 0x78
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	40021000 	.word	0x40021000
 80034a8:	08003a50 	.word	0x08003a50
 80034ac:	20000000 	.word	0x20000000
 80034b0:	20000004 	.word	0x20000004

080034b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b08b      	sub	sp, #44	; 0x2c
 80034b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	61fb      	str	r3, [r7, #28]
 80034be:	2300      	movs	r3, #0
 80034c0:	61bb      	str	r3, [r7, #24]
 80034c2:	2300      	movs	r3, #0
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80034ca:	2300      	movs	r3, #0
 80034cc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80034ce:	4b2a      	ldr	r3, [pc, #168]	; (8003578 <HAL_RCC_GetSysClockFreq+0xc4>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	f003 030c 	and.w	r3, r3, #12
 80034da:	2b04      	cmp	r3, #4
 80034dc:	d002      	beq.n	80034e4 <HAL_RCC_GetSysClockFreq+0x30>
 80034de:	2b08      	cmp	r3, #8
 80034e0:	d003      	beq.n	80034ea <HAL_RCC_GetSysClockFreq+0x36>
 80034e2:	e03f      	b.n	8003564 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034e4:	4b25      	ldr	r3, [pc, #148]	; (800357c <HAL_RCC_GetSysClockFreq+0xc8>)
 80034e6:	623b      	str	r3, [r7, #32]
      break;
 80034e8:	e03f      	b.n	800356a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80034f0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80034f4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	fa92 f2a2 	rbit	r2, r2
 80034fc:	607a      	str	r2, [r7, #4]
  return result;
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	fab2 f282 	clz	r2, r2
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	40d3      	lsrs	r3, r2
 8003508:	4a1d      	ldr	r2, [pc, #116]	; (8003580 <HAL_RCC_GetSysClockFreq+0xcc>)
 800350a:	5cd3      	ldrb	r3, [r2, r3]
 800350c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800350e:	4b1a      	ldr	r3, [pc, #104]	; (8003578 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	220f      	movs	r2, #15
 8003518:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	fa92 f2a2 	rbit	r2, r2
 8003520:	60fa      	str	r2, [r7, #12]
  return result;
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	fab2 f282 	clz	r2, r2
 8003528:	b2d2      	uxtb	r2, r2
 800352a:	40d3      	lsrs	r3, r2
 800352c:	4a15      	ldr	r2, [pc, #84]	; (8003584 <HAL_RCC_GetSysClockFreq+0xd0>)
 800352e:	5cd3      	ldrb	r3, [r2, r3]
 8003530:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d008      	beq.n	800354e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800353c:	4a0f      	ldr	r2, [pc, #60]	; (800357c <HAL_RCC_GetSysClockFreq+0xc8>)
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	fbb2 f2f3 	udiv	r2, r2, r3
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	fb02 f303 	mul.w	r3, r2, r3
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
 800354c:	e007      	b.n	800355e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800354e:	4a0b      	ldr	r2, [pc, #44]	; (800357c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	fbb2 f2f3 	udiv	r2, r2, r3
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	fb02 f303 	mul.w	r3, r2, r3
 800355c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	623b      	str	r3, [r7, #32]
      break;
 8003562:	e002      	b.n	800356a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003564:	4b05      	ldr	r3, [pc, #20]	; (800357c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003566:	623b      	str	r3, [r7, #32]
      break;
 8003568:	bf00      	nop
    }
  }
  return sysclockfreq;
 800356a:	6a3b      	ldr	r3, [r7, #32]
}
 800356c:	4618      	mov	r0, r3
 800356e:	372c      	adds	r7, #44	; 0x2c
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	40021000 	.word	0x40021000
 800357c:	007a1200 	.word	0x007a1200
 8003580:	08003a60 	.word	0x08003a60
 8003584:	08003a70 	.word	0x08003a70

08003588 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b092      	sub	sp, #72	; 0x48
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003590:	2300      	movs	r3, #0
 8003592:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003598:	2300      	movs	r3, #0
 800359a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 80d4 	beq.w	8003754 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ac:	4b4e      	ldr	r3, [pc, #312]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10e      	bne.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035b8:	4b4b      	ldr	r3, [pc, #300]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	4a4a      	ldr	r2, [pc, #296]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c2:	61d3      	str	r3, [r2, #28]
 80035c4:	4b48      	ldr	r3, [pc, #288]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c6:	69db      	ldr	r3, [r3, #28]
 80035c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035cc:	60bb      	str	r3, [r7, #8]
 80035ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035d0:	2301      	movs	r3, #1
 80035d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d6:	4b45      	ldr	r3, [pc, #276]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d118      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035e2:	4b42      	ldr	r3, [pc, #264]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a41      	ldr	r2, [pc, #260]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ee:	f7fd f9c3 	bl	8000978 <HAL_GetTick>
 80035f2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f4:	e008      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f6:	f7fd f9bf 	bl	8000978 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b64      	cmp	r3, #100	; 0x64
 8003602:	d901      	bls.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e1d6      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003608:	4b38      	ldr	r3, [pc, #224]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0f0      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003614:	4b34      	ldr	r3, [pc, #208]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800361c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800361e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 8084 	beq.w	800372e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800362e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003630:	429a      	cmp	r2, r3
 8003632:	d07c      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003634:	4b2c      	ldr	r3, [pc, #176]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800363c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800363e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003642:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003646:	fa93 f3a3 	rbit	r3, r3
 800364a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800364c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800364e:	fab3 f383 	clz	r3, r3
 8003652:	b2db      	uxtb	r3, r3
 8003654:	461a      	mov	r2, r3
 8003656:	4b26      	ldr	r3, [pc, #152]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003658:	4413      	add	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	461a      	mov	r2, r3
 800365e:	2301      	movs	r3, #1
 8003660:	6013      	str	r3, [r2, #0]
 8003662:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003666:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366a:	fa93 f3a3 	rbit	r3, r3
 800366e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003672:	fab3 f383 	clz	r3, r3
 8003676:	b2db      	uxtb	r3, r3
 8003678:	461a      	mov	r2, r3
 800367a:	4b1d      	ldr	r3, [pc, #116]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	461a      	mov	r2, r3
 8003682:	2300      	movs	r3, #0
 8003684:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003686:	4a18      	ldr	r2, [pc, #96]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800368a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800368c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d04b      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003696:	f7fd f96f 	bl	8000978 <HAL_GetTick>
 800369a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369c:	e00a      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800369e:	f7fd f96b 	bl	8000978 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e180      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80036b4:	2302      	movs	r3, #2
 80036b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ba:	fa93 f3a3 	rbit	r3, r3
 80036be:	627b      	str	r3, [r7, #36]	; 0x24
 80036c0:	2302      	movs	r3, #2
 80036c2:	623b      	str	r3, [r7, #32]
 80036c4:	6a3b      	ldr	r3, [r7, #32]
 80036c6:	fa93 f3a3 	rbit	r3, r3
 80036ca:	61fb      	str	r3, [r7, #28]
  return result;
 80036cc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ce:	fab3 f383 	clz	r3, r3
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	095b      	lsrs	r3, r3, #5
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	f043 0302 	orr.w	r3, r3, #2
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d108      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80036e2:	4b01      	ldr	r3, [pc, #4]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	e00d      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80036e8:	40021000 	.word	0x40021000
 80036ec:	40007000 	.word	0x40007000
 80036f0:	10908100 	.word	0x10908100
 80036f4:	2302      	movs	r3, #2
 80036f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	fa93 f3a3 	rbit	r3, r3
 80036fe:	617b      	str	r3, [r7, #20]
 8003700:	4b9a      	ldr	r3, [pc, #616]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	2202      	movs	r2, #2
 8003706:	613a      	str	r2, [r7, #16]
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	fa92 f2a2 	rbit	r2, r2
 800370e:	60fa      	str	r2, [r7, #12]
  return result;
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	fab2 f282 	clz	r2, r2
 8003716:	b2d2      	uxtb	r2, r2
 8003718:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800371c:	b2d2      	uxtb	r2, r2
 800371e:	f002 021f 	and.w	r2, r2, #31
 8003722:	2101      	movs	r1, #1
 8003724:	fa01 f202 	lsl.w	r2, r1, r2
 8003728:	4013      	ands	r3, r2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0b7      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800372e:	4b8f      	ldr	r3, [pc, #572]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	498c      	ldr	r1, [pc, #560]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800373c:	4313      	orrs	r3, r2
 800373e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003740:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003744:	2b01      	cmp	r3, #1
 8003746:	d105      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003748:	4b88      	ldr	r3, [pc, #544]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	4a87      	ldr	r2, [pc, #540]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800374e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003752:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b00      	cmp	r3, #0
 800375e:	d008      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003760:	4b82      	ldr	r3, [pc, #520]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003764:	f023 0203 	bic.w	r2, r3, #3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	497f      	ldr	r1, [pc, #508]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800376e:	4313      	orrs	r3, r2
 8003770:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d008      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800377e:	4b7b      	ldr	r3, [pc, #492]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	4978      	ldr	r1, [pc, #480]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800378c:	4313      	orrs	r3, r2
 800378e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b00      	cmp	r3, #0
 800379a:	d008      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800379c:	4b73      	ldr	r3, [pc, #460]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800379e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	4970      	ldr	r1, [pc, #448]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0320 	and.w	r3, r3, #32
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d008      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037ba:	4b6c      	ldr	r3, [pc, #432]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	f023 0210 	bic.w	r2, r3, #16
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	4969      	ldr	r1, [pc, #420]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d008      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80037d8:	4b64      	ldr	r3, [pc, #400]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e4:	4961      	ldr	r1, [pc, #388]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d008      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037f6:	4b5d      	ldr	r3, [pc, #372]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	f023 0220 	bic.w	r2, r3, #32
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	495a      	ldr	r1, [pc, #360]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003804:	4313      	orrs	r3, r2
 8003806:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d008      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003814:	4b55      	ldr	r3, [pc, #340]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003818:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	4952      	ldr	r1, [pc, #328]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003822:	4313      	orrs	r3, r2
 8003824:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b00      	cmp	r3, #0
 8003830:	d008      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003832:	4b4e      	ldr	r3, [pc, #312]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	494b      	ldr	r1, [pc, #300]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003840:	4313      	orrs	r3, r2
 8003842:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0310 	and.w	r3, r3, #16
 800384c:	2b00      	cmp	r3, #0
 800384e:	d008      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003850:	4b46      	ldr	r3, [pc, #280]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003854:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	4943      	ldr	r1, [pc, #268]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800385e:	4313      	orrs	r3, r2
 8003860:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800386a:	2b00      	cmp	r3, #0
 800386c:	d008      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800386e:	4b3f      	ldr	r3, [pc, #252]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	493c      	ldr	r1, [pc, #240]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800387c:	4313      	orrs	r3, r2
 800387e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003888:	2b00      	cmp	r3, #0
 800388a:	d008      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800388c:	4b37      	ldr	r3, [pc, #220]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003898:	4934      	ldr	r1, [pc, #208]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800389a:	4313      	orrs	r3, r2
 800389c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d008      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80038aa:	4b30      	ldr	r3, [pc, #192]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ae:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b6:	492d      	ldr	r1, [pc, #180]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d008      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80038c8:	4b28      	ldr	r3, [pc, #160]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d4:	4925      	ldr	r1, [pc, #148]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d008      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80038e6:	4b21      	ldr	r3, [pc, #132]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	491e      	ldr	r1, [pc, #120]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d008      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003904:	4b19      	ldr	r3, [pc, #100]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003908:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003910:	4916      	ldr	r1, [pc, #88]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003912:	4313      	orrs	r3, r2
 8003914:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d008      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003922:	4b12      	ldr	r3, [pc, #72]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392e:	490f      	ldr	r1, [pc, #60]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003930:	4313      	orrs	r3, r2
 8003932:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d008      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003940:	4b0a      	ldr	r3, [pc, #40]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003944:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394c:	4907      	ldr	r1, [pc, #28]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800394e:	4313      	orrs	r3, r2
 8003950:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00c      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800395e:	4b03      	ldr	r3, [pc, #12]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	e002      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800396a:	bf00      	nop
 800396c:	40021000 	.word	0x40021000
 8003970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003972:	4913      	ldr	r1, [pc, #76]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003974:	4313      	orrs	r3, r2
 8003976:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d008      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003984:	4b0e      	ldr	r3, [pc, #56]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003988:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003990:	490b      	ldr	r1, [pc, #44]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003992:	4313      	orrs	r3, r2
 8003994:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d008      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80039a2:	4b07      	ldr	r3, [pc, #28]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ae:	4904      	ldr	r1, [pc, #16]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3748      	adds	r7, #72	; 0x48
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	40021000 	.word	0x40021000

080039c4 <__libc_init_array>:
 80039c4:	b570      	push	{r4, r5, r6, lr}
 80039c6:	4d0d      	ldr	r5, [pc, #52]	; (80039fc <__libc_init_array+0x38>)
 80039c8:	4c0d      	ldr	r4, [pc, #52]	; (8003a00 <__libc_init_array+0x3c>)
 80039ca:	1b64      	subs	r4, r4, r5
 80039cc:	10a4      	asrs	r4, r4, #2
 80039ce:	2600      	movs	r6, #0
 80039d0:	42a6      	cmp	r6, r4
 80039d2:	d109      	bne.n	80039e8 <__libc_init_array+0x24>
 80039d4:	4d0b      	ldr	r5, [pc, #44]	; (8003a04 <__libc_init_array+0x40>)
 80039d6:	4c0c      	ldr	r4, [pc, #48]	; (8003a08 <__libc_init_array+0x44>)
 80039d8:	f000 f82e 	bl	8003a38 <_init>
 80039dc:	1b64      	subs	r4, r4, r5
 80039de:	10a4      	asrs	r4, r4, #2
 80039e0:	2600      	movs	r6, #0
 80039e2:	42a6      	cmp	r6, r4
 80039e4:	d105      	bne.n	80039f2 <__libc_init_array+0x2e>
 80039e6:	bd70      	pop	{r4, r5, r6, pc}
 80039e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ec:	4798      	blx	r3
 80039ee:	3601      	adds	r6, #1
 80039f0:	e7ee      	b.n	80039d0 <__libc_init_array+0xc>
 80039f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80039f6:	4798      	blx	r3
 80039f8:	3601      	adds	r6, #1
 80039fa:	e7f2      	b.n	80039e2 <__libc_init_array+0x1e>
 80039fc:	08003a80 	.word	0x08003a80
 8003a00:	08003a80 	.word	0x08003a80
 8003a04:	08003a80 	.word	0x08003a80
 8003a08:	08003a84 	.word	0x08003a84

08003a0c <memcpy>:
 8003a0c:	440a      	add	r2, r1
 8003a0e:	4291      	cmp	r1, r2
 8003a10:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a14:	d100      	bne.n	8003a18 <memcpy+0xc>
 8003a16:	4770      	bx	lr
 8003a18:	b510      	push	{r4, lr}
 8003a1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a22:	4291      	cmp	r1, r2
 8003a24:	d1f9      	bne.n	8003a1a <memcpy+0xe>
 8003a26:	bd10      	pop	{r4, pc}

08003a28 <memset>:
 8003a28:	4402      	add	r2, r0
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d100      	bne.n	8003a32 <memset+0xa>
 8003a30:	4770      	bx	lr
 8003a32:	f803 1b01 	strb.w	r1, [r3], #1
 8003a36:	e7f9      	b.n	8003a2c <memset+0x4>

08003a38 <_init>:
 8003a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a3a:	bf00      	nop
 8003a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a3e:	bc08      	pop	{r3}
 8003a40:	469e      	mov	lr, r3
 8003a42:	4770      	bx	lr

08003a44 <_fini>:
 8003a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a46:	bf00      	nop
 8003a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a4a:	bc08      	pop	{r3}
 8003a4c:	469e      	mov	lr, r3
 8003a4e:	4770      	bx	lr
