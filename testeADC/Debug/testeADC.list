
testeADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036a0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003834  08003834  00013834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003864  08003864  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003864  08003864  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003864  08003864  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003864  08003864  00013864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003868  08003868  00013868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800386c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000a0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000ac  200000ac  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007d24  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001644  00000000  00000000  00027d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005f8  00000000  00000000  000293a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000540  00000000  00000000  000299a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f633  00000000  00000000  00029ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008fbe  00000000  00000000  00049513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4203  00000000  00000000  000524d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001166d4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001660  00000000  00000000  00116724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800381c 	.word	0x0800381c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800381c 	.word	0x0800381c

080001d4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001d8:	f000 fa74 	bl	80006c4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80001dc:	f000 f82c 	bl	8000238 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001e0:	f000 f8f8 	bl	80003d4 <MX_GPIO_Init>
	MX_ADC1_Init();
 80001e4:	f000 f886 	bl	80002f4 <MX_ADC1_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1 && button_status == 0) {
 80001e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ec:	480f      	ldr	r0, [pc, #60]	; (800022c <main+0x58>)
 80001ee:	f001 fe79 	bl	8001ee4 <HAL_GPIO_ReadPin>
 80001f2:	4603      	mov	r3, r0
 80001f4:	2b01      	cmp	r3, #1
 80001f6:	d109      	bne.n	800020c <main+0x38>
 80001f8:	4b0d      	ldr	r3, [pc, #52]	; (8000230 <main+0x5c>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d105      	bne.n	800020c <main+0x38>
			button_status = 1;
 8000200:	4b0b      	ldr	r3, [pc, #44]	; (8000230 <main+0x5c>)
 8000202:	2201      	movs	r2, #1
 8000204:	601a      	str	r2, [r3, #0]
			teste_ADC(&hadc1);
 8000206:	480b      	ldr	r0, [pc, #44]	; (8000234 <main+0x60>)
 8000208:	f000 f9e4 	bl	80005d4 <teste_ADC>
		}
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0 && button_status == 1) {
 800020c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000210:	4806      	ldr	r0, [pc, #24]	; (800022c <main+0x58>)
 8000212:	f001 fe67 	bl	8001ee4 <HAL_GPIO_ReadPin>
 8000216:	4603      	mov	r3, r0
 8000218:	2b00      	cmp	r3, #0
 800021a:	d1e5      	bne.n	80001e8 <main+0x14>
 800021c:	4b04      	ldr	r3, [pc, #16]	; (8000230 <main+0x5c>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	2b01      	cmp	r3, #1
 8000222:	d1e1      	bne.n	80001e8 <main+0x14>
			button_status = 0;
 8000224:	4b02      	ldr	r3, [pc, #8]	; (8000230 <main+0x5c>)
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1 && button_status == 0) {
 800022a:	e7dd      	b.n	80001e8 <main+0x14>
 800022c:	48000800 	.word	0x48000800
 8000230:	20000078 	.word	0x20000078
 8000234:	20000028 	.word	0x20000028

08000238 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000238:	b580      	push	{r7, lr}
 800023a:	b0a6      	sub	sp, #152	; 0x98
 800023c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800023e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000242:	2228      	movs	r2, #40	; 0x28
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f003 fae0 	bl	800380c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800024c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	609a      	str	r2, [r3, #8]
 8000258:	60da      	str	r2, [r3, #12]
 800025a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2258      	movs	r2, #88	; 0x58
 8000260:	2100      	movs	r1, #0
 8000262:	4618      	mov	r0, r3
 8000264:	f003 fad2 	bl	800380c <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000268:	2302      	movs	r3, #2
 800026a:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026c:	2301      	movs	r3, #1
 800026e:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000270:	2310      	movs	r3, #16
 8000272:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000276:	2302      	movs	r3, #2
 8000278:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800027c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000280:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000284:	2300      	movs	r3, #0
 8000286:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000290:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000294:	4618      	mov	r0, r3
 8000296:	f001 fe3d 	bl	8001f14 <HAL_RCC_OscConfig>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <SystemClock_Config+0x6c>
		Error_Handler();
 80002a0:	f000 f8d0 	bl	8000444 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80002a4:	230f      	movs	r3, #15
 80002a6:	65fb      	str	r3, [r7, #92]	; 0x5c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002a8:	2300      	movs	r3, #0
 80002aa:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	66fb      	str	r3, [r7, #108]	; 0x6c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80002b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002bc:	2100      	movs	r1, #0
 80002be:	4618      	mov	r0, r3
 80002c0:	f002 fe7c 	bl	8002fbc <HAL_RCC_ClockConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x96>
		Error_Handler();
 80002ca:	f000 f8bb 	bl	8000444 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80002ce:	2380      	movs	r3, #128	; 0x80
 80002d0:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80002d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	4618      	mov	r0, r3
 80002dc:	f003 f854 	bl	8003388 <HAL_RCCEx_PeriphCLKConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0xb2>
		Error_Handler();
 80002e6:	f000 f8ad 	bl	8000444 <Error_Handler>
	}
}
 80002ea:	bf00      	nop
 80002ec:	3798      	adds	r7, #152	; 0x98
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
	...

080002f4 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b08a      	sub	sp, #40	; 0x28
 80002f8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 80002fa:	f107 031c 	add.w	r3, r7, #28
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	605a      	str	r2, [r3, #4]
 8000304:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	2200      	movs	r2, #0
 800030a:	601a      	str	r2, [r3, #0]
 800030c:	605a      	str	r2, [r3, #4]
 800030e:	609a      	str	r2, [r3, #8]
 8000310:	60da      	str	r2, [r3, #12]
 8000312:	611a      	str	r2, [r3, #16]
 8000314:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000316:	4b2e      	ldr	r3, [pc, #184]	; (80003d0 <MX_ADC1_Init+0xdc>)
 8000318:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800031c:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800031e:	4b2c      	ldr	r3, [pc, #176]	; (80003d0 <MX_ADC1_Init+0xdc>)
 8000320:	2200      	movs	r2, #0
 8000322:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000324:	4b2a      	ldr	r3, [pc, #168]	; (80003d0 <MX_ADC1_Init+0xdc>)
 8000326:	2200      	movs	r2, #0
 8000328:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800032a:	4b29      	ldr	r3, [pc, #164]	; (80003d0 <MX_ADC1_Init+0xdc>)
 800032c:	2200      	movs	r2, #0
 800032e:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000330:	4b27      	ldr	r3, [pc, #156]	; (80003d0 <MX_ADC1_Init+0xdc>)
 8000332:	2200      	movs	r2, #0
 8000334:	765a      	strb	r2, [r3, #25]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000336:	4b26      	ldr	r3, [pc, #152]	; (80003d0 <MX_ADC1_Init+0xdc>)
 8000338:	2200      	movs	r2, #0
 800033a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800033e:	4b24      	ldr	r3, [pc, #144]	; (80003d0 <MX_ADC1_Init+0xdc>)
 8000340:	2200      	movs	r2, #0
 8000342:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000344:	4b22      	ldr	r3, [pc, #136]	; (80003d0 <MX_ADC1_Init+0xdc>)
 8000346:	2201      	movs	r2, #1
 8000348:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800034a:	4b21      	ldr	r3, [pc, #132]	; (80003d0 <MX_ADC1_Init+0xdc>)
 800034c:	2200      	movs	r2, #0
 800034e:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000350:	4b1f      	ldr	r3, [pc, #124]	; (80003d0 <MX_ADC1_Init+0xdc>)
 8000352:	2201      	movs	r2, #1
 8000354:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000356:	4b1e      	ldr	r3, [pc, #120]	; (80003d0 <MX_ADC1_Init+0xdc>)
 8000358:	2200      	movs	r2, #0
 800035a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800035e:	4b1c      	ldr	r3, [pc, #112]	; (80003d0 <MX_ADC1_Init+0xdc>)
 8000360:	2204      	movs	r2, #4
 8000362:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000364:	4b1a      	ldr	r3, [pc, #104]	; (80003d0 <MX_ADC1_Init+0xdc>)
 8000366:	2200      	movs	r2, #0
 8000368:	761a      	strb	r2, [r3, #24]
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800036a:	4b19      	ldr	r3, [pc, #100]	; (80003d0 <MX_ADC1_Init+0xdc>)
 800036c:	2200      	movs	r2, #0
 800036e:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000370:	4817      	ldr	r0, [pc, #92]	; (80003d0 <MX_ADC1_Init+0xdc>)
 8000372:	f000 fa0d 	bl	8000790 <HAL_ADC_Init>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_ADC1_Init+0x8c>
		Error_Handler();
 800037c:	f000 f862 	bl	8000444 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8000380:	2300      	movs	r3, #0
 8000382:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8000384:	f107 031c 	add.w	r3, r7, #28
 8000388:	4619      	mov	r1, r3
 800038a:	4811      	ldr	r0, [pc, #68]	; (80003d0 <MX_ADC1_Init+0xdc>)
 800038c:	f001 f97e 	bl	800168c <HAL_ADCEx_MultiModeConfigChannel>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_ADC1_Init+0xa6>
		Error_Handler();
 8000396:	f000 f855 	bl	8000444 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 800039a:	2301      	movs	r3, #1
 800039c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800039e:	2301      	movs	r3, #1
 80003a0:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003a2:	2300      	movs	r3, #0
 80003a4:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003a6:	2300      	movs	r3, #0
 80003a8:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003aa:	2300      	movs	r3, #0
 80003ac:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 80003ae:	2300      	movs	r3, #0
 80003b0:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	4619      	mov	r1, r3
 80003b6:	4806      	ldr	r0, [pc, #24]	; (80003d0 <MX_ADC1_Init+0xdc>)
 80003b8:	f000 fe7c 	bl	80010b4 <HAL_ADC_ConfigChannel>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_ADC1_Init+0xd2>
		Error_Handler();
 80003c2:	f000 f83f 	bl	8000444 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80003c6:	bf00      	nop
 80003c8:	3728      	adds	r7, #40	; 0x28
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	20000028 	.word	0x20000028

080003d4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b088      	sub	sp, #32
 80003d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80003da:	f107 030c 	add.w	r3, r7, #12
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]
 80003e4:	609a      	str	r2, [r3, #8]
 80003e6:	60da      	str	r2, [r3, #12]
 80003e8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80003ea:	4b14      	ldr	r3, [pc, #80]	; (800043c <MX_GPIO_Init+0x68>)
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	4a13      	ldr	r2, [pc, #76]	; (800043c <MX_GPIO_Init+0x68>)
 80003f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003f4:	6153      	str	r3, [r2, #20]
 80003f6:	4b11      	ldr	r3, [pc, #68]	; (800043c <MX_GPIO_Init+0x68>)
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003fe:	60bb      	str	r3, [r7, #8]
 8000400:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000402:	4b0e      	ldr	r3, [pc, #56]	; (800043c <MX_GPIO_Init+0x68>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	4a0d      	ldr	r2, [pc, #52]	; (800043c <MX_GPIO_Init+0x68>)
 8000408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800040c:	6153      	str	r3, [r2, #20]
 800040e:	4b0b      	ldr	r3, [pc, #44]	; (800043c <MX_GPIO_Init+0x68>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 800041a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800041e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000420:	2300      	movs	r3, #0
 8000422:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000424:	2300      	movs	r3, #0
 8000426:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000428:	f107 030c 	add.w	r3, r7, #12
 800042c:	4619      	mov	r1, r3
 800042e:	4804      	ldr	r0, [pc, #16]	; (8000440 <MX_GPIO_Init+0x6c>)
 8000430:	f001 fbce 	bl	8001bd0 <HAL_GPIO_Init>

}
 8000434:	bf00      	nop
 8000436:	3720      	adds	r7, #32
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	40021000 	.word	0x40021000
 8000440:	48000800 	.word	0x48000800

08000444 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
 \brief   Disable IRQ Interrupts
 \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void) {
	__ASM volatile ("cpsid i" : : : "memory");
 8000448:	b672      	cpsid	i
}
 800044a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800044c:	e7fe      	b.n	800044c <Error_Handler+0x8>
	...

08000450 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8000456:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <HAL_MspInit+0x44>)
 8000458:	699b      	ldr	r3, [r3, #24]
 800045a:	4a0e      	ldr	r2, [pc, #56]	; (8000494 <HAL_MspInit+0x44>)
 800045c:	f043 0301 	orr.w	r3, r3, #1
 8000460:	6193      	str	r3, [r2, #24]
 8000462:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <HAL_MspInit+0x44>)
 8000464:	699b      	ldr	r3, [r3, #24]
 8000466:	f003 0301 	and.w	r3, r3, #1
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 800046e:	4b09      	ldr	r3, [pc, #36]	; (8000494 <HAL_MspInit+0x44>)
 8000470:	69db      	ldr	r3, [r3, #28]
 8000472:	4a08      	ldr	r2, [pc, #32]	; (8000494 <HAL_MspInit+0x44>)
 8000474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000478:	61d3      	str	r3, [r2, #28]
 800047a:	4b06      	ldr	r3, [pc, #24]	; (8000494 <HAL_MspInit+0x44>)
 800047c:	69db      	ldr	r3, [r3, #28]
 800047e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000482:	603b      	str	r3, [r7, #0]
 8000484:	683b      	ldr	r3, [r7, #0]
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8000486:	bf00      	nop
 8000488:	370c      	adds	r7, #12
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	40021000 	.word	0x40021000

08000498 <HAL_ADC_MspInit>:
 * @brief ADC MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hadc: ADC handle pointer
 * @retval None
 */
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc) {
 8000498:	b580      	push	{r7, lr}
 800049a:	b08a      	sub	sp, #40	; 0x28
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80004a0:	f107 0314 	add.w	r3, r7, #20
 80004a4:	2200      	movs	r2, #0
 80004a6:	601a      	str	r2, [r3, #0]
 80004a8:	605a      	str	r2, [r3, #4]
 80004aa:	609a      	str	r2, [r3, #8]
 80004ac:	60da      	str	r2, [r3, #12]
 80004ae:	611a      	str	r2, [r3, #16]
	if (hadc->Instance == ADC1) {
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80004b8:	d124      	bne.n	8000504 <HAL_ADC_MspInit+0x6c>
		/* USER CODE BEGIN ADC1_MspInit 0 */

		/* USER CODE END ADC1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_ADC12_CLK_ENABLE();
 80004ba:	4b14      	ldr	r3, [pc, #80]	; (800050c <HAL_ADC_MspInit+0x74>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	4a13      	ldr	r2, [pc, #76]	; (800050c <HAL_ADC_MspInit+0x74>)
 80004c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004c4:	6153      	str	r3, [r2, #20]
 80004c6:	4b11      	ldr	r3, [pc, #68]	; (800050c <HAL_ADC_MspInit+0x74>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ce:	613b      	str	r3, [r7, #16]
 80004d0:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80004d2:	4b0e      	ldr	r3, [pc, #56]	; (800050c <HAL_ADC_MspInit+0x74>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	4a0d      	ldr	r2, [pc, #52]	; (800050c <HAL_ADC_MspInit+0x74>)
 80004d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004dc:	6153      	str	r3, [r2, #20]
 80004de:	4b0b      	ldr	r3, [pc, #44]	; (800050c <HAL_ADC_MspInit+0x74>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	68fb      	ldr	r3, [r7, #12]
		/**ADC1 GPIO Configuration
		 PA0     ------> ADC1_IN1
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004ea:	2301      	movs	r3, #1
 80004ec:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004ee:	2303      	movs	r3, #3
 80004f0:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f2:	2300      	movs	r3, #0
 80004f4:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f6:	f107 0314 	add.w	r3, r7, #20
 80004fa:	4619      	mov	r1, r3
 80004fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000500:	f001 fb66 	bl	8001bd0 <HAL_GPIO_Init>
		/* USER CODE BEGIN ADC1_MspInit 1 */

		/* USER CODE END ADC1_MspInit 1 */
	}

}
 8000504:	bf00      	nop
 8000506:	3728      	adds	r7, #40	; 0x28
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40021000 	.word	0x40021000

08000510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000514:	e7fe      	b.n	8000514 <NMI_Handler+0x4>

08000516 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800051a:	e7fe      	b.n	800051a <HardFault_Handler+0x4>

0800051c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000520:	e7fe      	b.n	8000520 <MemManage_Handler+0x4>

08000522 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000526:	e7fe      	b.n	8000526 <BusFault_Handler+0x4>

08000528 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800052c:	e7fe      	b.n	800052c <UsageFault_Handler+0x4>

0800052e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800052e:	b480      	push	{r7}
 8000530:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000532:	bf00      	nop
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr

0800053c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr

0800054a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800054a:	b480      	push	{r7}
 800054c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800054e:	bf00      	nop
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr

08000558 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800055c:	f000 f8f8 	bl	8000750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}

08000564 <SystemInit>:
/**
 * @brief  Setup the microcontroller system
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
	/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <SystemInit+0x20>)
 800056a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800056e:	4a05      	ldr	r2, [pc, #20]	; (8000584 <SystemInit+0x20>)
 8000570:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000574:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	e000ed00 	.word	0xe000ed00

08000588 <ADC_Calibration>:
{
	HAL_ADC_DeInit(hadc);
}

void ADC_Calibration(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]
	HAL_ADCEx_Calibration_Start(hadc, SingleDiff);
 8000592:	6839      	ldr	r1, [r7, #0]
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	f000 fd1a 	bl	8000fce <HAL_ADCEx_Calibration_Start>
}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <ADC_Start>:

HAL_StatusTypeDef ADC_Start(ADC_HandleTypeDef* hadc)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b082      	sub	sp, #8
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
	return HAL_ADC_Start(hadc);
 80005aa:	6878      	ldr	r0, [r7, #4]
 80005ac:	f000 faea 	bl	8000b84 <HAL_ADC_Start>
 80005b0:	4603      	mov	r3, r0
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}

080005ba <ADC_GetValue>:

uint32_t ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	b082      	sub	sp, #8
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
	return HAL_ADC_GetValue(hadc);
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	f000 fcf6 	bl	8000fb4 <HAL_ADC_GetValue>
 80005c8:	4603      	mov	r3, r0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <teste_ADC>:

void teste_ADC(ADC_HandleTypeDef* hadc)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	ADC_Calibration(hadc, ADC_SINGLE_ENDED);
 80005dc:	2100      	movs	r1, #0
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f7ff ffd2 	bl	8000588 <ADC_Calibration>
	status = ADC_Start(hadc);
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f7ff ffdc 	bl	80005a2 <ADC_Start>
 80005ea:	4603      	mov	r3, r0
 80005ec:	461a      	mov	r2, r3
 80005ee:	4b1d      	ldr	r3, [pc, #116]	; (8000664 <teste_ADC+0x90>)
 80005f0:	701a      	strb	r2, [r3, #0]
	uint32_t avrg_value=0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]
	if (status != HAL_OK)
 80005f6:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <teste_ADC+0x90>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <teste_ADC+0x2e>
	{
		Error_Handler();
 80005fe:	f7ff ff21 	bl	8000444 <Error_Handler>
	}

	status = HAL_ADC_PollForConversion(hadc, 100);
 8000602:	2164      	movs	r1, #100	; 0x64
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f000 fbd3 	bl	8000db0 <HAL_ADC_PollForConversion>
 800060a:	4603      	mov	r3, r0
 800060c:	461a      	mov	r2, r3
 800060e:	4b15      	ldr	r3, [pc, #84]	; (8000664 <teste_ADC+0x90>)
 8000610:	701a      	strb	r2, [r3, #0]
	if (status != HAL_OK)
 8000612:	4b14      	ldr	r3, [pc, #80]	; (8000664 <teste_ADC+0x90>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <teste_ADC+0x4a>
	{
		Error_Handler();
 800061a:	f7ff ff13 	bl	8000444 <Error_Handler>
	}
	for(int i=0; i<10;i++){
 800061e:	2300      	movs	r3, #0
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	e011      	b.n	8000648 <teste_ADC+0x74>
		adc_values[i] = ADC_GetValue(hadc);
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f7ff ffc8 	bl	80005ba <ADC_GetValue>
 800062a:	4602      	mov	r2, r0
 800062c:	490e      	ldr	r1, [pc, #56]	; (8000668 <teste_ADC+0x94>)
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		avrg_value+=adc_values[i];
 8000634:	4a0c      	ldr	r2, [pc, #48]	; (8000668 <teste_ADC+0x94>)
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800063c:	68fa      	ldr	r2, [r7, #12]
 800063e:	4413      	add	r3, r2
 8000640:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<10;i++){
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	3301      	adds	r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	2b09      	cmp	r3, #9
 800064c:	ddea      	ble.n	8000624 <teste_ADC+0x50>
	}
	avrg_value = avrg_value/10;
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	4a06      	ldr	r2, [pc, #24]	; (800066c <teste_ADC+0x98>)
 8000652:	fba2 2303 	umull	r2, r3, r2, r3
 8000656:	08db      	lsrs	r3, r3, #3
 8000658:	60fb      	str	r3, [r7, #12]
}
 800065a:	bf00      	nop
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	2000007c 	.word	0x2000007c
 8000668:	20000080 	.word	0x20000080
 800066c:	cccccccd 	.word	0xcccccccd

08000670 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000670:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006a8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000674:	f7ff ff76 	bl	8000564 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000678:	480c      	ldr	r0, [pc, #48]	; (80006ac <LoopForever+0x6>)
  ldr r1, =_edata
 800067a:	490d      	ldr	r1, [pc, #52]	; (80006b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800067c:	4a0d      	ldr	r2, [pc, #52]	; (80006b4 <LoopForever+0xe>)
  movs r3, #0
 800067e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000680:	e002      	b.n	8000688 <LoopCopyDataInit>

08000682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000686:	3304      	adds	r3, #4

08000688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800068a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800068c:	d3f9      	bcc.n	8000682 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800068e:	4a0a      	ldr	r2, [pc, #40]	; (80006b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000690:	4c0a      	ldr	r4, [pc, #40]	; (80006bc <LoopForever+0x16>)
  movs r3, #0
 8000692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000694:	e001      	b.n	800069a <LoopFillZerobss>

08000696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000698:	3204      	adds	r2, #4

0800069a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800069a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800069c:	d3fb      	bcc.n	8000696 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800069e:	f003 f891 	bl	80037c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006a2:	f7ff fd97 	bl	80001d4 <main>

080006a6 <LoopForever>:

LoopForever:
    b LoopForever
 80006a6:	e7fe      	b.n	80006a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006a8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80006ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006b4:	0800386c 	.word	0x0800386c
  ldr r2, =_sbss
 80006b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006bc:	200000ac 	.word	0x200000ac

080006c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006c0:	e7fe      	b.n	80006c0 <ADC1_2_IRQHandler>
	...

080006c4 <HAL_Init>:
 *         Once done, time base tick start incrementing.
 *         In the default implementation,Systick is used as source of time base.
 *       The tick variable is incremented each 1ms in its ISR.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_Init(void) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	/* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c8:	4b08      	ldr	r3, [pc, #32]	; (80006ec <HAL_Init+0x28>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a07      	ldr	r2, [pc, #28]	; (80006ec <HAL_Init+0x28>)
 80006ce:	f043 0310 	orr.w	r3, r3, #16
 80006d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

	/* Set Interrupt Group Priority */
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006d4:	2003      	movs	r0, #3
 80006d6:	f001 fa47 	bl	8001b68 <HAL_NVIC_SetPriorityGrouping>

	/* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
	HAL_InitTick(TICK_INT_PRIORITY);
 80006da:	200f      	movs	r0, #15
 80006dc:	f000 f808 	bl	80006f0 <HAL_InitTick>

	/* Init the low level hardware */
	HAL_MspInit();
 80006e0:	f7ff feb6 	bl	8000450 <HAL_MspInit>

	/* Return function status */
	return HAL_OK;
 80006e4:	2300      	movs	r3, #0
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40022000 	.word	0x40022000

080006f0 <HAL_InitTick>:
 *         The function is declared as __Weak  to be overwritten  in case of other
 *         implementation  in user file.
 * @param TickPriority Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	/* Configure the SysTick to have interrupt in 1ms time basis*/
	if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U) {
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <HAL_InitTick+0x54>)
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <HAL_InitTick+0x58>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	4619      	mov	r1, r3
 8000702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000706:	fbb3 f3f1 	udiv	r3, r3, r1
 800070a:	fbb2 f3f3 	udiv	r3, r2, r3
 800070e:	4618      	mov	r0, r3
 8000710:	f001 fa51 	bl	8001bb6 <HAL_SYSTICK_Config>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <HAL_InitTick+0x2e>
		return HAL_ERROR;
 800071a:	2301      	movs	r3, #1
 800071c:	e00e      	b.n	800073c <HAL_InitTick+0x4c>
	}

	/* Configure the SysTick IRQ priority */
	if (TickPriority < (1UL << __NVIC_PRIO_BITS)) {
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2b0f      	cmp	r3, #15
 8000722:	d80a      	bhi.n	800073a <HAL_InitTick+0x4a>
		HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000724:	2200      	movs	r2, #0
 8000726:	6879      	ldr	r1, [r7, #4]
 8000728:	f04f 30ff 	mov.w	r0, #4294967295
 800072c:	f001 fa27 	bl	8001b7e <HAL_NVIC_SetPriority>
		uwTickPrio = TickPriority;
 8000730:	4a06      	ldr	r2, [pc, #24]	; (800074c <HAL_InitTick+0x5c>)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	6013      	str	r3, [r2, #0]
	} else {
		return HAL_ERROR;
	}
	/* Return function status */
	return HAL_OK;
 8000736:	2300      	movs	r3, #0
 8000738:	e000      	b.n	800073c <HAL_InitTick+0x4c>
		return HAL_ERROR;
 800073a:	2301      	movs	r3, #1
}
 800073c:	4618      	mov	r0, r3
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000000 	.word	0x20000000
 8000748:	20000008 	.word	0x20000008
 800074c:	20000004 	.word	0x20000004

08000750 <HAL_IncTick>:
 *         in SysTick ISR.
 * @note This function is declared as __weak to be overwritten in case of other 
 *         implementations  in user file.
 * @retval None
 */
__weak void HAL_IncTick(void) {
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
	uwTick += uwTickFreq;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <HAL_IncTick+0x20>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	461a      	mov	r2, r3
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <HAL_IncTick+0x24>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4413      	add	r3, r2
 8000760:	4a04      	ldr	r2, [pc, #16]	; (8000774 <HAL_IncTick+0x24>)
 8000762:	6013      	str	r3, [r2, #0]
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	20000008 	.word	0x20000008
 8000774:	200000a8 	.word	0x200000a8

08000778 <HAL_GetTick>:
 * @brief  Povides a tick value in millisecond.
 * @note   The function is declared as __Weak  to be overwritten  in case of other 
 *         implementations  in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
	return uwTick;
 800077c:	4b03      	ldr	r3, [pc, #12]	; (800078c <HAL_GetTick+0x14>)
 800077e:	681b      	ldr	r3, [r3, #0]
}
 8000780:	4618      	mov	r0, r3
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	200000a8 	.word	0x200000a8

08000790 <HAL_ADC_Init>:
 *         case of update of a parameter of ADC_InitTypeDef on the fly,
 *         without  disabling the other ADCs sharing the same common group.
 * @param  hadc ADC handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b09a      	sub	sp, #104	; 0x68
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000798:	2300      	movs	r3, #0
 800079a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	ADC_Common_TypeDef *tmpADC_Common;
	ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
	uint32_t tmpCFGR = 0U;
 800079e:	2300      	movs	r3, #0
 80007a0:	663b      	str	r3, [r7, #96]	; 0x60
	__IO uint32_t wait_loop_index = 0U;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]

	/* Check ADC handle */
	if (hadc == NULL) {
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d101      	bne.n	80007b0 <HAL_ADC_Init+0x20>
		return HAL_ERROR;
 80007ac:	2301      	movs	r3, #1
 80007ae:	e1e3      	b.n	8000b78 <HAL_ADC_Init+0x3e8>
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
	assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
	assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));

	if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE) {
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	691b      	ldr	r3, [r3, #16]
 80007b4:	2b00      	cmp	r3, #0
					IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
		}
	}

	/* Configuration of ADC core parameters and ADC MSP related parameters */
	if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL)) {
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ba:	f003 0310 	and.w	r3, r3, #16
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d176      	bne.n	80008b0 <HAL_ADC_Init+0x120>
		/* procedure.                                                             */

		/* Actions performed only if ADC is coming from state reset:              */
		/* - Initialization of ADC MSP                                            */
		/* - ADC voltage regulator enable                                         */
		if (hadc->State == HAL_ADC_STATE_RESET) {
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d152      	bne.n	8000870 <HAL_ADC_Init+0xe0>
			/* Initialize ADC error code */
			ADC_CLEAR_ERRORCODE(hadc);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2200      	movs	r2, #0
 80007ce:	645a      	str	r2, [r3, #68]	; 0x44

			/* Initialize HAL ADC API internal variables */
			hadc->InjectionConfig.ChannelCount = 0U;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2200      	movs	r2, #0
 80007d4:	64da      	str	r2, [r3, #76]	; 0x4c
			hadc->InjectionConfig.ContextQueue = 0U;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2200      	movs	r2, #0
 80007da:	649a      	str	r2, [r3, #72]	; 0x48

			/* Allocate lock resource and initialize it */
			hadc->Lock = HAL_UNLOCKED;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2200      	movs	r2, #0
 80007e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
			/* Init the low level hardware */
			HAL_ADC_MspInit(hadc);
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f7ff fe57 	bl	8000498 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

			/* Enable voltage regulator (if disabled at this step) */
			if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0)) {
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	689b      	ldr	r3, [r3, #8]
 80007f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d13b      	bne.n	8000870 <HAL_ADC_Init+0xe0>
				/*       enabling the ADC. This temporization must be implemented by  */
				/*       software and is equal to 10 us in the worst case             */
				/*       process/temperature/power supply.                            */

				/* Disable the ADC (if not already disabled) */
				tmp_hal_status = ADC_Disable(hadc);
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f001 f89d 	bl	8001938 <ADC_Disable>
 80007fe:	4603      	mov	r3, r0
 8000800:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

				/* Check if ADC is effectively disabled */
				/* Configuration of ADC parameters if previous preliminary actions    */
				/* are correctly completed.                                           */
				if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000808:	f003 0310 	and.w	r3, r3, #16
 800080c:	2b00      	cmp	r3, #0
 800080e:	d12f      	bne.n	8000870 <HAL_ADC_Init+0xe0>
						&& (tmp_hal_status == HAL_OK)) {
 8000810:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000814:	2b00      	cmp	r3, #0
 8000816:	d12b      	bne.n	8000870 <HAL_ADC_Init+0xe0>
					/* Set ADC state */
					ADC_STATE_CLR_SET(hadc->State,
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000820:	f023 0302 	bic.w	r3, r3, #2
 8000824:	f043 0202 	orr.w	r2, r3, #2
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	641a      	str	r2, [r3, #64]	; 0x40
							HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
							HAL_ADC_STATE_BUSY_INTERNAL);

					/* Set the intermediate state before moving the ADC voltage         */
					/* regulator to state enable.                                       */
					CLEAR_BIT(hadc->Instance->CR,
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	689a      	ldr	r2, [r3, #8]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800083a:	609a      	str	r2, [r3, #8]
							(ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
					/* Set ADVREGEN bits to 0x01U */
					SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	689a      	ldr	r2, [r3, #8]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800084a:	609a      	str	r2, [r3, #8]

					/* Delay for ADC stabilization time.                                */
					/* Compute number of CPU cycles to wait for */
					wait_loop_index = (ADC_STAB_DELAY_US
							* (SystemCoreClock / 1000000U));
 800084c:	4b92      	ldr	r3, [pc, #584]	; (8000a98 <HAL_ADC_Init+0x308>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a92      	ldr	r2, [pc, #584]	; (8000a9c <HAL_ADC_Init+0x30c>)
 8000852:	fba2 2303 	umull	r2, r3, r2, r3
 8000856:	0c9a      	lsrs	r2, r3, #18
 8000858:	4613      	mov	r3, r2
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	4413      	add	r3, r2
 800085e:	005b      	lsls	r3, r3, #1
					wait_loop_index = (ADC_STAB_DELAY_US
 8000860:	60bb      	str	r3, [r7, #8]
					while (wait_loop_index != 0U) {
 8000862:	e002      	b.n	800086a <HAL_ADC_Init+0xda>
						wait_loop_index--;
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	3b01      	subs	r3, #1
 8000868:	60bb      	str	r3, [r7, #8]
					while (wait_loop_index != 0U) {
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d1f9      	bne.n	8000864 <HAL_ADC_Init+0xd4>
		}

		/* Verification that ADC voltage regulator is correctly enabled, whether  */
		/* or not ADC is coming from state reset (if any potential problem of     */
		/* clocking, voltage regulator would not be enabled).                     */
		if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	689b      	ldr	r3, [r3, #8]
 8000876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087a:	2b00      	cmp	r3, #0
 800087c:	d007      	beq.n	800088e <HAL_ADC_Init+0xfe>
		HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)) {
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	689b      	ldr	r3, [r3, #8]
 8000884:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
		if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000888:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800088c:	d110      	bne.n	80008b0 <HAL_ADC_Init+0x120>
			/* Update ADC state machine to error */
			ADC_STATE_CLR_SET(hadc->State,
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000892:	f023 0312 	bic.w	r3, r3, #18
 8000896:	f043 0210 	orr.w	r2, r3, #16
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	641a      	str	r2, [r3, #64]	; 0x40
					HAL_ADC_STATE_BUSY_INTERNAL,
					HAL_ADC_STATE_ERROR_INTERNAL);

			/* Set ADC error code to ADC IP internal error */
			SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a2:	f043 0201 	orr.w	r2, r3, #1
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	645a      	str	r2, [r3, #68]	; 0x44

			tmp_hal_status = HAL_ERROR;
 80008aa:	2301      	movs	r3, #1
 80008ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	/* Configuration of ADC parameters if previous preliminary actions are      */
	/* correctly completed and if there is no conversion on going on regular    */
	/* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
	/* called to update a parameter on the fly).                                */
	if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b4:	f003 0310 	and.w	r3, r3, #16
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	f040 8150 	bne.w	8000b5e <HAL_ADC_Init+0x3ce>
			&& (tmp_hal_status == HAL_OK)
 80008be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	f040 814b 	bne.w	8000b5e <HAL_ADC_Init+0x3ce>
			&& (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)) {
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	689b      	ldr	r3, [r3, #8]
 80008ce:	f003 0304 	and.w	r3, r3, #4
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	f040 8143 	bne.w	8000b5e <HAL_ADC_Init+0x3ce>
		/* Set ADC state */
		ADC_STATE_CLR_SET(hadc->State,
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008dc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80008e0:	f043 0202 	orr.w	r2, r3, #2
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	641a      	str	r2, [r3, #64]	; 0x40
		/* Configuration of common ADC parameters                                 */

		/* Pointer to the common control register to which is belonging hadc      */
		/* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
		/* control registers)                                                     */
		tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80008f0:	d004      	beq.n	80008fc <HAL_ADC_Init+0x16c>
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a6a      	ldr	r2, [pc, #424]	; (8000aa0 <HAL_ADC_Init+0x310>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d101      	bne.n	8000900 <HAL_ADC_Init+0x170>
 80008fc:	4b69      	ldr	r3, [pc, #420]	; (8000aa4 <HAL_ADC_Init+0x314>)
 80008fe:	e000      	b.n	8000902 <HAL_ADC_Init+0x172>
 8000900:	4b69      	ldr	r3, [pc, #420]	; (8000aa8 <HAL_ADC_Init+0x318>)
 8000902:	65fb      	str	r3, [r7, #92]	; 0x5c

		/* Set handle of the other ADC sharing the same common register           */
		ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800090c:	d102      	bne.n	8000914 <HAL_ADC_Init+0x184>
 800090e:	4b64      	ldr	r3, [pc, #400]	; (8000aa0 <HAL_ADC_Init+0x310>)
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	e01a      	b.n	800094a <HAL_ADC_Init+0x1ba>
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a61      	ldr	r2, [pc, #388]	; (8000aa0 <HAL_ADC_Init+0x310>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d103      	bne.n	8000926 <HAL_ADC_Init+0x196>
 800091e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	e011      	b.n	800094a <HAL_ADC_Init+0x1ba>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a60      	ldr	r2, [pc, #384]	; (8000aac <HAL_ADC_Init+0x31c>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d102      	bne.n	8000936 <HAL_ADC_Init+0x1a6>
 8000930:	4b5f      	ldr	r3, [pc, #380]	; (8000ab0 <HAL_ADC_Init+0x320>)
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	e009      	b.n	800094a <HAL_ADC_Init+0x1ba>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a5d      	ldr	r2, [pc, #372]	; (8000ab0 <HAL_ADC_Init+0x320>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d102      	bne.n	8000946 <HAL_ADC_Init+0x1b6>
 8000940:	4b5a      	ldr	r3, [pc, #360]	; (8000aac <HAL_ADC_Init+0x31c>)
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	e001      	b.n	800094a <HAL_ADC_Init+0x1ba>
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]

		/* Parameters update conditioned to ADC state:                            */
		/* Parameters that can be updated only when ADC is disabled:              */
		/*  - Multimode clock configuration                                       */
		if ((ADC_IS_ENABLE(hadc) == RESET)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	f003 0303 	and.w	r3, r3, #3
 8000954:	2b01      	cmp	r3, #1
 8000956:	d108      	bne.n	800096a <HAL_ADC_Init+0x1da>
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	2b01      	cmp	r3, #1
 8000964:	d101      	bne.n	800096a <HAL_ADC_Init+0x1da>
 8000966:	2301      	movs	r3, #1
 8000968:	e000      	b.n	800096c <HAL_ADC_Init+0x1dc>
 800096a:	2300      	movs	r3, #0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d11c      	bne.n	80009aa <HAL_ADC_Init+0x21a>
				&& ((tmphadcSharingSameCommonRegister.Instance == NULL)
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d010      	beq.n	8000998 <HAL_ADC_Init+0x208>
						|| (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister)
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	689b      	ldr	r3, [r3, #8]
 800097a:	f003 0303 	and.w	r3, r3, #3
 800097e:	2b01      	cmp	r3, #1
 8000980:	d107      	bne.n	8000992 <HAL_ADC_Init+0x202>
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	2b01      	cmp	r3, #1
 800098c:	d101      	bne.n	8000992 <HAL_ADC_Init+0x202>
 800098e:	2301      	movs	r3, #1
 8000990:	e000      	b.n	8000994 <HAL_ADC_Init+0x204>
 8000992:	2300      	movs	r3, #0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d108      	bne.n	80009aa <HAL_ADC_Init+0x21a>
			/*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
			/*   - internal measurement paths: Vbat, temperature sensor, Vref       */
			/*     (set into HAL_ADC_ConfigChannel() or                             */
			/*     HAL_ADCEx_InjectedConfigChannel() )                              */

			MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_CKMODE,
 8000998:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800099a:	689b      	ldr	r3, [r3, #8]
 800099c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	431a      	orrs	r2, r3
 80009a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009a8:	609a      	str	r2, [r3, #8]
		/*  - external trigger to start conversion                                */
		/*  - external trigger polarity                                           */
		/*  - continuous conversion mode                                          */
		/*  - overrun                                                             */
		/*  - discontinuous mode                                                  */
		SET_BIT(tmpCFGR,
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	7e5b      	ldrb	r3, [r3, #25]
 80009ae:	035b      	lsls	r3, r3, #13
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80009b4:	2a01      	cmp	r2, #1
 80009b6:	d002      	beq.n	80009be <HAL_ADC_Init+0x22e>
 80009b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009bc:	e000      	b.n	80009c0 <HAL_ADC_Init+0x230>
 80009be:	2200      	movs	r2, #0
 80009c0:	431a      	orrs	r2, r3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	68db      	ldr	r3, [r3, #12]
 80009c6:	431a      	orrs	r2, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	4313      	orrs	r3, r2
 80009ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80009d0:	4313      	orrs	r3, r2
 80009d2:	663b      	str	r3, [r7, #96]	; 0x60
				ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) | ADC_CFGR_OVERRUN(hadc->Init.Overrun) | hadc->Init.DataAlign | hadc->Init.Resolution);

		/* Enable discontinuous mode only if continuous mode is disabled */
		if (hadc->Init.DiscontinuousConvMode == ENABLE) {
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d11b      	bne.n	8000a16 <HAL_ADC_Init+0x286>
			if (hadc->Init.ContinuousConvMode == DISABLE) {
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	7e5b      	ldrb	r3, [r3, #25]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d109      	bne.n	80009fa <HAL_ADC_Init+0x26a>
				/* Enable the selected ADC regular discontinuous mode */
				/* Set the number of channels to be converted in discontinuous mode */
				SET_BIT(tmpCFGR,
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ea:	3b01      	subs	r3, #1
 80009ec:	045a      	lsls	r2, r3, #17
 80009ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80009f0:	4313      	orrs	r3, r2
 80009f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009f6:	663b      	str	r3, [r7, #96]	; 0x60
 80009f8:	e00d      	b.n	8000a16 <HAL_ADC_Init+0x286>
				/* ADC regular group discontinuous was intended to be enabled,        */
				/* but ADC regular group modes continuous and sequencer discontinuous */
				/* cannot be enabled simultaneously.                                  */

				/* Update ADC state machine to error */
				ADC_STATE_CLR_SET(hadc->State,
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000a02:	f043 0220 	orr.w	r2, r3, #32
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	641a      	str	r2, [r3, #64]	; 0x40
						HAL_ADC_STATE_BUSY_INTERNAL,
						HAL_ADC_STATE_ERROR_CONFIG);

				/* Set ADC error code to ADC IP internal error */
				SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	f043 0201 	orr.w	r2, r3, #1
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	645a      	str	r2, [r3, #68]	; 0x44
		/* Enable external trigger if trigger selection is different of software  */
		/* start.                                                                 */
		/* Note: This configuration keeps the hardware feature of parameter       */
		/*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
		/*       software start.                                                  */
		if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START) {
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d054      	beq.n	8000ac8 <HAL_ADC_Init+0x338>
			SET_BIT(tmpCFGR,
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a22      	ldr	r2, [pc, #136]	; (8000aac <HAL_ADC_Init+0x31c>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d004      	beq.n	8000a32 <HAL_ADC_Init+0x2a2>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a20      	ldr	r2, [pc, #128]	; (8000ab0 <HAL_ADC_Init+0x320>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d140      	bne.n	8000ab4 <HAL_ADC_Init+0x324>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a36:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000a3a:	d02a      	beq.n	8000a92 <HAL_ADC_Init+0x302>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a44:	d022      	beq.n	8000a8c <HAL_ADC_Init+0x2fc>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a4a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000a4e:	d01a      	beq.n	8000a86 <HAL_ADC_Init+0x2f6>
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a54:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8000a58:	d012      	beq.n	8000a80 <HAL_ADC_Init+0x2f0>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a5e:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8000a62:	d00a      	beq.n	8000a7a <HAL_ADC_Init+0x2ea>
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a68:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8000a6c:	d002      	beq.n	8000a74 <HAL_ADC_Init+0x2e4>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a72:	e023      	b.n	8000abc <HAL_ADC_Init+0x32c>
 8000a74:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000a78:	e020      	b.n	8000abc <HAL_ADC_Init+0x32c>
 8000a7a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000a7e:	e01d      	b.n	8000abc <HAL_ADC_Init+0x32c>
 8000a80:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000a84:	e01a      	b.n	8000abc <HAL_ADC_Init+0x32c>
 8000a86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a8a:	e017      	b.n	8000abc <HAL_ADC_Init+0x32c>
 8000a8c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000a90:	e014      	b.n	8000abc <HAL_ADC_Init+0x32c>
 8000a92:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000a96:	e011      	b.n	8000abc <HAL_ADC_Init+0x32c>
 8000a98:	20000000 	.word	0x20000000
 8000a9c:	431bde83 	.word	0x431bde83
 8000aa0:	50000100 	.word	0x50000100
 8000aa4:	50000300 	.word	0x50000300
 8000aa8:	50000700 	.word	0x50000700
 8000aac:	50000400 	.word	0x50000400
 8000ab0:	50000500 	.word	0x50000500
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ab8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	663b      	str	r3, [r7, #96]	; 0x60
		/* Parameters update conditioned to ADC state:                            */
		/* Parameters that can be updated when ADC is disabled or enabled without */
		/* conversion on going on regular and injected groups:                    */
		/*  - DMA continuous request                                              */
		/*  - LowPowerAutoWait feature                                            */
		if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET) {
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	f003 030c 	and.w	r3, r3, #12
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d114      	bne.n	8000b00 <HAL_ADC_Init+0x370>
			CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY | ADC_CFGR_DMACFG);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	6812      	ldr	r2, [r2, #0]
 8000ae0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ae4:	f023 0302 	bic.w	r3, r3, #2
 8000ae8:	60d3      	str	r3, [r2, #12]

			SET_BIT(tmpCFGR,
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	7e1b      	ldrb	r3, [r3, #24]
 8000aee:	039a      	lsls	r2, r3, #14
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	4313      	orrs	r3, r2
 8000afa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000afc:	4313      	orrs	r3, r2
 8000afe:	663b      	str	r3, [r7, #96]	; 0x60
					ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) | ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
		}

		/* Update ADC configuration register with previous settings */
		MODIFY_REG(hadc->Instance->CFGR,
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	68da      	ldr	r2, [r3, #12]
 8000b06:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <HAL_ADC_Init+0x3f0>)
 8000b08:	4013      	ands	r3, r2
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	6812      	ldr	r2, [r2, #0]
 8000b0e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000b10:	430b      	orrs	r3, r1
 8000b12:	60d3      	str	r3, [r2, #12]
		/*   Parameter "NbrOfConversion" is discarded.                            */
		/*   Note: Scan mode is not present by hardware on this device, but       */
		/*   emulated by software for alignment over all STM32 devices.           */
		/* - if scan mode is enabled, regular channels sequence length is set to  */
		/*   parameter "NbrOfConversion"                                          */
		if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE) {
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	691b      	ldr	r3, [r3, #16]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d10c      	bne.n	8000b36 <HAL_ADC_Init+0x3a6>
			/* Set number of ranks in regular group sequencer */
			MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L,
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f023 010f 	bic.w	r1, r3, #15
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	69db      	ldr	r3, [r3, #28]
 8000b2a:	1e5a      	subs	r2, r3, #1
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	430a      	orrs	r2, r1
 8000b32:	631a      	str	r2, [r3, #48]	; 0x30
 8000b34:	e007      	b.n	8000b46 <HAL_ADC_Init+0x3b6>
					(hadc->Init.NbrOfConversion - (uint8_t )1U));
		} else {
			CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f022 020f 	bic.w	r2, r2, #15
 8000b44:	631a      	str	r2, [r3, #48]	; 0x30
		}

		/* Set ADC error code to none */
		ADC_CLEAR_ERRORCODE(hadc);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	645a      	str	r2, [r3, #68]	; 0x44

		/* Set the ADC state */
		ADC_STATE_CLR_SET(hadc->State,
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	f023 0303 	bic.w	r3, r3, #3
 8000b54:	f043 0201 	orr.w	r2, r3, #1
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	641a      	str	r2, [r3, #64]	; 0x40
 8000b5c:	e00a      	b.n	8000b74 <HAL_ADC_Init+0x3e4>
				HAL_ADC_STATE_BUSY_INTERNAL,
				HAL_ADC_STATE_READY);
	} else {
		/* Update ADC state machine to error */
		ADC_STATE_CLR_SET(hadc->State,
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	f023 0312 	bic.w	r3, r3, #18
 8000b66:	f043 0210 	orr.w	r2, r3, #16
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	641a      	str	r2, [r3, #64]	; 0x40
				HAL_ADC_STATE_BUSY_INTERNAL,
				HAL_ADC_STATE_ERROR_INTERNAL);

		tmp_hal_status = HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	}

	/* Return function status */
	return tmp_hal_status;
 8000b74:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3768      	adds	r7, #104	; 0x68
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	fff0c007 	.word	0xfff0c007

08000b84 <HAL_ADC_Start>:
 *         if ADC is slave, ADC is enabled only (conversion is not started).
 *         if ADC is master, ADC is enabled and multimode conversion is started.
 * @param  hadc ADC handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	73fb      	strb	r3, [r7, #15]

	/* Check the parameters */
	assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

	/* Perform ADC enable and conversion start if no conversion is on going */
	if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) {
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	f003 0304 	and.w	r3, r3, #4
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	f040 80f9 	bne.w	8000d92 <HAL_ADC_Start+0x20e>
		/* Process locked */
		__HAL_LOCK(hadc);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d101      	bne.n	8000bae <HAL_ADC_Start+0x2a>
 8000baa:	2302      	movs	r3, #2
 8000bac:	e0f4      	b.n	8000d98 <HAL_ADC_Start+0x214>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		/* Enable the ADC peripheral */
		tmp_hal_status = ADC_Enable(hadc);
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f000 fe5a 	bl	8001870 <ADC_Enable>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	73fb      	strb	r3, [r7, #15]

		/* Start conversion if ADC is effectively enabled */
		if (tmp_hal_status == HAL_OK) {
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	f040 80e0 	bne.w	8000d88 <HAL_ADC_Start+0x204>
			/* Set ADC state                                                        */
			/* - Clear state bitfield related to regular group conversion results   */
			/* - Set state bitfield related to regular operation                    */
			ADC_STATE_CLR_SET(hadc->State,
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bcc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000bd0:	f023 0301 	bic.w	r3, r3, #1
 8000bd4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	641a      	str	r2, [r3, #64]	; 0x40
					HAL_ADC_STATE_REG_BUSY);

			/* Set group injected state (from auto-injection) and multimode state   */
			/* for all cases of multimode: independent mode, multimode ADC master   */
			/* or multimode ADC slave (for devices with several ADCs):              */
			if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)) {
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000be4:	d004      	beq.n	8000bf0 <HAL_ADC_Start+0x6c>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a6d      	ldr	r2, [pc, #436]	; (8000da0 <HAL_ADC_Start+0x21c>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d106      	bne.n	8000bfe <HAL_ADC_Start+0x7a>
 8000bf0:	4b6c      	ldr	r3, [pc, #432]	; (8000da4 <HAL_ADC_Start+0x220>)
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	f003 031f 	and.w	r3, r3, #31
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d010      	beq.n	8000c1e <HAL_ADC_Start+0x9a>
 8000bfc:	e005      	b.n	8000c0a <HAL_ADC_Start+0x86>
 8000bfe:	4b6a      	ldr	r3, [pc, #424]	; (8000da8 <HAL_ADC_Start+0x224>)
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	f003 031f 	and.w	r3, r3, #31
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d009      	beq.n	8000c1e <HAL_ADC_Start+0x9a>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c12:	d004      	beq.n	8000c1e <HAL_ADC_Start+0x9a>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a64      	ldr	r2, [pc, #400]	; (8000dac <HAL_ADC_Start+0x228>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d115      	bne.n	8000c4a <HAL_ADC_Start+0xc6>
				/* Set ADC state (ADC independent or master) */
				CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	641a      	str	r2, [r3, #64]	; 0x40

				/* If conversions on group regular are also triggering group injected,*/
				/* update ADC state.                                                  */
				if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET) {
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d036      	beq.n	8000ca6 <HAL_ADC_Start+0x122>
					ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c40:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	641a      	str	r2, [r3, #64]	; 0x40
				if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET) {
 8000c48:	e02d      	b.n	8000ca6 <HAL_ADC_Start+0x122>
				}
			} else {
				/* Set ADC state (ADC slave) */
				SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	641a      	str	r2, [r3, #64]	; 0x40

				/* If conversions on group regular are also triggering group injected,*/
				/* update ADC state.                                                  */
				if (ADC_MULTIMODE_AUTO_INJECTED(hadc)) {
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c5e:	d004      	beq.n	8000c6a <HAL_ADC_Start+0xe6>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a4e      	ldr	r2, [pc, #312]	; (8000da0 <HAL_ADC_Start+0x21c>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d10a      	bne.n	8000c80 <HAL_ADC_Start+0xfc>
 8000c6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	bf14      	ite	ne
 8000c78:	2301      	movne	r3, #1
 8000c7a:	2300      	moveq	r3, #0
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	e008      	b.n	8000c92 <HAL_ADC_Start+0x10e>
 8000c80:	4b4a      	ldr	r3, [pc, #296]	; (8000dac <HAL_ADC_Start+0x228>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	bf14      	ite	ne
 8000c8c:	2301      	movne	r3, #1
 8000c8e:	2300      	moveq	r3, #0
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d007      	beq.n	8000ca6 <HAL_ADC_Start+0x122>
					ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c9e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	641a      	str	r2, [r3, #64]	; 0x40
				}
			}

			/* State machine update: Check if an injected conversion is ongoing */
			if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY)) {
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cb2:	d106      	bne.n	8000cc2 <HAL_ADC_Start+0x13e>
				/* Reset ADC error code fields related to conversions on group regular*/
				CLEAR_BIT(hadc->ErrorCode,
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb8:	f023 0206 	bic.w	r2, r3, #6
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	645a      	str	r2, [r3, #68]	; 0x44
 8000cc0:	e002      	b.n	8000cc8 <HAL_ADC_Start+0x144>
						(HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
			} else {
				/* Reset ADC all error code fields */
				ADC_CLEAR_ERRORCODE(hadc);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	645a      	str	r2, [r3, #68]	; 0x44
			}

			/* Process unlocked */
			/* Unlock before starting ADC conversions: in case of potential         */
			/* interruption, to let the process to ADC IRQ Handler.                 */
			__HAL_UNLOCK(hadc);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

			/* Clear regular group conversion flag and overrun flag */
			/* (To ensure of no unknown state from potential previous ADC           */
			/* operations)                                                          */
			__HAL_ADC_CLEAR_FLAG(hadc,
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	221c      	movs	r2, #28
 8000cd6:	601a      	str	r2, [r3, #0]
			/* If external trigger has been selected, conversion will start at next */
			/* trigger event.                                                       */
			/* Case of multimode enabled (for devices with several ADCs):           */
			/*  - if ADC is slave, ADC is enabled only (conversion is not started). */
			/*  - if ADC is master, ADC is enabled and conversion is started.       */
			if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc)) {
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ce0:	d004      	beq.n	8000cec <HAL_ADC_Start+0x168>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a2e      	ldr	r2, [pc, #184]	; (8000da0 <HAL_ADC_Start+0x21c>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d106      	bne.n	8000cfa <HAL_ADC_Start+0x176>
 8000cec:	4b2d      	ldr	r3, [pc, #180]	; (8000da4 <HAL_ADC_Start+0x220>)
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	f003 031f 	and.w	r3, r3, #31
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d03e      	beq.n	8000d76 <HAL_ADC_Start+0x1f2>
 8000cf8:	e005      	b.n	8000d06 <HAL_ADC_Start+0x182>
 8000cfa:	4b2b      	ldr	r3, [pc, #172]	; (8000da8 <HAL_ADC_Start+0x224>)
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	f003 031f 	and.w	r3, r3, #31
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d037      	beq.n	8000d76 <HAL_ADC_Start+0x1f2>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d0e:	d004      	beq.n	8000d1a <HAL_ADC_Start+0x196>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a22      	ldr	r2, [pc, #136]	; (8000da0 <HAL_ADC_Start+0x21c>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d106      	bne.n	8000d28 <HAL_ADC_Start+0x1a4>
 8000d1a:	4b22      	ldr	r3, [pc, #136]	; (8000da4 <HAL_ADC_Start+0x220>)
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	f003 031f 	and.w	r3, r3, #31
 8000d22:	2b05      	cmp	r3, #5
 8000d24:	d027      	beq.n	8000d76 <HAL_ADC_Start+0x1f2>
 8000d26:	e005      	b.n	8000d34 <HAL_ADC_Start+0x1b0>
 8000d28:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <HAL_ADC_Start+0x224>)
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	f003 031f 	and.w	r3, r3, #31
 8000d30:	2b05      	cmp	r3, #5
 8000d32:	d020      	beq.n	8000d76 <HAL_ADC_Start+0x1f2>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d3c:	d004      	beq.n	8000d48 <HAL_ADC_Start+0x1c4>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a17      	ldr	r2, [pc, #92]	; (8000da0 <HAL_ADC_Start+0x21c>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d106      	bne.n	8000d56 <HAL_ADC_Start+0x1d2>
 8000d48:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <HAL_ADC_Start+0x220>)
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	f003 031f 	and.w	r3, r3, #31
 8000d50:	2b09      	cmp	r3, #9
 8000d52:	d010      	beq.n	8000d76 <HAL_ADC_Start+0x1f2>
 8000d54:	e005      	b.n	8000d62 <HAL_ADC_Start+0x1de>
 8000d56:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <HAL_ADC_Start+0x224>)
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	f003 031f 	and.w	r3, r3, #31
 8000d5e:	2b09      	cmp	r3, #9
 8000d60:	d009      	beq.n	8000d76 <HAL_ADC_Start+0x1f2>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d6a:	d004      	beq.n	8000d76 <HAL_ADC_Start+0x1f2>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a0e      	ldr	r2, [pc, #56]	; (8000dac <HAL_ADC_Start+0x228>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d10f      	bne.n	8000d96 <HAL_ADC_Start+0x212>
				SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	689a      	ldr	r2, [r3, #8]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f042 0204 	orr.w	r2, r2, #4
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	e006      	b.n	8000d96 <HAL_ADC_Start+0x212>
			}
		} else {
			/* Process unlocked */
			__HAL_UNLOCK(hadc);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000d90:	e001      	b.n	8000d96 <HAL_ADC_Start+0x212>
		}
	} else {
		tmp_hal_status = HAL_BUSY;
 8000d92:	2302      	movs	r3, #2
 8000d94:	73fb      	strb	r3, [r7, #15]
	}

	/* Return function status */
	return tmp_hal_status;
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	50000100 	.word	0x50000100
 8000da4:	50000300 	.word	0x50000300
 8000da8:	50000700 	.word	0x50000700
 8000dac:	50000400 	.word	0x50000400

08000db0 <HAL_ADC_PollForConversion>:
 * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
 *         checked and cleared depending on autodelay status (bit AUTDLY).     
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc,
		uint32_t Timeout) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
	uint32_t tickstart;
	uint32_t tmp_Flag_EOC;
	ADC_Common_TypeDef *tmpADC_Common;
	uint32_t tmp_cfgr = 0x0U;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]

	/* Check the parameters */
	assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

	/* If end of conversion selected to end of sequence */
	if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV) {
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	2b08      	cmp	r3, #8
 8000dc4:	d102      	bne.n	8000dcc <HAL_ADC_PollForConversion+0x1c>
		tmp_Flag_EOC = ADC_FLAG_EOS;
 8000dc6:	2308      	movs	r3, #8
 8000dc8:	617b      	str	r3, [r7, #20]
 8000dca:	e03a      	b.n	8000e42 <HAL_ADC_PollForConversion+0x92>
		/* ADC configured in DMA mode and and polling for end of each conversion. */

		/* Pointer to the common control register to which is belonging hadc      */
		/* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
		/* control registers)                                                     */
		tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000dd4:	d004      	beq.n	8000de0 <HAL_ADC_PollForConversion+0x30>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a72      	ldr	r2, [pc, #456]	; (8000fa4 <HAL_ADC_PollForConversion+0x1f4>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d101      	bne.n	8000de4 <HAL_ADC_PollForConversion+0x34>
 8000de0:	4b71      	ldr	r3, [pc, #452]	; (8000fa8 <HAL_ADC_PollForConversion+0x1f8>)
 8000de2:	e000      	b.n	8000de6 <HAL_ADC_PollForConversion+0x36>
 8000de4:	4b71      	ldr	r3, [pc, #452]	; (8000fac <HAL_ADC_PollForConversion+0x1fc>)
 8000de6:	60fb      	str	r3, [r7, #12]

		/* Check DMA configuration, depending on MultiMode set or not */
		if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT) {
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	f003 031f 	and.w	r3, r3, #31
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d112      	bne.n	8000e1a <HAL_ADC_PollForConversion+0x6a>
			if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN)) {
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d11d      	bne.n	8000e3e <HAL_ADC_PollForConversion+0x8e>
				/* Update ADC state machine to error */
				SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	f043 0220 	orr.w	r2, r3, #32
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	641a      	str	r2, [r3, #64]	; 0x40

				/* Process unlocked */
				__HAL_UNLOCK(hadc);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2200      	movs	r2, #0
 8000e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

				return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e0bf      	b.n	8000f9a <HAL_ADC_PollForConversion+0x1ea>
			}
		} else {
			/* MultiMode is enabled, Common Control Register MDMA bits must be checked */
			if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET) {
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d00b      	beq.n	8000e3e <HAL_ADC_PollForConversion+0x8e>
				/* Update ADC state machine to error */
				SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	f043 0220 	orr.w	r2, r3, #32
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	641a      	str	r2, [r3, #64]	; 0x40

				/* Process unlocked */
				__HAL_UNLOCK(hadc);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2200      	movs	r2, #0
 8000e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

				return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e0ad      	b.n	8000f9a <HAL_ADC_PollForConversion+0x1ea>
			}
		}

		tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000e3e:	230c      	movs	r3, #12
 8000e40:	617b      	str	r3, [r7, #20]
	}

	/* Get relevant register CFGR in ADC instance of ADC master or slave      */
	/* in function of multimode state (for devices with multimode             */
	/* available).                                                            */
	if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)) {
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e4a:	d004      	beq.n	8000e56 <HAL_ADC_PollForConversion+0xa6>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a54      	ldr	r2, [pc, #336]	; (8000fa4 <HAL_ADC_PollForConversion+0x1f4>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d106      	bne.n	8000e64 <HAL_ADC_PollForConversion+0xb4>
 8000e56:	4b54      	ldr	r3, [pc, #336]	; (8000fa8 <HAL_ADC_PollForConversion+0x1f8>)
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	f003 031f 	and.w	r3, r3, #31
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d010      	beq.n	8000e84 <HAL_ADC_PollForConversion+0xd4>
 8000e62:	e005      	b.n	8000e70 <HAL_ADC_PollForConversion+0xc0>
 8000e64:	4b51      	ldr	r3, [pc, #324]	; (8000fac <HAL_ADC_PollForConversion+0x1fc>)
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	f003 031f 	and.w	r3, r3, #31
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d009      	beq.n	8000e84 <HAL_ADC_PollForConversion+0xd4>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e78:	d004      	beq.n	8000e84 <HAL_ADC_PollForConversion+0xd4>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a4c      	ldr	r2, [pc, #304]	; (8000fb0 <HAL_ADC_PollForConversion+0x200>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d104      	bne.n	8000e8e <HAL_ADC_PollForConversion+0xde>
		tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	68db      	ldr	r3, [r3, #12]
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	e00f      	b.n	8000eae <HAL_ADC_PollForConversion+0xfe>
	} else {
		tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e96:	d004      	beq.n	8000ea2 <HAL_ADC_PollForConversion+0xf2>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a41      	ldr	r2, [pc, #260]	; (8000fa4 <HAL_ADC_PollForConversion+0x1f4>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d102      	bne.n	8000ea8 <HAL_ADC_PollForConversion+0xf8>
 8000ea2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ea6:	e000      	b.n	8000eaa <HAL_ADC_PollForConversion+0xfa>
 8000ea8:	4b41      	ldr	r3, [pc, #260]	; (8000fb0 <HAL_ADC_PollForConversion+0x200>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	613b      	str	r3, [r7, #16]
	}

	/* Get tick count */
	tickstart = HAL_GetTick();
 8000eae:	f7ff fc63 	bl	8000778 <HAL_GetTick>
 8000eb2:	60b8      	str	r0, [r7, #8]

	/* Wait until End of Conversion or End of Sequence flag is raised */
	while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC)) {
 8000eb4:	e021      	b.n	8000efa <HAL_ADC_PollForConversion+0x14a>
		/* Check if timeout is disabled (set to infinite wait) */
		if (Timeout != HAL_MAX_DELAY) {
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ebc:	d01d      	beq.n	8000efa <HAL_ADC_PollForConversion+0x14a>
			if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout)) {
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d007      	beq.n	8000ed4 <HAL_ADC_PollForConversion+0x124>
 8000ec4:	f7ff fc58 	bl	8000778 <HAL_GetTick>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	683a      	ldr	r2, [r7, #0]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d212      	bcs.n	8000efa <HAL_ADC_PollForConversion+0x14a>
				/* New check to avoid false timeout detection in case of preemption */
				if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC)) {
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	4013      	ands	r3, r2
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d10b      	bne.n	8000efa <HAL_ADC_PollForConversion+0x14a>
					/* Update ADC state machine to timeout */
					SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	f043 0204 	orr.w	r2, r3, #4
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	641a      	str	r2, [r3, #64]	; 0x40

					/* Process unlocked */
					__HAL_UNLOCK(hadc);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

					return HAL_TIMEOUT;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e04f      	b.n	8000f9a <HAL_ADC_PollForConversion+0x1ea>
	while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC)) {
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	4013      	ands	r3, r2
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d0d6      	beq.n	8000eb6 <HAL_ADC_PollForConversion+0x106>
			}
		}
	}

	/* Update ADC state machine */
	SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	641a      	str	r2, [r3, #64]	; 0x40

	/* Determine whether any further conversion upcoming on group regular       */
	/* by external trigger, continuous mode or scan sequence on going.          */
	if (ADC_IS_SOFTWARE_START_REGULAR(hadc)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d131      	bne.n	8000f86 <HAL_ADC_PollForConversion+0x1d6>
			&& (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)) {
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d12c      	bne.n	8000f86 <HAL_ADC_PollForConversion+0x1d6>
		/* If End of Sequence is reached, disable interrupts */
		if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS)) {
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f003 0308 	and.w	r3, r3, #8
 8000f36:	2b08      	cmp	r3, #8
 8000f38:	d125      	bne.n	8000f86 <HAL_ADC_PollForConversion+0x1d6>
			/* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
			/* ADSTART==0 (no conversion on going)                                  */
			if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) {
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	f003 0304 	and.w	r3, r3, #4
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d112      	bne.n	8000f6e <HAL_ADC_PollForConversion+0x1be>
				/* Set ADC state */
				CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	641a      	str	r2, [r3, #64]	; 0x40

				if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY)) {
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d112      	bne.n	8000f86 <HAL_ADC_PollForConversion+0x1d6>
					SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f64:	f043 0201 	orr.w	r2, r3, #1
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	641a      	str	r2, [r3, #64]	; 0x40
 8000f6c:	e00b      	b.n	8000f86 <HAL_ADC_PollForConversion+0x1d6>
				}
			} else {
				/* Change ADC state to error state */
				SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	f043 0220 	orr.w	r2, r3, #32
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	641a      	str	r2, [r3, #64]	; 0x40

				/* Set ADC error code to ADC IP internal error */
				SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7e:	f043 0201 	orr.w	r2, r3, #1
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	645a      	str	r2, [r3, #68]	; 0x44
	}

	/* Clear end of conversion flag of regular group if low power feature       */
	/* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
	/* until data register is read using function HAL_ADC_GetValue().           */
	if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET) {
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d103      	bne.n	8000f98 <HAL_ADC_PollForConversion+0x1e8>
		/* Clear regular group conversion flag */
		/* (EOC or EOS depending on HAL ADC initialization parameter) */
		__HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	697a      	ldr	r2, [r7, #20]
 8000f96:	601a      	str	r2, [r3, #0]
	}

	/* Return ADC state */
	return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3718      	adds	r7, #24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	50000100 	.word	0x50000100
 8000fa8:	50000300 	.word	0x50000300
 8000fac:	50000700 	.word	0x50000700
 8000fb0:	50000400 	.word	0x50000400

08000fb4 <HAL_ADC_GetValue>:
 *         model polling: @ref HAL_ADC_PollForConversion() 
 *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
 * @param  hadc ADC handle
 * @retval ADC group regular conversion data
 */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc) {
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]

	/* Note: ADC flag EOC is not cleared here by software because               */
	/*       automatically cleared by hardware when reading register DR.        */

	/* Return ADC converted value */
	return hadc->Instance->DR;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <HAL_ADCEx_Calibration_Start>:
 *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
 *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc,
		uint32_t SingleDiff) {
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b084      	sub	sp, #16
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
 8000fd6:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	73fb      	strb	r3, [r7, #15]
	/* Check the parameters */
	assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
	assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

	/* Process locked */
	__HAL_LOCK(hadc);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d101      	bne.n	8000fea <HAL_ADCEx_Calibration_Start+0x1c>
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	e05f      	b.n	80010aa <HAL_ADCEx_Calibration_Start+0xdc>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2201      	movs	r2, #1
 8000fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	/* Calibration prerequisite: ADC must be disabled. */

	/* Disable the ADC (if not already disabled) */
	tmp_hal_status = ADC_Disable(hadc);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f000 fca0 	bl	8001938 <ADC_Disable>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	73fb      	strb	r3, [r7, #15]

	/* Check if ADC is effectively disabled */
	if (tmp_hal_status == HAL_OK) {
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d14e      	bne.n	80010a0 <HAL_ADCEx_Calibration_Start+0xd2>
		/* Change ADC state */
		hadc->State = HAL_ADC_STATE_READY;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2201      	movs	r2, #1
 8001006:	641a      	str	r2, [r3, #64]	; 0x40

		/* Select calibration mode single ended or differential ended */
		hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	689a      	ldr	r2, [r3, #8]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001016:	609a      	str	r2, [r3, #8]
		if (SingleDiff == ADC_DIFFERENTIAL_ENDED) {
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d107      	bne.n	800102e <HAL_ADCEx_Calibration_Start+0x60>
			hadc->Instance->CR |= ADC_CR_ADCALDIF;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800102c:	609a      	str	r2, [r3, #8]
		}

		/* Start ADC calibration */
		hadc->Instance->CR |= ADC_CR_ADCAL;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	689a      	ldr	r2, [r3, #8]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800103c:	609a      	str	r2, [r3, #8]

		tickstart = HAL_GetTick();
 800103e:	f7ff fb9b 	bl	8000778 <HAL_GetTick>
 8001042:	60b8      	str	r0, [r7, #8]

		/* Wait for calibration completion */
		while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL)) {
 8001044:	e01c      	b.n	8001080 <HAL_ADCEx_Calibration_Start+0xb2>
			if ((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT) {
 8001046:	f7ff fb97 	bl	8000778 <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b0a      	cmp	r3, #10
 8001052:	d915      	bls.n	8001080 <HAL_ADCEx_Calibration_Start+0xb2>
				/* New check to avoid false timeout detection in case of preemption */
				if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL)) {
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800105e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001062:	d10d      	bne.n	8001080 <HAL_ADCEx_Calibration_Start+0xb2>
					/* Update ADC state machine to error */
					ADC_STATE_CLR_SET(hadc->State,
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001068:	f023 0312 	bic.w	r3, r3, #18
 800106c:	f043 0210 	orr.w	r2, r3, #16
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	641a      	str	r2, [r3, #64]	; 0x40
							HAL_ADC_STATE_BUSY_INTERNAL,
							HAL_ADC_STATE_ERROR_INTERNAL);

					/* Process unlocked */
					__HAL_UNLOCK(hadc);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

					return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e014      	b.n	80010aa <HAL_ADCEx_Calibration_Start+0xdc>
		while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL)) {
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800108a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800108e:	d0da      	beq.n	8001046 <HAL_ADCEx_Calibration_Start+0x78>
				}
			}
		}

		/* Set ADC state */
		ADC_STATE_CLR_SET(hadc->State,
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	f023 0303 	bic.w	r3, r3, #3
 8001098:	f043 0201 	orr.w	r2, r3, #1
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	641a      	str	r2, [r3, #64]	; 0x40
				HAL_ADC_STATE_BUSY_INTERNAL,
				HAL_ADC_STATE_READY);
	}

	/* Process unlocked */
	__HAL_UNLOCK(hadc);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	/* Return function status */
	return tmp_hal_status;
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <HAL_ADC_ConfigChannel>:
 * @param  hadc ADC handle
 * @param  sConfig Structure ADC channel for regular group.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc,
		ADC_ChannelConfTypeDef *sConfig) {
 80010b4:	b480      	push	{r7}
 80010b6:	b09b      	sub	sp, #108	; 0x6c
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010be:	2300      	movs	r3, #0
 80010c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	ADC_Common_TypeDef *tmpADC_Common;
	ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
	uint32_t tmpOffsetShifted;
	__IO uint32_t wait_loop_index = 0U;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60bb      	str	r3, [r7, #8]
	} else {
		assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
	}

	/* Process locked */
	__HAL_LOCK(hadc);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d101      	bne.n	80010d6 <HAL_ADC_ConfigChannel+0x22>
 80010d2:	2302      	movs	r3, #2
 80010d4:	e2ca      	b.n	800166c <HAL_ADC_ConfigChannel+0x5b8>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2201      	movs	r2, #1
 80010da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	/* Parameters update conditioned to ADC state:                              */
	/* Parameters that can be updated when ADC is disabled or enabled without   */
	/* conversion on going on regular group:                                    */
	/*  - Channel number                                                        */
	/*  - Channel rank                                                          */
	if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) {
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f003 0304 	and.w	r3, r3, #4
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f040 82ae 	bne.w	800164a <HAL_ADC_ConfigChannel+0x596>
		/* Regular sequence configuration */
		/* For Rank 1 to 4U */
		if (sConfig->Rank < 5U) {
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	d81c      	bhi.n	8001130 <HAL_ADC_ConfigChannel+0x7c>
			MODIFY_REG(hadc->Instance->SQR1,
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	4613      	mov	r3, r2
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	4413      	add	r3, r2
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	461a      	mov	r2, r3
 800110a:	231f      	movs	r3, #31
 800110c:	4093      	lsls	r3, r2
 800110e:	43db      	mvns	r3, r3
 8001110:	4019      	ands	r1, r3
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	6818      	ldr	r0, [r3, #0]
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	4613      	mov	r3, r2
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	4413      	add	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	fa00 f203 	lsl.w	r2, r0, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	430a      	orrs	r2, r1
 800112c:	631a      	str	r2, [r3, #48]	; 0x30
 800112e:	e063      	b.n	80011f8 <HAL_ADC_ConfigChannel+0x144>
					ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank),
					ADC_SQR1_RK(sConfig->Channel, sConfig->Rank));
		}
		/* For Rank 5 to 9U */
		else if (sConfig->Rank < 10U) {
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	2b09      	cmp	r3, #9
 8001136:	d81e      	bhi.n	8001176 <HAL_ADC_ConfigChannel+0xc2>
			MODIFY_REG(hadc->Instance->SQR2,
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685a      	ldr	r2, [r3, #4]
 8001142:	4613      	mov	r3, r2
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	4413      	add	r3, r2
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	3b1e      	subs	r3, #30
 800114c:	221f      	movs	r2, #31
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	4019      	ands	r1, r3
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	6818      	ldr	r0, [r3, #0]
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685a      	ldr	r2, [r3, #4]
 800115e:	4613      	mov	r3, r2
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	4413      	add	r3, r2
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	3b1e      	subs	r3, #30
 8001168:	fa00 f203 	lsl.w	r2, r0, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	430a      	orrs	r2, r1
 8001172:	635a      	str	r2, [r3, #52]	; 0x34
 8001174:	e040      	b.n	80011f8 <HAL_ADC_ConfigChannel+0x144>
					ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank),
					ADC_SQR2_RK(sConfig->Channel, sConfig->Rank));
		}
		/* For Rank 10 to 14U */
		else if (sConfig->Rank < 15U) {
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2b0e      	cmp	r3, #14
 800117c:	d81e      	bhi.n	80011bc <HAL_ADC_ConfigChannel+0x108>
			MODIFY_REG(hadc->Instance->SQR3,
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685a      	ldr	r2, [r3, #4]
 8001188:	4613      	mov	r3, r2
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	4413      	add	r3, r2
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	3b3c      	subs	r3, #60	; 0x3c
 8001192:	221f      	movs	r2, #31
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	4019      	ands	r1, r3
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	6818      	ldr	r0, [r3, #0]
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685a      	ldr	r2, [r3, #4]
 80011a4:	4613      	mov	r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	4413      	add	r3, r2
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	3b3c      	subs	r3, #60	; 0x3c
 80011ae:	fa00 f203 	lsl.w	r2, r0, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	430a      	orrs	r2, r1
 80011b8:	639a      	str	r2, [r3, #56]	; 0x38
 80011ba:	e01d      	b.n	80011f8 <HAL_ADC_ConfigChannel+0x144>
					ADC_SQR3_RK(ADC_SQR3_SQ10, sConfig->Rank),
					ADC_SQR3_RK(sConfig->Channel, sConfig->Rank));
		}
		/* For Rank 15 to 16U */
		else {
			MODIFY_REG(hadc->Instance->SQR4,
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	4613      	mov	r3, r2
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	4413      	add	r3, r2
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	3b5a      	subs	r3, #90	; 0x5a
 80011d0:	221f      	movs	r2, #31
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	4019      	ands	r1, r3
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	6818      	ldr	r0, [r3, #0]
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	4613      	mov	r3, r2
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	4413      	add	r3, r2
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	3b5a      	subs	r3, #90	; 0x5a
 80011ec:	fa00 f203 	lsl.w	r2, r0, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	430a      	orrs	r2, r1
 80011f6:	63da      	str	r2, [r3, #60]	; 0x3c
		/* Parameters update conditioned to ADC state:                              */
		/* Parameters that can be updated when ADC is disabled or enabled without   */
		/* conversion on going on regular group:                                    */
		/*  - Channel sampling time                                                 */
		/*  - Channel offset                                                        */
		if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET) {
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 030c 	and.w	r3, r3, #12
 8001202:	2b00      	cmp	r3, #0
 8001204:	f040 80e5 	bne.w	80013d2 <HAL_ADC_ConfigChannel+0x31e>
			/* Channel sampling time configuration */
			/* For channels 10 to 18U */
			if (sConfig->Channel >= ADC_CHANNEL_10) {
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b09      	cmp	r3, #9
 800120e:	d91c      	bls.n	800124a <HAL_ADC_ConfigChannel+0x196>
				MODIFY_REG(hadc->Instance->SMPR2,
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	6999      	ldr	r1, [r3, #24]
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	4613      	mov	r3, r2
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	4413      	add	r3, r2
 8001220:	3b1e      	subs	r3, #30
 8001222:	2207      	movs	r2, #7
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	4019      	ands	r1, r3
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	6898      	ldr	r0, [r3, #8]
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4613      	mov	r3, r2
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	4413      	add	r3, r2
 800123a:	3b1e      	subs	r3, #30
 800123c:	fa00 f203 	lsl.w	r2, r0, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	430a      	orrs	r2, r1
 8001246:	619a      	str	r2, [r3, #24]
 8001248:	e019      	b.n	800127e <HAL_ADC_ConfigChannel+0x1ca>
						ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
						ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel));
			} else /* For channels 1 to 9U */
			{
				MODIFY_REG(hadc->Instance->SMPR1,
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	6959      	ldr	r1, [r3, #20]
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4613      	mov	r3, r2
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	4413      	add	r3, r2
 800125a:	2207      	movs	r2, #7
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	4019      	ands	r1, r3
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	6898      	ldr	r0, [r3, #8]
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4613      	mov	r3, r2
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	4413      	add	r3, r2
 8001272:	fa00 f203 	lsl.w	r2, r0, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	430a      	orrs	r2, r1
 800127c:	615a      	str	r2, [r3, #20]
			/* Configure the offset: offset enable/disable, channel, offset value */

			/* Shift the offset in function of the selected ADC resolution. */
			/* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
			/* to 0.                                                                  */
			tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc,
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	695a      	ldr	r2, [r3, #20]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	08db      	lsrs	r3, r3, #3
 800128a:	f003 0303 	and.w	r3, r3, #3
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	663b      	str	r3, [r7, #96]	; 0x60

			/* Configure the selected offset register:                                */
			/* - Enable offset                                                        */
			/* - Set channel number                                                   */
			/* - Set offset value                                                     */
			switch (sConfig->OffsetNumber) {
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	3b01      	subs	r3, #1
 800129c:	2b03      	cmp	r3, #3
 800129e:	d84f      	bhi.n	8001340 <HAL_ADC_ConfigChannel+0x28c>
 80012a0:	a201      	add	r2, pc, #4	; (adr r2, 80012a8 <HAL_ADC_ConfigChannel+0x1f4>)
 80012a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a6:	bf00      	nop
 80012a8:	080012b9 	.word	0x080012b9
 80012ac:	080012db 	.word	0x080012db
 80012b0:	080012fd 	.word	0x080012fd
 80012b4:	0800131f 	.word	0x0800131f
			case ADC_OFFSET_1:
				/* Configure offset register 1U */
				MODIFY_REG(hadc->Instance->OFR1,
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012be:	4b9a      	ldr	r3, [pc, #616]	; (8001528 <HAL_ADC_ConfigChannel+0x474>)
 80012c0:	4013      	ands	r3, r2
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	6812      	ldr	r2, [r2, #0]
 80012c6:	0691      	lsls	r1, r2, #26
 80012c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012ca:	430a      	orrs	r2, r1
 80012cc:	431a      	orrs	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80012d6:	661a      	str	r2, [r3, #96]	; 0x60
						ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
						ADC_OFR1_OFFSET1_EN | ADC_OFR_CHANNEL(sConfig->Channel) | tmpOffsetShifted);
				break;
 80012d8:	e07e      	b.n	80013d8 <HAL_ADC_ConfigChannel+0x324>

			case ADC_OFFSET_2:
				/* Configure offset register 2U */
				MODIFY_REG(hadc->Instance->OFR2,
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80012e0:	4b91      	ldr	r3, [pc, #580]	; (8001528 <HAL_ADC_ConfigChannel+0x474>)
 80012e2:	4013      	ands	r3, r2
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	6812      	ldr	r2, [r2, #0]
 80012e8:	0691      	lsls	r1, r2, #26
 80012ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012ec:	430a      	orrs	r2, r1
 80012ee:	431a      	orrs	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80012f8:	665a      	str	r2, [r3, #100]	; 0x64
						ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2,
						ADC_OFR2_OFFSET2_EN | ADC_OFR_CHANNEL(sConfig->Channel) | tmpOffsetShifted);
				break;
 80012fa:	e06d      	b.n	80013d8 <HAL_ADC_ConfigChannel+0x324>

			case ADC_OFFSET_3:
				/* Configure offset register 3U */
				MODIFY_REG(hadc->Instance->OFR3,
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001302:	4b89      	ldr	r3, [pc, #548]	; (8001528 <HAL_ADC_ConfigChannel+0x474>)
 8001304:	4013      	ands	r3, r2
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	6812      	ldr	r2, [r2, #0]
 800130a:	0691      	lsls	r1, r2, #26
 800130c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800130e:	430a      	orrs	r2, r1
 8001310:	431a      	orrs	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800131a:	669a      	str	r2, [r3, #104]	; 0x68
						ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3,
						ADC_OFR3_OFFSET3_EN | ADC_OFR_CHANNEL(sConfig->Channel) | tmpOffsetShifted);
				break;
 800131c:	e05c      	b.n	80013d8 <HAL_ADC_ConfigChannel+0x324>

			case ADC_OFFSET_4:
				/* Configure offset register 4U */
				MODIFY_REG(hadc->Instance->OFR4,
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001324:	4b80      	ldr	r3, [pc, #512]	; (8001528 <HAL_ADC_ConfigChannel+0x474>)
 8001326:	4013      	ands	r3, r2
 8001328:	683a      	ldr	r2, [r7, #0]
 800132a:	6812      	ldr	r2, [r2, #0]
 800132c:	0691      	lsls	r1, r2, #26
 800132e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001330:	430a      	orrs	r2, r1
 8001332:	431a      	orrs	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800133c:	66da      	str	r2, [r3, #108]	; 0x6c
						ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4,
						ADC_OFR4_OFFSET4_EN | ADC_OFR_CHANNEL(sConfig->Channel) | tmpOffsetShifted);
				break;
 800133e:	e04b      	b.n	80013d8 <HAL_ADC_ConfigChannel+0x324>

				/* Case ADC_OFFSET_NONE */
			default:
				/* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
				/* enabled. If this is the case, offset OFRx is disabled.                 */
				if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001346:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
						== ADC_OFR_CHANNEL(sConfig->Channel)) {
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	069b      	lsls	r3, r3, #26
				if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH)
 8001350:	429a      	cmp	r2, r3
 8001352:	d107      	bne.n	8001364 <HAL_ADC_ConfigChannel+0x2b0>
					/* Disable offset OFR1*/
					CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001362:	661a      	str	r2, [r3, #96]	; 0x60
				}
				if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800136a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
						== ADC_OFR_CHANNEL(sConfig->Channel)) {
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	069b      	lsls	r3, r3, #26
				if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH)
 8001374:	429a      	cmp	r2, r3
 8001376:	d107      	bne.n	8001388 <HAL_ADC_ConfigChannel+0x2d4>
					/* Disable offset OFR2*/
					CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001386:	665a      	str	r2, [r3, #100]	; 0x64
				}
				if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800138e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
						== ADC_OFR_CHANNEL(sConfig->Channel)) {
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	069b      	lsls	r3, r3, #26
				if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH)
 8001398:	429a      	cmp	r2, r3
 800139a:	d107      	bne.n	80013ac <HAL_ADC_ConfigChannel+0x2f8>
					/* Disable offset OFR3*/
					CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80013aa:	669a      	str	r2, [r3, #104]	; 0x68
				}
				if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80013b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
						== ADC_OFR_CHANNEL(sConfig->Channel)) {
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	069b      	lsls	r3, r3, #26
				if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH)
 80013bc:	429a      	cmp	r2, r3
 80013be:	d10a      	bne.n	80013d6 <HAL_ADC_ConfigChannel+0x322>
					/* Disable offset OFR4*/
					CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80013ce:	66da      	str	r2, [r3, #108]	; 0x6c
				}
				break;
 80013d0:	e001      	b.n	80013d6 <HAL_ADC_ConfigChannel+0x322>
			}

		}
 80013d2:	bf00      	nop
 80013d4:	e000      	b.n	80013d8 <HAL_ADC_ConfigChannel+0x324>
				break;
 80013d6:	bf00      	nop

		/* Parameters update conditioned to ADC state:                              */
		/* Parameters that can be updated only when ADC is disabled:                */
		/*  - Single or differential mode                                           */
		/*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
		if (ADC_IS_ENABLE(hadc) == RESET) {
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d108      	bne.n	80013f8 <HAL_ADC_ConfigChannel+0x344>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d101      	bne.n	80013f8 <HAL_ADC_ConfigChannel+0x344>
 80013f4:	2301      	movs	r3, #1
 80013f6:	e000      	b.n	80013fa <HAL_ADC_ConfigChannel+0x346>
 80013f8:	2300      	movs	r3, #0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f040 8130 	bne.w	8001660 <HAL_ADC_ConfigChannel+0x5ac>
			/* Configuration of differential mode */
			if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED) {
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d00f      	beq.n	8001428 <HAL_ADC_ConfigChannel+0x374>
				/* Disable differential mode (default mode: single-ended) */
				CLEAR_BIT(hadc->Instance->DIFSEL,
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2201      	movs	r2, #1
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43da      	mvns	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	400a      	ands	r2, r1
 8001422:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001426:	e049      	b.n	80014bc <HAL_ADC_ConfigChannel+0x408>
						ADC_DIFSEL_CHANNEL(sConfig->Channel));
			} else {
				/* Enable differential mode */
				SET_BIT(hadc->Instance->DIFSEL,
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2201      	movs	r2, #1
 8001436:	409a      	lsls	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	430a      	orrs	r2, r1
 800143e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
						ADC_DIFSEL_CHANNEL(sConfig->Channel));

				/* Channel sampling time configuration (channel ADC_INx +1              */
				/* corresponding to differential negative input).                       */
				/* For channels 10 to 18U */
				if (sConfig->Channel >= ADC_CHANNEL_10) {
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b09      	cmp	r3, #9
 8001448:	d91c      	bls.n	8001484 <HAL_ADC_ConfigChannel+0x3d0>
					MODIFY_REG(hadc->Instance->SMPR2,
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6999      	ldr	r1, [r3, #24]
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4613      	mov	r3, r2
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	4413      	add	r3, r2
 800145a:	3b1b      	subs	r3, #27
 800145c:	2207      	movs	r2, #7
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43db      	mvns	r3, r3
 8001464:	4019      	ands	r1, r3
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	6898      	ldr	r0, [r3, #8]
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	4613      	mov	r3, r2
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	4413      	add	r3, r2
 8001474:	3b1b      	subs	r3, #27
 8001476:	fa00 f203 	lsl.w	r2, r0, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	430a      	orrs	r2, r1
 8001480:	619a      	str	r2, [r3, #24]
 8001482:	e01b      	b.n	80014bc <HAL_ADC_ConfigChannel+0x408>
							ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U),
							ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U));
				} else /* For channels 1 to 9U */
				{
					MODIFY_REG(hadc->Instance->SMPR1,
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6959      	ldr	r1, [r3, #20]
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	1c5a      	adds	r2, r3, #1
 8001490:	4613      	mov	r3, r2
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	4413      	add	r3, r2
 8001496:	2207      	movs	r2, #7
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	4019      	ands	r1, r3
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	6898      	ldr	r0, [r3, #8]
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	1c5a      	adds	r2, r3, #1
 80014aa:	4613      	mov	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	4413      	add	r3, r2
 80014b0:	fa00 f203 	lsl.w	r2, r0, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	430a      	orrs	r2, r1
 80014ba:	615a      	str	r2, [r3, #20]

			/* Configuration of common ADC parameters                                 */
			/* Pointer to the common control register to which is belonging hadc      */
			/* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
			/* control registers)                                                     */
			tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014c4:	d004      	beq.n	80014d0 <HAL_ADC_ConfigChannel+0x41c>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a18      	ldr	r2, [pc, #96]	; (800152c <HAL_ADC_ConfigChannel+0x478>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d101      	bne.n	80014d4 <HAL_ADC_ConfigChannel+0x420>
 80014d0:	4b17      	ldr	r3, [pc, #92]	; (8001530 <HAL_ADC_ConfigChannel+0x47c>)
 80014d2:	e000      	b.n	80014d6 <HAL_ADC_ConfigChannel+0x422>
 80014d4:	4b17      	ldr	r3, [pc, #92]	; (8001534 <HAL_ADC_ConfigChannel+0x480>)
 80014d6:	65fb      	str	r3, [r7, #92]	; 0x5c

			/* If the requested internal measurement path has already been enabled,   */
			/* bypass the configuration processing.                                   */
			if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b10      	cmp	r3, #16
 80014de:	d105      	bne.n	80014ec <HAL_ADC_ConfigChannel+0x438>
					&& (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN)))
 80014e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d015      	beq.n	8001518 <HAL_ADC_ConfigChannel+0x464>
					|| ((sConfig->Channel == ADC_CHANNEL_VBAT)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b11      	cmp	r3, #17
 80014f2:	d105      	bne.n	8001500 <HAL_ADC_ConfigChannel+0x44c>
							&& (HAL_IS_BIT_CLR(tmpADC_Common->CCR,
 80014f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d00b      	beq.n	8001518 <HAL_ADC_ConfigChannel+0x464>
									ADC_CCR_VBATEN)))
					|| ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b12      	cmp	r3, #18
 8001506:	f040 80ab 	bne.w	8001660 <HAL_ADC_ConfigChannel+0x5ac>
							&& (HAL_IS_BIT_CLR(tmpADC_Common->CCR,
 800150a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001512:	2b00      	cmp	r3, #0
 8001514:	f040 80a4 	bne.w	8001660 <HAL_ADC_ConfigChannel+0x5ac>
									ADC_CCR_VREFEN)))) {
				/* Configuration of common ADC parameters (continuation)                */
				/* Set handle of the other ADC sharing the same common register         */
				ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001520:	d10a      	bne.n	8001538 <HAL_ADC_ConfigChannel+0x484>
 8001522:	4b02      	ldr	r3, [pc, #8]	; (800152c <HAL_ADC_ConfigChannel+0x478>)
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	e022      	b.n	800156e <HAL_ADC_ConfigChannel+0x4ba>
 8001528:	83fff000 	.word	0x83fff000
 800152c:	50000100 	.word	0x50000100
 8001530:	50000300 	.word	0x50000300
 8001534:	50000700 	.word	0x50000700
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a4e      	ldr	r2, [pc, #312]	; (8001678 <HAL_ADC_ConfigChannel+0x5c4>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d103      	bne.n	800154a <HAL_ADC_ConfigChannel+0x496>
 8001542:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	e011      	b.n	800156e <HAL_ADC_ConfigChannel+0x4ba>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a4b      	ldr	r2, [pc, #300]	; (800167c <HAL_ADC_ConfigChannel+0x5c8>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d102      	bne.n	800155a <HAL_ADC_ConfigChannel+0x4a6>
 8001554:	4b4a      	ldr	r3, [pc, #296]	; (8001680 <HAL_ADC_ConfigChannel+0x5cc>)
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	e009      	b.n	800156e <HAL_ADC_ConfigChannel+0x4ba>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a48      	ldr	r2, [pc, #288]	; (8001680 <HAL_ADC_ConfigChannel+0x5cc>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d102      	bne.n	800156a <HAL_ADC_ConfigChannel+0x4b6>
 8001564:	4b45      	ldr	r3, [pc, #276]	; (800167c <HAL_ADC_ConfigChannel+0x5c8>)
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	e001      	b.n	800156e <HAL_ADC_ConfigChannel+0x4ba>
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]

				/* Software is allowed to change common parameters only when all ADCs   */
				/* of the common group are disabled.                                    */
				if ((ADC_IS_ENABLE(hadc) == RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f003 0303 	and.w	r3, r3, #3
 8001578:	2b01      	cmp	r3, #1
 800157a:	d108      	bne.n	800158e <HAL_ADC_ConfigChannel+0x4da>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b01      	cmp	r3, #1
 8001588:	d101      	bne.n	800158e <HAL_ADC_ConfigChannel+0x4da>
 800158a:	2301      	movs	r3, #1
 800158c:	e000      	b.n	8001590 <HAL_ADC_ConfigChannel+0x4dc>
 800158e:	2300      	movs	r3, #0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d150      	bne.n	8001636 <HAL_ADC_ConfigChannel+0x582>
						&& ((tmphadcSharingSameCommonRegister.Instance == NULL)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d010      	beq.n	80015bc <HAL_ADC_ConfigChannel+0x508>
								|| (ADC_IS_ENABLE(
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d107      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x502>
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d101      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x502>
 80015b2:	2301      	movs	r3, #1
 80015b4:	e000      	b.n	80015b8 <HAL_ADC_ConfigChannel+0x504>
 80015b6:	2300      	movs	r3, #0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d13c      	bne.n	8001636 <HAL_ADC_ConfigChannel+0x582>
										&tmphadcSharingSameCommonRegister)
										== RESET))) {
					/* If Channel_16 is selected, enable Temp. sensor measurement path    */
					/* Note: Temp. sensor internal channels available on ADC1 only        */
					if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b10      	cmp	r3, #16
 80015c2:	d11d      	bne.n	8001600 <HAL_ADC_ConfigChannel+0x54c>
							&& (hadc->Instance == ADC1)) {
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015cc:	d118      	bne.n	8001600 <HAL_ADC_ConfigChannel+0x54c>
						SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80015ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015d8:	609a      	str	r2, [r3, #8]

						/* Delay for temperature sensor stabilization time */
						/* Compute number of CPU cycles to wait for */
						wait_loop_index = (ADC_TEMPSENSOR_DELAY_US
								* (SystemCoreClock / 1000000U));
 80015da:	4b2a      	ldr	r3, [pc, #168]	; (8001684 <HAL_ADC_ConfigChannel+0x5d0>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a2a      	ldr	r2, [pc, #168]	; (8001688 <HAL_ADC_ConfigChannel+0x5d4>)
 80015e0:	fba2 2303 	umull	r2, r3, r2, r3
 80015e4:	0c9a      	lsrs	r2, r3, #18
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	005b      	lsls	r3, r3, #1
						wait_loop_index = (ADC_TEMPSENSOR_DELAY_US
 80015ee:	60bb      	str	r3, [r7, #8]
						while (wait_loop_index != 0U) {
 80015f0:	e002      	b.n	80015f8 <HAL_ADC_ConfigChannel+0x544>
							wait_loop_index--;
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	3b01      	subs	r3, #1
 80015f6:	60bb      	str	r3, [r7, #8]
						while (wait_loop_index != 0U) {
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f9      	bne.n	80015f2 <HAL_ADC_ConfigChannel+0x53e>
					if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015fe:	e02e      	b.n	800165e <HAL_ADC_ConfigChannel+0x5aa>
						}
					}
					/* If Channel_17 is selected, enable VBAT measurement path            */
					/* Note: VBAT internal channels available on ADC1 only                */
					else if ((sConfig->Channel == ADC_CHANNEL_VBAT)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b11      	cmp	r3, #17
 8001606:	d10b      	bne.n	8001620 <HAL_ADC_ConfigChannel+0x56c>
							&& (hadc->Instance == ADC1)) {
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001610:	d106      	bne.n	8001620 <HAL_ADC_ConfigChannel+0x56c>
						SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800161a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800161c:	609a      	str	r2, [r3, #8]
					if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800161e:	e01e      	b.n	800165e <HAL_ADC_ConfigChannel+0x5aa>
					}
					/* If Channel_18 is selected, enable VREFINT measurement path         */
					/* Note: VrefInt internal channels available on all ADCs, but only    */
					/*       one ADC is allowed to be connected to VrefInt at the same    */
					/*       time.                                                        */
					else if (sConfig->Channel == ADC_CHANNEL_VREFINT) {
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b12      	cmp	r3, #18
 8001626:	d11a      	bne.n	800165e <HAL_ADC_ConfigChannel+0x5aa>
						SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001628:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001630:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001632:	609a      	str	r2, [r3, #8]
					if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001634:	e013      	b.n	800165e <HAL_ADC_ConfigChannel+0x5aa>
				/* If the requested internal measurement path has already been          */
				/* enabled and other ADC of the common group are enabled, internal      */
				/* measurement paths cannot be enabled.                                 */
				else {
					/* Update ADC state machine to error */
					SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	f043 0220 	orr.w	r2, r3, #32
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	641a      	str	r2, [r3, #64]	; 0x40

					tmp_hal_status = HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001648:	e00a      	b.n	8001660 <HAL_ADC_ConfigChannel+0x5ac>
	/* If a conversion is on going on regular group, no update on regular       */
	/* channel could be done on neither of the channel configuration structure  */
	/* parameters.                                                              */
	else {
		/* Update ADC state machine to error */
		SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f043 0220 	orr.w	r2, r3, #32
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	641a      	str	r2, [r3, #64]	; 0x40

		tmp_hal_status = HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800165c:	e000      	b.n	8001660 <HAL_ADC_ConfigChannel+0x5ac>
					if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800165e:	bf00      	nop
	}

	/* Process unlocked */
	__HAL_UNLOCK(hadc);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	/* Return function status */
	return tmp_hal_status;
 8001668:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800166c:	4618      	mov	r0, r3
 800166e:	376c      	adds	r7, #108	; 0x6c
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	50000100 	.word	0x50000100
 800167c:	50000400 	.word	0x50000400
 8001680:	50000500 	.word	0x50000500
 8001684:	20000000 	.word	0x20000000
 8001688:	431bde83 	.word	0x431bde83

0800168c <HAL_ADCEx_MultiModeConfigChannel>:
 * @param  hadc ADC handle
 * @param  multimode Structure of ADC multimode configuration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc,
		ADC_MultiModeTypeDef *multimode) {
 800168c:	b480      	push	{r7}
 800168e:	b099      	sub	sp, #100	; 0x64
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001696:	2300      	movs	r3, #0
 8001698:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
		assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
	}

	/* Set handle of the other ADC sharing the same common register             */
	ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016a4:	d102      	bne.n	80016ac <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80016a6:	4b6d      	ldr	r3, [pc, #436]	; (800185c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	e01a      	b.n	80016e2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a6a      	ldr	r2, [pc, #424]	; (800185c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d103      	bne.n	80016be <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80016b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	e011      	b.n	80016e2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a67      	ldr	r2, [pc, #412]	; (8001860 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d102      	bne.n	80016ce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80016c8:	4b66      	ldr	r3, [pc, #408]	; (8001864 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80016ca:	60bb      	str	r3, [r7, #8]
 80016cc:	e009      	b.n	80016e2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a64      	ldr	r2, [pc, #400]	; (8001864 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d102      	bne.n	80016de <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80016d8:	4b61      	ldr	r3, [pc, #388]	; (8001860 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80016da:	60bb      	str	r3, [r7, #8]
 80016dc:	e001      	b.n	80016e2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80016de:	2300      	movs	r3, #0
 80016e0:	60bb      	str	r3, [r7, #8]
	if (tmphadcSharingSameCommonRegister.Instance == NULL) {
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d101      	bne.n	80016ec <HAL_ADCEx_MultiModeConfigChannel+0x60>
		/* Return function status */
		return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e0b0      	b.n	800184e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
	}

	/* Process locked */
	__HAL_LOCK(hadc);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d101      	bne.n	80016fa <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80016f6:	2302      	movs	r3, #2
 80016f8:	e0a9      	b.n	800184e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2201      	movs	r2, #1
 80016fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	/* Parameters update conditioned to ADC state:                              */
	/* Parameters that can be updated when ADC is disabled or enabled without   */
	/* conversion on going on regular group:                                    */
	/*  - Multimode DMA configuration                                           */
	/*  - Multimode DMA mode                                                    */
	if ((ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b00      	cmp	r3, #0
 800170e:	f040 808d 	bne.w	800182c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
			&& (ADC_IS_CONVERSION_ONGOING_REGULAR(
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 0304 	and.w	r3, r3, #4
 800171a:	2b00      	cmp	r3, #0
 800171c:	f040 8086 	bne.w	800182c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
					&tmphadcSharingSameCommonRegister)
					== RESET)) {
		/* Pointer to the common control register to which is belonging hadc      */
		/* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
		/* control registers)                                                     */
		tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001728:	d004      	beq.n	8001734 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a4b      	ldr	r2, [pc, #300]	; (800185c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d101      	bne.n	8001738 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001734:	4b4c      	ldr	r3, [pc, #304]	; (8001868 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001736:	e000      	b.n	800173a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001738:	4b4c      	ldr	r3, [pc, #304]	; (800186c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800173a:	65bb      	str	r3, [r7, #88]	; 0x58

		/* If multimode is selected, configure all multimode parameters.          */
		/* Otherwise, reset multimode parameters (can be used in case of          */
		/* transition from multimode to independent mode).                        */
		if (multimode->Mode != ADC_MODE_INDEPENDENT) {
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d040      	beq.n	80017c6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
			/* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
			/* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
			/*  - DMA access mode                                                     */
			MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001744:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	6859      	ldr	r1, [r3, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001756:	035b      	lsls	r3, r3, #13
 8001758:	430b      	orrs	r3, r1
 800175a:	431a      	orrs	r2, r3
 800175c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800175e:	609a      	str	r2, [r3, #8]
			/*       parameters, their setting is bypassed without error reporting    */
			/*       (as it can be the expected behaviour in case of intended action  */
			/*       to update parameter above (which fulfills the ADC state          */
			/*       condition: no conversion on going on group regular)              */
			/*       on the fly).                                                     */
			if ((ADC_IS_ENABLE(hadc) == RESET)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	2b01      	cmp	r3, #1
 800176c:	d108      	bne.n	8001780 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	2b01      	cmp	r3, #1
 800177a:	d101      	bne.n	8001780 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800177c:	2301      	movs	r3, #1
 800177e:	e000      	b.n	8001782 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001780:	2300      	movs	r3, #0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d15c      	bne.n	8001840 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
					&& (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister)
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 0303 	and.w	r3, r3, #3
 800178e:	2b01      	cmp	r3, #1
 8001790:	d107      	bne.n	80017a2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b01      	cmp	r3, #1
 800179c:	d101      	bne.n	80017a2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80017a2:	2300      	movs	r3, #0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d14b      	bne.n	8001840 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
							== RESET)) {
				MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY,
 80017a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80017b0:	f023 030f 	bic.w	r3, r3, #15
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	6811      	ldr	r1, [r2, #0]
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	6892      	ldr	r2, [r2, #8]
 80017bc:	430a      	orrs	r2, r1
 80017be:	431a      	orrs	r2, r3
 80017c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017c2:	609a      	str	r2, [r3, #8]
		if (multimode->Mode != ADC_MODE_INDEPENDENT) {
 80017c4:	e03c      	b.n	8001840 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
						multimode->Mode | multimode->TwoSamplingDelay);
			}
		} else /* ADC_MODE_INDEPENDENT */
		{
			CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80017c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017d0:	609a      	str	r2, [r3, #8]

			/* Parameters that can be updated only when ADC is disabled:                */
			/*  - Multimode mode selection                                              */
			/*  - Multimode delay                                                       */
			if ((ADC_IS_ENABLE(hadc) == RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d108      	bne.n	80017f2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d101      	bne.n	80017f2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80017ee:	2301      	movs	r3, #1
 80017f0:	e000      	b.n	80017f4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80017f2:	2300      	movs	r3, #0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d123      	bne.n	8001840 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
					&& (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	2b01      	cmp	r3, #1
 8001802:	d107      	bne.n	8001814 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	2b01      	cmp	r3, #1
 800180e:	d101      	bne.n	8001814 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001810:	2301      	movs	r3, #1
 8001812:	e000      	b.n	8001816 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001814:	2300      	movs	r3, #0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d112      	bne.n	8001840 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
							== RESET)) {
				CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800181a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001822:	f023 030f 	bic.w	r3, r3, #15
 8001826:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001828:	6093      	str	r3, [r2, #8]
		if (multimode->Mode != ADC_MODE_INDEPENDENT) {
 800182a:	e009      	b.n	8001840 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
	}
	/* If one of the ADC sharing the same common group is enabled, no update    */
	/* could be done on neither of the multimode structure parameters.          */
	else {
		/* Update ADC state machine to error */
		SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001830:	f043 0220 	orr.w	r2, r3, #32
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	641a      	str	r2, [r3, #64]	; 0x40

		tmp_hal_status = HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800183e:	e000      	b.n	8001842 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
		if (multimode->Mode != ADC_MODE_INDEPENDENT) {
 8001840:	bf00      	nop
	}

	/* Process unlocked */
	__HAL_UNLOCK(hadc);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	/* Return function status */
	return tmp_hal_status;
 800184a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800184e:	4618      	mov	r0, r3
 8001850:	3764      	adds	r7, #100	; 0x64
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	50000100 	.word	0x50000100
 8001860:	50000400 	.word	0x50000400
 8001864:	50000500 	.word	0x50000500
 8001868:	50000300 	.word	0x50000300
 800186c:	50000700 	.word	0x50000700

08001870 <ADC_Enable>:
 * @note   Prerequisite condition to use this function: ADC must be disabled
 *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
 * @param  hadc ADC handle
 * @retval HAL status.
 */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc) {
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = 0U;
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]

	/* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
	/* enabling phase not yet completed: flag ADC ready not yet set).           */
	/* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
	/* causes: ADC clock not running, ...).                                     */
	if (ADC_IS_ENABLE(hadc) == RESET) {
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	2b01      	cmp	r3, #1
 8001888:	d108      	bne.n	800189c <ADC_Enable+0x2c>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	2b01      	cmp	r3, #1
 8001896:	d101      	bne.n	800189c <ADC_Enable+0x2c>
 8001898:	2301      	movs	r3, #1
 800189a:	e000      	b.n	800189e <ADC_Enable+0x2e>
 800189c:	2300      	movs	r3, #0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d143      	bne.n	800192a <ADC_Enable+0xba>
		/* Check if conditions to enable the ADC are fulfilled */
		if (ADC_ENABLING_CONDITIONS(hadc) == RESET) {
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	4b22      	ldr	r3, [pc, #136]	; (8001934 <ADC_Enable+0xc4>)
 80018aa:	4013      	ands	r3, r2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d00d      	beq.n	80018cc <ADC_Enable+0x5c>
			/* Update ADC state machine to error */
			SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b4:	f043 0210 	orr.w	r2, r3, #16
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	641a      	str	r2, [r3, #64]	; 0x40

			/* Set ADC error code to ADC IP internal error */
			SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c0:	f043 0201 	orr.w	r2, r3, #1
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	645a      	str	r2, [r3, #68]	; 0x44

			return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e02f      	b.n	800192c <ADC_Enable+0xbc>
		}

		/* Enable the ADC peripheral */
		__HAL_ADC_ENABLE(hadc);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	689a      	ldr	r2, [r3, #8]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f042 0201 	orr.w	r2, r2, #1
 80018da:	609a      	str	r2, [r3, #8]

		/* Wait for ADC effectively enabled */
		tickstart = HAL_GetTick();
 80018dc:	f7fe ff4c 	bl	8000778 <HAL_GetTick>
 80018e0:	60f8      	str	r0, [r7, #12]

		while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET) {
 80018e2:	e01b      	b.n	800191c <ADC_Enable+0xac>
			if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT) {
 80018e4:	f7fe ff48 	bl	8000778 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d914      	bls.n	800191c <ADC_Enable+0xac>
				/* New check to avoid false timeout detection in case of preemption */
				if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET) {
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d00d      	beq.n	800191c <ADC_Enable+0xac>
					/* Update ADC state machine to error */
					SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	f043 0210 	orr.w	r2, r3, #16
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	641a      	str	r2, [r3, #64]	; 0x40

					/* Set ADC error code to ADC IP internal error */
					SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001910:	f043 0201 	orr.w	r2, r3, #1
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	645a      	str	r2, [r3, #68]	; 0x44

					return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e007      	b.n	800192c <ADC_Enable+0xbc>
		while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET) {
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b01      	cmp	r3, #1
 8001928:	d1dc      	bne.n	80018e4 <ADC_Enable+0x74>
			}
		}
	}

	/* Return HAL status */
	return HAL_OK;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	8000003f 	.word	0x8000003f

08001938 <ADC_Disable>:
 * @note   Prerequisite condition to use this function: ADC conversions must be
 *         stopped.
 * @param  hadc ADC handle
 * @retval HAL status.
 */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc) {
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = 0U;
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]

	/* Verification if ADC is not already disabled:                             */
	/* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
	/* disabled.                                                                */
	if (ADC_IS_ENABLE(hadc) != RESET) {
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	2b01      	cmp	r3, #1
 8001950:	d108      	bne.n	8001964 <ADC_Disable+0x2c>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	2b01      	cmp	r3, #1
 800195e:	d101      	bne.n	8001964 <ADC_Disable+0x2c>
 8001960:	2301      	movs	r3, #1
 8001962:	e000      	b.n	8001966 <ADC_Disable+0x2e>
 8001964:	2300      	movs	r3, #0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d047      	beq.n	80019fa <ADC_Disable+0xc2>
		/* Check if conditions to disable the ADC are fulfilled */
		if (ADC_DISABLING_CONDITIONS(hadc) != RESET) {
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 030d 	and.w	r3, r3, #13
 8001974:	2b01      	cmp	r3, #1
 8001976:	d10f      	bne.n	8001998 <ADC_Disable+0x60>
			/* Disable the ADC peripheral */
			__HAL_ADC_DISABLE(hadc);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f042 0202 	orr.w	r2, r2, #2
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2203      	movs	r2, #3
 800198e:	601a      	str	r2, [r3, #0]

			return HAL_ERROR;
		}

		/* Wait for ADC effectively disabled */
		tickstart = HAL_GetTick();
 8001990:	f7fe fef2 	bl	8000778 <HAL_GetTick>
 8001994:	60f8      	str	r0, [r7, #12]

		while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN)) {
 8001996:	e029      	b.n	80019ec <ADC_Disable+0xb4>
			SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199c:	f043 0210 	orr.w	r2, r3, #16
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	641a      	str	r2, [r3, #64]	; 0x40
			SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a8:	f043 0201 	orr.w	r2, r3, #1
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	645a      	str	r2, [r3, #68]	; 0x44
			return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e023      	b.n	80019fc <ADC_Disable+0xc4>
			if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT) {
 80019b4:	f7fe fee0 	bl	8000778 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d914      	bls.n	80019ec <ADC_Disable+0xb4>
				/* New check to avoid false timeout detection in case of preemption */
				if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN)) {
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d10d      	bne.n	80019ec <ADC_Disable+0xb4>
					/* Update ADC state machine to error */
					SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d4:	f043 0210 	orr.w	r2, r3, #16
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	641a      	str	r2, [r3, #64]	; 0x40

					/* Set ADC error code to ADC IP internal error */
					SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e0:	f043 0201 	orr.w	r2, r3, #1
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	645a      	str	r2, [r3, #68]	; 0x44

					return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e007      	b.n	80019fc <ADC_Disable+0xc4>
		while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN)) {
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d0dc      	beq.n	80019b4 <ADC_Disable+0x7c>
			}
		}
	}

	/* Return HAL status */
	return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <__NVIC_SetPriorityGrouping>:
	 Only values from 0..7 are used.
	 In case of a conflict between priority grouping and available
	 priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
	 \param [in]      PriorityGroup  Priority grouping field.
	 */
	__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
		uint32_t reg_value;
		uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t) 0x07UL); /* only values 0..7 are used          */
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	60fb      	str	r3, [r7, #12]

		reg_value = SCB->AIRCR; /* read old register configuration    */
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <__NVIC_SetPriorityGrouping+0x44>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	60bb      	str	r3, [r7, #8]
		reg_value &= ~((uint32_t) (SCB_AIRCR_VECTKEY_Msk
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a20:	4013      	ands	r3, r2
 8001a22:	60bb      	str	r3, [r7, #8]
				| SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
		reg_value = (reg_value | ((uint32_t) 0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
				| (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)); /* Insert write key and priority group */
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	021a      	lsls	r2, r3, #8
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	4313      	orrs	r3, r2
		reg_value = (reg_value | ((uint32_t) 0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
 8001a2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a34:	60bb      	str	r3, [r7, #8]
		SCB->AIRCR = reg_value;
 8001a36:	4a04      	ldr	r2, [pc, #16]	; (8001a48 <__NVIC_SetPriorityGrouping+0x44>)
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	60d3      	str	r3, [r2, #12]
	}
 8001a3c:	bf00      	nop
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <__NVIC_GetPriorityGrouping>:
	/**
	 \brief   Get Priority Grouping
	 \details Reads the priority grouping field from the NVIC Interrupt Controller.
	 \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
	 */
	__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void) {
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
		return ((uint32_t) ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk)
 8001a50:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <__NVIC_GetPriorityGrouping+0x18>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	0a1b      	lsrs	r3, r3, #8
 8001a56:	f003 0307 	and.w	r3, r3, #7
				>> SCB_AIRCR_PRIGROUP_Pos));
	}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <__NVIC_SetPriority>:
	 or negative to specify a processor exception.
	 \param [in]      IRQn  Interrupt number.
	 \param [in]  priority  Priority to set.
	 \note    The priority cannot be set for every processor exception.
	 */
	__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority) {
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	6039      	str	r1, [r7, #0]
 8001a72:	71fb      	strb	r3, [r7, #7]
		if ((int32_t) (IRQn) >= 0) {
 8001a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	db0a      	blt.n	8001a92 <__NVIC_SetPriority+0x2a>
			NVIC->IP[((uint32_t) IRQn)] = (uint8_t) ((priority
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	490c      	ldr	r1, [pc, #48]	; (8001ab4 <__NVIC_SetPriority+0x4c>)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	0112      	lsls	r2, r2, #4
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
					<< (8U - __NVIC_PRIO_BITS)) & (uint32_t) 0xFFUL);
		} else {
			SCB->SHP[(((uint32_t) IRQn) & 0xFUL) - 4UL] = (uint8_t) ((priority
					<< (8U - __NVIC_PRIO_BITS)) & (uint32_t) 0xFFUL);
		}
	}
 8001a90:	e00a      	b.n	8001aa8 <__NVIC_SetPriority+0x40>
			SCB->SHP[(((uint32_t) IRQn) & 0xFUL) - 4UL] = (uint8_t) ((priority
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	4908      	ldr	r1, [pc, #32]	; (8001ab8 <__NVIC_SetPriority+0x50>)
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	3b04      	subs	r3, #4
 8001aa0:	0112      	lsls	r2, r2, #4
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	761a      	strb	r2, [r3, #24]
	}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	e000e100 	.word	0xe000e100
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <NVIC_EncodePriority>:
	 \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
	 \param [in]       SubPriority  Subpriority value (starting from 0).
	 \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
	 */
	__STATIC_INLINE uint32_t NVIC_EncodePriority(uint32_t PriorityGroup,
			uint32_t PreemptPriority, uint32_t SubPriority) {
 8001abc:	b480      	push	{r7}
 8001abe:	b089      	sub	sp, #36	; 0x24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
		uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t) 0x07UL); /* only values 0..7 are used          */
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	61fb      	str	r3, [r7, #28]
		uint32_t PreemptPriorityBits;
		uint32_t SubPriorityBits;

		PreemptPriorityBits =
				((7UL - PriorityGroupTmp) > (uint32_t) (__NVIC_PRIO_BITS)) ?
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f1c3 0307 	rsb	r3, r3, #7
		PreemptPriorityBits =
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	bf28      	it	cs
 8001ada:	2304      	movcs	r3, #4
 8001adc:	61bb      	str	r3, [r7, #24]
						(uint32_t) (__NVIC_PRIO_BITS) :
						(uint32_t) (7UL - PriorityGroupTmp);
		SubPriorityBits =
				((PriorityGroupTmp + (uint32_t) (__NVIC_PRIO_BITS))
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3304      	adds	r3, #4
						< (uint32_t) 7UL) ?
						(uint32_t) 0UL :
 8001ae2:	2b06      	cmp	r3, #6
 8001ae4:	d902      	bls.n	8001aec <NVIC_EncodePriority+0x30>
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3b03      	subs	r3, #3
 8001aea:	e000      	b.n	8001aee <NVIC_EncodePriority+0x32>
 8001aec:	2300      	movs	r3, #0
		SubPriorityBits =
 8001aee:	617b      	str	r3, [r7, #20]
						(uint32_t) ((PriorityGroupTmp - 7UL)
								+ (uint32_t) (__NVIC_PRIO_BITS));

		return (((PreemptPriority
				& (uint32_t) ((1UL << (PreemptPriorityBits)) - 1UL))
 8001af0:	f04f 32ff 	mov.w	r2, #4294967295
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43da      	mvns	r2, r3
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	401a      	ands	r2, r3
				<< SubPriorityBits)
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	409a      	lsls	r2, r3
				| ((SubPriority & (uint32_t) ((1UL << (SubPriorityBits)) - 1UL))));
 8001b04:	f04f 31ff 	mov.w	r1, #4294967295
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0e:	43d9      	mvns	r1, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	400b      	ands	r3, r1
 8001b14:	4313      	orrs	r3, r2
	}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3724      	adds	r7, #36	; 0x24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
	...

08001b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b34:	d301      	bcc.n	8001b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b36:	2301      	movs	r3, #1
 8001b38:	e00f      	b.n	8001b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <SysTick_Config+0x40>)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b42:	210f      	movs	r1, #15
 8001b44:	f04f 30ff 	mov.w	r0, #4294967295
 8001b48:	f7ff ff8e 	bl	8001a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b4c:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <SysTick_Config+0x40>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b52:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <SysTick_Config+0x40>)
 8001b54:	2207      	movs	r2, #7
 8001b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	e000e010 	.word	0xe000e010

08001b68 <HAL_NVIC_SetPriorityGrouping>:
 *                                    0 bits for subpriority
 * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
 *         The pending IRQ priority will be managed only by the subpriority.
 * @retval None
 */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
	NVIC_SetPriorityGrouping(PriorityGroup);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff ff47 	bl	8001a04 <__NVIC_SetPriorityGrouping>
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_NVIC_SetPriority>:
 *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
 *         A lower priority value indicates a higher priority.
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority,
		uint32_t SubPriority) {
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b086      	sub	sp, #24
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	4603      	mov	r3, r0
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	607a      	str	r2, [r7, #4]
 8001b8a:	73fb      	strb	r3, [r7, #15]
	uint32_t prioritygroup = 0x00U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]

	/* Check the parameters */
	assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
	assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

	prioritygroup = NVIC_GetPriorityGrouping();
 8001b90:	f7ff ff5c 	bl	8001a4c <__NVIC_GetPriorityGrouping>
 8001b94:	6178      	str	r0, [r7, #20]

	NVIC_SetPriority(IRQn,
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	68b9      	ldr	r1, [r7, #8]
 8001b9a:	6978      	ldr	r0, [r7, #20]
 8001b9c:	f7ff ff8e 	bl	8001abc <NVIC_EncodePriority>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ff5d 	bl	8001a68 <__NVIC_SetPriority>
			NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001bae:	bf00      	nop
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_SYSTICK_Config>:
 *         Counter is in free running mode to generate periodic interrupts.
 * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
 * @retval status:  - 0  Function succeeded.
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb) {
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
	return SysTick_Config(TicksNumb);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff ffb0 	bl	8001b24 <SysTick_Config>
 8001bc4:	4603      	mov	r3, r0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
	...

08001bd0 <HAL_GPIO_Init>:
 * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family devices
 * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 8001bd0:	b480      	push	{r7}
 8001bd2:	b087      	sub	sp, #28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
	uint32_t position = 0x00u;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

	/* Configure the port pins */
	while (((GPIO_Init->Pin) >> position) != 0x00u) {
 8001bde:	e160      	b.n	8001ea2 <HAL_GPIO_Init+0x2d2>
		/* Get current io position */
		iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	2101      	movs	r1, #1
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bec:	4013      	ands	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]

		if (iocurrent != 0x00u) {
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 8152 	beq.w	8001e9c <HAL_GPIO_Init+0x2cc>
			/*--------------------- GPIO Mode Configuration ------------------------*/
			/* In case of Output or Alternate function mode selection */
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d005      	beq.n	8001c10 <HAL_GPIO_Init+0x40>
					|| ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)) {
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 0303 	and.w	r3, r3, #3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d130      	bne.n	8001c72 <HAL_GPIO_Init+0xa2>
				/* Check the Speed parameter */
				assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
				/* Configure the IO Speed */
				temp = GPIOx->OSPEEDR;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	613b      	str	r3, [r7, #16]
				temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	2203      	movs	r2, #3
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	4013      	ands	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
				temp |= (GPIO_Init->Speed << (position * 2u));
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	68da      	ldr	r2, [r3, #12]
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
				GPIOx->OSPEEDR = temp;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	609a      	str	r2, [r3, #8]

				/* Configure the IO Output Type */
				temp = GPIOx->OTYPER;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	613b      	str	r3, [r7, #16]
				temp &= ~(GPIO_OTYPER_OT_0 << position);
 8001c46:	2201      	movs	r2, #1
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	4013      	ands	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	091b      	lsrs	r3, r3, #4
 8001c5c:	f003 0201 	and.w	r2, r3, #1
						<< position);
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
				GPIOx->OTYPER = temp;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	605a      	str	r2, [r3, #4]
			}

			if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) {
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	2b03      	cmp	r3, #3
 8001c7c:	d017      	beq.n	8001cae <HAL_GPIO_Init+0xde>
				/* Check the Pull parameter */
				assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

				/* Activate the Pull-up or Pull down resistor for the current IO */
				temp = GPIOx->PUPDR;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	613b      	str	r3, [r7, #16]
				temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	2203      	movs	r2, #3
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	4013      	ands	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
				temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
				GPIOx->PUPDR = temp;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	60da      	str	r2, [r3, #12]
			}

			/*--------------------- GPIO Mode Configuration ------------------------*/
			/* In case of Alternate function mode selection */
			if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d123      	bne.n	8001d02 <HAL_GPIO_Init+0x132>
				/* Check the Alternate function parameters */
				assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
				assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

				/* Configure Alternate function mapped with the current IO */
				temp = GPIOx->AFR[position >> 3u];
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	08da      	lsrs	r2, r3, #3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3208      	adds	r2, #8
 8001cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cc6:	613b      	str	r3, [r7, #16]
				temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	220f      	movs	r2, #15
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	613b      	str	r3, [r7, #16]
				temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	691a      	ldr	r2, [r3, #16]
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
				GPIOx->AFR[position >> 3u] = temp;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	08da      	lsrs	r2, r3, #3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3208      	adds	r2, #8
 8001cfc:	6939      	ldr	r1, [r7, #16]
 8001cfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}

			/* Configure IO Direction mode (Input, Output, Alternate or Analog) */
			temp = GPIOx->MODER;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	613b      	str	r3, [r7, #16]
			temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43db      	mvns	r3, r3
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	4013      	ands	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 0203 	and.w	r2, r3, #3
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
			GPIOx->MODER = temp;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	601a      	str	r2, [r3, #0]

			/*--------------------- EXTI Mode Configuration ------------------------*/
			/* Configure the External Interrupt or event for the current IO */
			if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u) {
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f000 80ac 	beq.w	8001e9c <HAL_GPIO_Init+0x2cc>
				/* Enable SYSCFG Clock */
				__HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d44:	4b5e      	ldr	r3, [pc, #376]	; (8001ec0 <HAL_GPIO_Init+0x2f0>)
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	4a5d      	ldr	r2, [pc, #372]	; (8001ec0 <HAL_GPIO_Init+0x2f0>)
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	6193      	str	r3, [r2, #24]
 8001d50:	4b5b      	ldr	r3, [pc, #364]	; (8001ec0 <HAL_GPIO_Init+0x2f0>)
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	60bb      	str	r3, [r7, #8]
 8001d5a:	68bb      	ldr	r3, [r7, #8]

				temp = SYSCFG->EXTICR[position >> 2u];
 8001d5c:	4a59      	ldr	r2, [pc, #356]	; (8001ec4 <HAL_GPIO_Init+0x2f4>)
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	089b      	lsrs	r3, r3, #2
 8001d62:	3302      	adds	r3, #2
 8001d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d68:	613b      	str	r3, [r7, #16]
				temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	f003 0303 	and.w	r3, r3, #3
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	220f      	movs	r2, #15
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
				temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d86:	d025      	beq.n	8001dd4 <HAL_GPIO_Init+0x204>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a4f      	ldr	r2, [pc, #316]	; (8001ec8 <HAL_GPIO_Init+0x2f8>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d01f      	beq.n	8001dd0 <HAL_GPIO_Init+0x200>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a4e      	ldr	r2, [pc, #312]	; (8001ecc <HAL_GPIO_Init+0x2fc>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d019      	beq.n	8001dcc <HAL_GPIO_Init+0x1fc>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a4d      	ldr	r2, [pc, #308]	; (8001ed0 <HAL_GPIO_Init+0x300>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d013      	beq.n	8001dc8 <HAL_GPIO_Init+0x1f8>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a4c      	ldr	r2, [pc, #304]	; (8001ed4 <HAL_GPIO_Init+0x304>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d00d      	beq.n	8001dc4 <HAL_GPIO_Init+0x1f4>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a4b      	ldr	r2, [pc, #300]	; (8001ed8 <HAL_GPIO_Init+0x308>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d007      	beq.n	8001dc0 <HAL_GPIO_Init+0x1f0>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a4a      	ldr	r2, [pc, #296]	; (8001edc <HAL_GPIO_Init+0x30c>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d101      	bne.n	8001dbc <HAL_GPIO_Init+0x1ec>
 8001db8:	2306      	movs	r3, #6
 8001dba:	e00c      	b.n	8001dd6 <HAL_GPIO_Init+0x206>
 8001dbc:	2307      	movs	r3, #7
 8001dbe:	e00a      	b.n	8001dd6 <HAL_GPIO_Init+0x206>
 8001dc0:	2305      	movs	r3, #5
 8001dc2:	e008      	b.n	8001dd6 <HAL_GPIO_Init+0x206>
 8001dc4:	2304      	movs	r3, #4
 8001dc6:	e006      	b.n	8001dd6 <HAL_GPIO_Init+0x206>
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e004      	b.n	8001dd6 <HAL_GPIO_Init+0x206>
 8001dcc:	2302      	movs	r3, #2
 8001dce:	e002      	b.n	8001dd6 <HAL_GPIO_Init+0x206>
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e000      	b.n	8001dd6 <HAL_GPIO_Init+0x206>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	f002 0203 	and.w	r2, r2, #3
 8001ddc:	0092      	lsls	r2, r2, #2
 8001dde:	4093      	lsls	r3, r2
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
				SYSCFG->EXTICR[position >> 2u] = temp;
 8001de6:	4937      	ldr	r1, [pc, #220]	; (8001ec4 <HAL_GPIO_Init+0x2f4>)
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	089b      	lsrs	r3, r3, #2
 8001dec:	3302      	adds	r3, #2
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				/* Clear Rising Falling edge configuration */
				temp = EXTI->RTSR;
 8001df4:	4b3a      	ldr	r3, [pc, #232]	; (8001ee0 <HAL_GPIO_Init+0x310>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	613b      	str	r3, [r7, #16]
				temp &= ~(iocurrent);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
				if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u) {
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <HAL_GPIO_Init+0x248>
					temp |= iocurrent;
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
				}
				EXTI->RTSR = temp;
 8001e18:	4a31      	ldr	r2, [pc, #196]	; (8001ee0 <HAL_GPIO_Init+0x310>)
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	6093      	str	r3, [r2, #8]

				temp = EXTI->FTSR;
 8001e1e:	4b30      	ldr	r3, [pc, #192]	; (8001ee0 <HAL_GPIO_Init+0x310>)
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	613b      	str	r3, [r7, #16]
				temp &= ~(iocurrent);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	43db      	mvns	r3, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
				if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u) {
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_Init+0x272>
					temp |= iocurrent;
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
				}
				EXTI->FTSR = temp;
 8001e42:	4a27      	ldr	r2, [pc, #156]	; (8001ee0 <HAL_GPIO_Init+0x310>)
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	60d3      	str	r3, [r2, #12]

				temp = EXTI->EMR;
 8001e48:	4b25      	ldr	r3, [pc, #148]	; (8001ee0 <HAL_GPIO_Init+0x310>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	613b      	str	r3, [r7, #16]
				temp &= ~(iocurrent);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	4013      	ands	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
				if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u) {
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_GPIO_Init+0x29c>
					temp |= iocurrent;
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
				}
				EXTI->EMR = temp;
 8001e6c:	4a1c      	ldr	r2, [pc, #112]	; (8001ee0 <HAL_GPIO_Init+0x310>)
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	6053      	str	r3, [r2, #4]

				/* Clear EXTI line configuration */
				temp = EXTI->IMR;
 8001e72:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <HAL_GPIO_Init+0x310>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	613b      	str	r3, [r7, #16]
				temp &= ~(iocurrent);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
				if ((GPIO_Init->Mode & EXTI_IT) != 0x00u) {
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_GPIO_Init+0x2c6>
					temp |= iocurrent;
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
				}
				EXTI->IMR = temp;
 8001e96:	4a12      	ldr	r2, [pc, #72]	; (8001ee0 <HAL_GPIO_Init+0x310>)
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	6013      	str	r3, [r2, #0]
			}
		}

		position++;
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	617b      	str	r3, [r7, #20]
	while (((GPIO_Init->Pin) >> position) != 0x00u) {
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f47f ae97 	bne.w	8001be0 <HAL_GPIO_Init+0x10>
	}
}
 8001eb2:	bf00      	nop
 8001eb4:	bf00      	nop
 8001eb6:	371c      	adds	r7, #28
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40010000 	.word	0x40010000
 8001ec8:	48000400 	.word	0x48000400
 8001ecc:	48000800 	.word	0x48000800
 8001ed0:	48000c00 	.word	0x48000c00
 8001ed4:	48001000 	.word	0x48001000
 8001ed8:	48001400 	.word	0x48001400
 8001edc:	48001800 	.word	0x48001800
 8001ee0:	40010400 	.word	0x40010400

08001ee4 <HAL_GPIO_ReadPin>:
 * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
 * @param  GPIO_Pin specifies the port bit to read.
 *         This parameter can be GPIO_PIN_x where x can be (0..15).
 * @retval The input port pin value.
 */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	807b      	strh	r3, [r7, #2]
	GPIO_PinState bitstatus;

	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));

	if ((GPIOx->IDR & GPIO_Pin) != (uint32_t) GPIO_PIN_RESET) {
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691a      	ldr	r2, [r3, #16]
 8001ef4:	887b      	ldrh	r3, [r7, #2]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d002      	beq.n	8001f02 <HAL_GPIO_ReadPin+0x1e>
		bitstatus = GPIO_PIN_SET;
 8001efc:	2301      	movs	r3, #1
 8001efe:	73fb      	strb	r3, [r7, #15]
 8001f00:	e001      	b.n	8001f06 <HAL_GPIO_ReadPin+0x22>
	} else {
		bitstatus = GPIO_PIN_RESET;
 8001f02:	2300      	movs	r3, #0
 8001f04:	73fb      	strb	r3, [r7, #15]
	}
	return bitstatus;
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <HAL_RCC_OscConfig>:
 * @note   Transition HSE Bypass to HSE On and HSE On to HSE Bypass are not
 *         supported by this macro. User should request a transition to HSE Off
 *         first and then HSE On or HSE Bypass.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct) {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f20:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f24:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
	uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL) {
 8001f26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f2a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d102      	bne.n	8001f3a <HAL_RCC_OscConfig+0x26>
		return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	f001 b83a 	b.w	8002fae <HAL_RCC_OscConfig+0x109a>

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 8001f3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f3e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 816f 	beq.w	800222e <HAL_RCC_OscConfig+0x31a>
			== RCC_OSCILLATORTYPE_HSE) {
		/* Check the parameters */
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

		/* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f50:	4bb5      	ldr	r3, [pc, #724]	; (8002228 <HAL_RCC_OscConfig+0x314>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 030c 	and.w	r3, r3, #12
 8001f58:	2b04      	cmp	r3, #4
 8001f5a:	d00c      	beq.n	8001f76 <HAL_RCC_OscConfig+0x62>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE()
 8001f5c:	4bb2      	ldr	r3, [pc, #712]	; (8002228 <HAL_RCC_OscConfig+0x314>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 030c 	and.w	r3, r3, #12
 8001f64:	2b08      	cmp	r3, #8
 8001f66:	d15c      	bne.n	8002022 <HAL_RCC_OscConfig+0x10e>
						== RCC_SYSCLKSOURCE_STATUS_PLLCLK)
						&& (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE))) {
 8001f68:	4baf      	ldr	r3, [pc, #700]	; (8002228 <HAL_RCC_OscConfig+0x314>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f74:	d155      	bne.n	8002022 <HAL_RCC_OscConfig+0x10e>
 8001f76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f7a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
	uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f82:	fa93 f3a3 	rbit	r3, r3
 8001f86:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
	return result;
 8001f8a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f8e:	fab3 f383 	clz	r3, r3
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	095b      	lsrs	r3, r3, #5
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d102      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x94>
 8001fa2:	4ba1      	ldr	r3, [pc, #644]	; (8002228 <HAL_RCC_OscConfig+0x314>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	e015      	b.n	8001fd4 <HAL_RCC_OscConfig+0xc0>
 8001fa8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fac:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001fb4:	fa93 f3a3 	rbit	r3, r3
 8001fb8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001fbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fc0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001fc4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001fc8:	fa93 f3a3 	rbit	r3, r3
 8001fcc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001fd0:	4b95      	ldr	r3, [pc, #596]	; (8002228 <HAL_RCC_OscConfig+0x314>)
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fd8:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001fdc:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001fe0:	fa92 f2a2 	rbit	r2, r2
 8001fe4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
	return result;
 8001fe8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001fec:	fab2 f282 	clz	r2, r2
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	f042 0220 	orr.w	r2, r2, #32
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	f002 021f 	and.w	r2, r2, #31
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	fa01 f202 	lsl.w	r2, r1, r2
 8002002:	4013      	ands	r3, r2
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 8111 	beq.w	800222c <HAL_RCC_OscConfig+0x318>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 800200a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800200e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	f040 8108 	bne.w	800222c <HAL_RCC_OscConfig+0x318>
				return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	f000 bfc6 	b.w	8002fae <HAL_RCC_OscConfig+0x109a>
			}
		} else {
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002022:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002026:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002032:	d106      	bne.n	8002042 <HAL_RCC_OscConfig+0x12e>
 8002034:	4b7c      	ldr	r3, [pc, #496]	; (8002228 <HAL_RCC_OscConfig+0x314>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a7b      	ldr	r2, [pc, #492]	; (8002228 <HAL_RCC_OscConfig+0x314>)
 800203a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800203e:	6013      	str	r3, [r2, #0]
 8002040:	e036      	b.n	80020b0 <HAL_RCC_OscConfig+0x19c>
 8002042:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002046:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10c      	bne.n	800206c <HAL_RCC_OscConfig+0x158>
 8002052:	4b75      	ldr	r3, [pc, #468]	; (8002228 <HAL_RCC_OscConfig+0x314>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a74      	ldr	r2, [pc, #464]	; (8002228 <HAL_RCC_OscConfig+0x314>)
 8002058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	4b72      	ldr	r3, [pc, #456]	; (8002228 <HAL_RCC_OscConfig+0x314>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a71      	ldr	r2, [pc, #452]	; (8002228 <HAL_RCC_OscConfig+0x314>)
 8002064:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	e021      	b.n	80020b0 <HAL_RCC_OscConfig+0x19c>
 800206c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002070:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800207c:	d10c      	bne.n	8002098 <HAL_RCC_OscConfig+0x184>
 800207e:	4b6a      	ldr	r3, [pc, #424]	; (8002228 <HAL_RCC_OscConfig+0x314>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a69      	ldr	r2, [pc, #420]	; (8002228 <HAL_RCC_OscConfig+0x314>)
 8002084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	4b67      	ldr	r3, [pc, #412]	; (8002228 <HAL_RCC_OscConfig+0x314>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a66      	ldr	r2, [pc, #408]	; (8002228 <HAL_RCC_OscConfig+0x314>)
 8002090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002094:	6013      	str	r3, [r2, #0]
 8002096:	e00b      	b.n	80020b0 <HAL_RCC_OscConfig+0x19c>
 8002098:	4b63      	ldr	r3, [pc, #396]	; (8002228 <HAL_RCC_OscConfig+0x314>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a62      	ldr	r2, [pc, #392]	; (8002228 <HAL_RCC_OscConfig+0x314>)
 800209e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	4b60      	ldr	r3, [pc, #384]	; (8002228 <HAL_RCC_OscConfig+0x314>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a5f      	ldr	r2, [pc, #380]	; (8002228 <HAL_RCC_OscConfig+0x314>)
 80020aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ae:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

			/* Check the HSE State */
			if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF) {
 80020b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d059      	beq.n	8002174 <HAL_RCC_OscConfig+0x260>
				/* Get Start Tick */
				tickstart = HAL_GetTick();
 80020c0:	f7fe fb5a 	bl	8000778 <HAL_GetTick>
 80020c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

				/* Wait till HSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 80020c8:	e00a      	b.n	80020e0 <HAL_RCC_OscConfig+0x1cc>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 80020ca:	f7fe fb55 	bl	8000778 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b64      	cmp	r3, #100	; 0x64
 80020d8:	d902      	bls.n	80020e0 <HAL_RCC_OscConfig+0x1cc>
						return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	f000 bf67 	b.w	8002fae <HAL_RCC_OscConfig+0x109a>
 80020e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020e4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80020ec:	fa93 f3a3 	rbit	r3, r3
 80020f0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	return result;
 80020f4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 80020f8:	fab3 f383 	clz	r3, r3
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	095b      	lsrs	r3, r3, #5
 8002100:	b2db      	uxtb	r3, r3
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b01      	cmp	r3, #1
 800210a:	d102      	bne.n	8002112 <HAL_RCC_OscConfig+0x1fe>
 800210c:	4b46      	ldr	r3, [pc, #280]	; (8002228 <HAL_RCC_OscConfig+0x314>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	e015      	b.n	800213e <HAL_RCC_OscConfig+0x22a>
 8002112:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002116:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800211e:	fa93 f3a3 	rbit	r3, r3
 8002122:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002126:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800212a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800212e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002132:	fa93 f3a3 	rbit	r3, r3
 8002136:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800213a:	4b3b      	ldr	r3, [pc, #236]	; (8002228 <HAL_RCC_OscConfig+0x314>)
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002142:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002146:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800214a:	fa92 f2a2 	rbit	r2, r2
 800214e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
	return result;
 8002152:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002156:	fab2 f282 	clz	r2, r2
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	f042 0220 	orr.w	r2, r2, #32
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	f002 021f 	and.w	r2, r2, #31
 8002166:	2101      	movs	r1, #1
 8002168:	fa01 f202 	lsl.w	r2, r1, r2
 800216c:	4013      	ands	r3, r2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0ab      	beq.n	80020ca <HAL_RCC_OscConfig+0x1b6>
 8002172:	e05c      	b.n	800222e <HAL_RCC_OscConfig+0x31a>
					}
				}
			} else {
				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8002174:	f7fe fb00 	bl	8000778 <HAL_GetTick>
 8002178:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

				/* Wait till HSE is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 800217c:	e00a      	b.n	8002194 <HAL_RCC_OscConfig+0x280>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 800217e:	f7fe fafb 	bl	8000778 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b64      	cmp	r3, #100	; 0x64
 800218c:	d902      	bls.n	8002194 <HAL_RCC_OscConfig+0x280>
						return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	f000 bf0d 	b.w	8002fae <HAL_RCC_OscConfig+0x109a>
 8002194:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002198:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80021a0:	fa93 f3a3 	rbit	r3, r3
 80021a4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
	return result;
 80021a8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 80021ac:	fab3 f383 	clz	r3, r3
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	095b      	lsrs	r3, r3, #5
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	f043 0301 	orr.w	r3, r3, #1
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d102      	bne.n	80021c6 <HAL_RCC_OscConfig+0x2b2>
 80021c0:	4b19      	ldr	r3, [pc, #100]	; (8002228 <HAL_RCC_OscConfig+0x314>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	e015      	b.n	80021f2 <HAL_RCC_OscConfig+0x2de>
 80021c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021ca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80021d2:	fa93 f3a3 	rbit	r3, r3
 80021d6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80021da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021de:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80021e2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80021e6:	fa93 f3a3 	rbit	r3, r3
 80021ea:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80021ee:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <HAL_RCC_OscConfig+0x314>)
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021f6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80021fa:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80021fe:	fa92 f2a2 	rbit	r2, r2
 8002202:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
	return result;
 8002206:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800220a:	fab2 f282 	clz	r2, r2
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	f042 0220 	orr.w	r2, r2, #32
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	f002 021f 	and.w	r2, r2, #31
 800221a:	2101      	movs	r1, #1
 800221c:	fa01 f202 	lsl.w	r2, r1, r2
 8002220:	4013      	ands	r3, r2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1ab      	bne.n	800217e <HAL_RCC_OscConfig+0x26a>
 8002226:	e002      	b.n	800222e <HAL_RCC_OscConfig+0x31a>
 8002228:	40021000 	.word	0x40021000
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800222c:	bf00      	nop
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI)
 800222e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002232:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 817f 	beq.w	8002542 <HAL_RCC_OscConfig+0x62e>
		assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
		assert_param(
				IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

		/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002244:	4ba7      	ldr	r3, [pc, #668]	; (80024e4 <HAL_RCC_OscConfig+0x5d0>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 030c 	and.w	r3, r3, #12
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00c      	beq.n	800226a <HAL_RCC_OscConfig+0x356>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE()
 8002250:	4ba4      	ldr	r3, [pc, #656]	; (80024e4 <HAL_RCC_OscConfig+0x5d0>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 030c 	and.w	r3, r3, #12
 8002258:	2b08      	cmp	r3, #8
 800225a:	d173      	bne.n	8002344 <HAL_RCC_OscConfig+0x430>
						== RCC_SYSCLKSOURCE_STATUS_PLLCLK)
						&& (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI))) {
 800225c:	4ba1      	ldr	r3, [pc, #644]	; (80024e4 <HAL_RCC_OscConfig+0x5d0>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002268:	d16c      	bne.n	8002344 <HAL_RCC_OscConfig+0x430>
 800226a:	2302      	movs	r3, #2
 800226c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002270:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002274:	fa93 f3a3 	rbit	r3, r3
 8002278:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	return result;
 800227c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
			/* When HSI is used as system clock it will not disabled */
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002280:	fab3 f383 	clz	r3, r3
 8002284:	b2db      	uxtb	r3, r3
 8002286:	095b      	lsrs	r3, r3, #5
 8002288:	b2db      	uxtb	r3, r3
 800228a:	f043 0301 	orr.w	r3, r3, #1
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b01      	cmp	r3, #1
 8002292:	d102      	bne.n	800229a <HAL_RCC_OscConfig+0x386>
 8002294:	4b93      	ldr	r3, [pc, #588]	; (80024e4 <HAL_RCC_OscConfig+0x5d0>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	e013      	b.n	80022c2 <HAL_RCC_OscConfig+0x3ae>
 800229a:	2302      	movs	r3, #2
 800229c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80022a4:	fa93 f3a3 	rbit	r3, r3
 80022a8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80022ac:	2302      	movs	r3, #2
 80022ae:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80022b2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80022b6:	fa93 f3a3 	rbit	r3, r3
 80022ba:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80022be:	4b89      	ldr	r3, [pc, #548]	; (80024e4 <HAL_RCC_OscConfig+0x5d0>)
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c2:	2202      	movs	r2, #2
 80022c4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80022c8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80022cc:	fa92 f2a2 	rbit	r2, r2
 80022d0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
	return result;
 80022d4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80022d8:	fab2 f282 	clz	r2, r2
 80022dc:	b2d2      	uxtb	r2, r2
 80022de:	f042 0220 	orr.w	r2, r2, #32
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	f002 021f 	and.w	r2, r2, #31
 80022e8:	2101      	movs	r1, #1
 80022ea:	fa01 f202 	lsl.w	r2, r1, r2
 80022ee:	4013      	ands	r3, r2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00a      	beq.n	800230a <HAL_RCC_OscConfig+0x3f6>
					&& (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 80022f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d002      	beq.n	800230a <HAL_RCC_OscConfig+0x3f6>
				return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	f000 be52 	b.w	8002fae <HAL_RCC_OscConfig+0x109a>
			}
			/* Otherwise, just the calibration is allowed */
			else {
				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 800230a:	4b76      	ldr	r3, [pc, #472]	; (80024e4 <HAL_RCC_OscConfig+0x5d0>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002312:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002316:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	21f8      	movs	r1, #248	; 0xf8
 8002320:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002324:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002328:	fa91 f1a1 	rbit	r1, r1
 800232c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
	return result;
 8002330:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002334:	fab1 f181 	clz	r1, r1
 8002338:	b2c9      	uxtb	r1, r1
 800233a:	408b      	lsls	r3, r1
 800233c:	4969      	ldr	r1, [pc, #420]	; (80024e4 <HAL_RCC_OscConfig+0x5d0>)
 800233e:	4313      	orrs	r3, r2
 8002340:	600b      	str	r3, [r1, #0]
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002342:	e0fe      	b.n	8002542 <HAL_RCC_OscConfig+0x62e>
						RCC_OscInitStruct->HSICalibrationValue);
			}
		} else {
			/* Check the HSI State */
			if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF) {
 8002344:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002348:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 8088 	beq.w	8002466 <HAL_RCC_OscConfig+0x552>
 8002356:	2301      	movs	r3, #1
 8002358:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002360:	fa93 f3a3 	rbit	r3, r3
 8002364:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	return result;
 8002368:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
				/* Enable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_ENABLE();
 800236c:	fab3 f383 	clz	r3, r3
 8002370:	b2db      	uxtb	r3, r3
 8002372:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002376:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	461a      	mov	r2, r3
 800237e:	2301      	movs	r3, #1
 8002380:	6013      	str	r3, [r2, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8002382:	f7fe f9f9 	bl	8000778 <HAL_GetTick>
 8002386:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 800238a:	e00a      	b.n	80023a2 <HAL_RCC_OscConfig+0x48e>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 800238c:	f7fe f9f4 	bl	8000778 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d902      	bls.n	80023a2 <HAL_RCC_OscConfig+0x48e>
						return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	f000 be06 	b.w	8002fae <HAL_RCC_OscConfig+0x109a>
 80023a2:	2302      	movs	r3, #2
 80023a4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80023ac:	fa93 f3a3 	rbit	r3, r3
 80023b0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	return result;
 80023b4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 80023b8:	fab3 f383 	clz	r3, r3
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	095b      	lsrs	r3, r3, #5
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d102      	bne.n	80023d2 <HAL_RCC_OscConfig+0x4be>
 80023cc:	4b45      	ldr	r3, [pc, #276]	; (80024e4 <HAL_RCC_OscConfig+0x5d0>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	e013      	b.n	80023fa <HAL_RCC_OscConfig+0x4e6>
 80023d2:	2302      	movs	r3, #2
 80023d4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80023dc:	fa93 f3a3 	rbit	r3, r3
 80023e0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80023e4:	2302      	movs	r3, #2
 80023e6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80023ea:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80023ee:	fa93 f3a3 	rbit	r3, r3
 80023f2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80023f6:	4b3b      	ldr	r3, [pc, #236]	; (80024e4 <HAL_RCC_OscConfig+0x5d0>)
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	2202      	movs	r2, #2
 80023fc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002400:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002404:	fa92 f2a2 	rbit	r2, r2
 8002408:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
	return result;
 800240c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002410:	fab2 f282 	clz	r2, r2
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	f042 0220 	orr.w	r2, r2, #32
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	f002 021f 	and.w	r2, r2, #31
 8002420:	2101      	movs	r1, #1
 8002422:	fa01 f202 	lsl.w	r2, r1, r2
 8002426:	4013      	ands	r3, r2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0af      	beq.n	800238c <HAL_RCC_OscConfig+0x478>
					}
				}

				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 800242c:	4b2d      	ldr	r3, [pc, #180]	; (80024e4 <HAL_RCC_OscConfig+0x5d0>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002434:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002438:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	21f8      	movs	r1, #248	; 0xf8
 8002442:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002446:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800244a:	fa91 f1a1 	rbit	r1, r1
 800244e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
	return result;
 8002452:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002456:	fab1 f181 	clz	r1, r1
 800245a:	b2c9      	uxtb	r1, r1
 800245c:	408b      	lsls	r3, r1
 800245e:	4921      	ldr	r1, [pc, #132]	; (80024e4 <HAL_RCC_OscConfig+0x5d0>)
 8002460:	4313      	orrs	r3, r2
 8002462:	600b      	str	r3, [r1, #0]
 8002464:	e06d      	b.n	8002542 <HAL_RCC_OscConfig+0x62e>
 8002466:	2301      	movs	r3, #1
 8002468:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002470:	fa93 f3a3 	rbit	r3, r3
 8002474:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	return result;
 8002478:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
						RCC_OscInitStruct->HSICalibrationValue);
			} else {
				/* Disable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_DISABLE();
 800247c:	fab3 f383 	clz	r3, r3
 8002480:	b2db      	uxtb	r3, r3
 8002482:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002486:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	461a      	mov	r2, r3
 800248e:	2300      	movs	r3, #0
 8002490:	6013      	str	r3, [r2, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8002492:	f7fe f971 	bl	8000778 <HAL_GetTick>
 8002496:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

				/* Wait till HSI is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 800249a:	e00a      	b.n	80024b2 <HAL_RCC_OscConfig+0x59e>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 800249c:	f7fe f96c 	bl	8000778 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d902      	bls.n	80024b2 <HAL_RCC_OscConfig+0x59e>
						return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	f000 bd7e 	b.w	8002fae <HAL_RCC_OscConfig+0x109a>
 80024b2:	2302      	movs	r3, #2
 80024b4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80024bc:	fa93 f3a3 	rbit	r3, r3
 80024c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	return result;
 80024c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 80024c8:	fab3 f383 	clz	r3, r3
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	095b      	lsrs	r3, r3, #5
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d105      	bne.n	80024e8 <HAL_RCC_OscConfig+0x5d4>
 80024dc:	4b01      	ldr	r3, [pc, #4]	; (80024e4 <HAL_RCC_OscConfig+0x5d0>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	e016      	b.n	8002510 <HAL_RCC_OscConfig+0x5fc>
 80024e2:	bf00      	nop
 80024e4:	40021000 	.word	0x40021000
 80024e8:	2302      	movs	r3, #2
 80024ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80024f2:	fa93 f3a3 	rbit	r3, r3
 80024f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80024fa:	2302      	movs	r3, #2
 80024fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002500:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002504:	fa93 f3a3 	rbit	r3, r3
 8002508:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800250c:	4bbf      	ldr	r3, [pc, #764]	; (800280c <HAL_RCC_OscConfig+0x8f8>)
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	2202      	movs	r2, #2
 8002512:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002516:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800251a:	fa92 f2a2 	rbit	r2, r2
 800251e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
	return result;
 8002522:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002526:	fab2 f282 	clz	r2, r2
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	f042 0220 	orr.w	r2, r2, #32
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	f002 021f 	and.w	r2, r2, #31
 8002536:	2101      	movs	r1, #1
 8002538:	fa01 f202 	lsl.w	r2, r1, r2
 800253c:	4013      	ands	r3, r2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1ac      	bne.n	800249c <HAL_RCC_OscConfig+0x588>
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI)
 8002542:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002546:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 8113 	beq.w	800277e <HAL_RCC_OscConfig+0x86a>
			== RCC_OSCILLATORTYPE_LSI) {
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

		/* Check the LSI State */
		if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF) {
 8002558:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800255c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d07c      	beq.n	8002662 <HAL_RCC_OscConfig+0x74e>
 8002568:	2301      	movs	r3, #1
 800256a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002572:	fa93 f3a3 	rbit	r3, r3
 8002576:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	return result;
 800257a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 800257e:	fab3 f383 	clz	r3, r3
 8002582:	b2db      	uxtb	r3, r3
 8002584:	461a      	mov	r2, r3
 8002586:	4ba2      	ldr	r3, [pc, #648]	; (8002810 <HAL_RCC_OscConfig+0x8fc>)
 8002588:	4413      	add	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	461a      	mov	r2, r3
 800258e:	2301      	movs	r3, #1
 8002590:	6013      	str	r3, [r2, #0]

			/* Get Start Tick */
			tickstart = HAL_GetTick();
 8002592:	f7fe f8f1 	bl	8000778 <HAL_GetTick>
 8002596:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 800259a:	e00a      	b.n	80025b2 <HAL_RCC_OscConfig+0x69e>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 800259c:	f7fe f8ec 	bl	8000778 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d902      	bls.n	80025b2 <HAL_RCC_OscConfig+0x69e>
					return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	f000 bcfe 	b.w	8002fae <HAL_RCC_OscConfig+0x109a>
 80025b2:	2302      	movs	r3, #2
 80025b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025bc:	fa93 f2a3 	rbit	r2, r3
 80025c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025c4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80025d2:	2202      	movs	r2, #2
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	fa93 f2a3 	rbit	r2, r3
 80025e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80025f6:	2202      	movs	r2, #2
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	fa93 f2a3 	rbit	r2, r3
 8002608:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800260c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002610:	601a      	str	r2, [r3, #0]
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8002612:	4b7e      	ldr	r3, [pc, #504]	; (800280c <HAL_RCC_OscConfig+0x8f8>)
 8002614:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002616:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800261a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800261e:	2102      	movs	r1, #2
 8002620:	6019      	str	r1, [r3, #0]
 8002622:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002626:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	fa93 f1a3 	rbit	r1, r3
 8002630:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002634:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002638:	6019      	str	r1, [r3, #0]
	return result;
 800263a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800263e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	fab3 f383 	clz	r3, r3
 8002648:	b2db      	uxtb	r3, r3
 800264a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800264e:	b2db      	uxtb	r3, r3
 8002650:	f003 031f 	and.w	r3, r3, #31
 8002654:	2101      	movs	r1, #1
 8002656:	fa01 f303 	lsl.w	r3, r1, r3
 800265a:	4013      	ands	r3, r2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d09d      	beq.n	800259c <HAL_RCC_OscConfig+0x688>
 8002660:	e08d      	b.n	800277e <HAL_RCC_OscConfig+0x86a>
 8002662:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002666:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800266a:	2201      	movs	r2, #1
 800266c:	601a      	str	r2, [r3, #0]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002672:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	fa93 f2a3 	rbit	r2, r3
 800267c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002680:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002684:	601a      	str	r2, [r3, #0]
	return result;
 8002686:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800268a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800268e:	681b      	ldr	r3, [r3, #0]
				}
			}
		} else {
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 8002690:	fab3 f383 	clz	r3, r3
 8002694:	b2db      	uxtb	r3, r3
 8002696:	461a      	mov	r2, r3
 8002698:	4b5d      	ldr	r3, [pc, #372]	; (8002810 <HAL_RCC_OscConfig+0x8fc>)
 800269a:	4413      	add	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	461a      	mov	r2, r3
 80026a0:	2300      	movs	r3, #0
 80026a2:	6013      	str	r3, [r2, #0]

			/* Get Start Tick */
			tickstart = HAL_GetTick();
 80026a4:	f7fe f868 	bl	8000778 <HAL_GetTick>
 80026a8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

			/* Wait till LSI is disabled */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 80026ac:	e00a      	b.n	80026c4 <HAL_RCC_OscConfig+0x7b0>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 80026ae:	f7fe f863 	bl	8000778 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d902      	bls.n	80026c4 <HAL_RCC_OscConfig+0x7b0>
					return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	f000 bc75 	b.w	8002fae <HAL_RCC_OscConfig+0x109a>
 80026c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026c8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80026cc:	2202      	movs	r2, #2
 80026ce:	601a      	str	r2, [r3, #0]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026d4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	fa93 f2a3 	rbit	r2, r3
 80026de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026e2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80026f0:	2202      	movs	r2, #2
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	fa93 f2a3 	rbit	r2, r3
 8002702:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002706:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002710:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002714:	2202      	movs	r2, #2
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800271c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	fa93 f2a3 	rbit	r2, r3
 8002726:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800272a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800272e:	601a      	str	r2, [r3, #0]
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 8002730:	4b36      	ldr	r3, [pc, #216]	; (800280c <HAL_RCC_OscConfig+0x8f8>)
 8002732:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002734:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002738:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800273c:	2102      	movs	r1, #2
 800273e:	6019      	str	r1, [r3, #0]
 8002740:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002744:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	fa93 f1a3 	rbit	r1, r3
 800274e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002752:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002756:	6019      	str	r1, [r3, #0]
	return result;
 8002758:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800275c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	fab3 f383 	clz	r3, r3
 8002766:	b2db      	uxtb	r3, r3
 8002768:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800276c:	b2db      	uxtb	r3, r3
 800276e:	f003 031f 	and.w	r3, r3, #31
 8002772:	2101      	movs	r1, #1
 8002774:	fa01 f303 	lsl.w	r3, r1, r3
 8002778:	4013      	ands	r3, r2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d197      	bne.n	80026ae <HAL_RCC_OscConfig+0x79a>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE)
 800277e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002782:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0304 	and.w	r3, r3, #4
 800278e:	2b00      	cmp	r3, #0
 8002790:	f000 81a5 	beq.w	8002ade <HAL_RCC_OscConfig+0xbca>
			== RCC_OSCILLATORTYPE_LSE) {
		FlagStatus pwrclkchanged = RESET;
 8002794:	2300      	movs	r3, #0
 8002796:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

		/* Update LSE configuration in Backup Domain control register    */
		/* Requires to enable write access to Backup Domain of necessary */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 800279a:	4b1c      	ldr	r3, [pc, #112]	; (800280c <HAL_RCC_OscConfig+0x8f8>)
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d116      	bne.n	80027d4 <HAL_RCC_OscConfig+0x8c0>
			__HAL_RCC_PWR_CLK_ENABLE();
 80027a6:	4b19      	ldr	r3, [pc, #100]	; (800280c <HAL_RCC_OscConfig+0x8f8>)
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	4a18      	ldr	r2, [pc, #96]	; (800280c <HAL_RCC_OscConfig+0x8f8>)
 80027ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b0:	61d3      	str	r3, [r2, #28]
 80027b2:	4b16      	ldr	r3, [pc, #88]	; (800280c <HAL_RCC_OscConfig+0x8f8>)
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80027ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027cc:	681b      	ldr	r3, [r3, #0]
			pwrclkchanged = SET;
 80027ce:	2301      	movs	r3, #1
 80027d0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
		}

		if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 80027d4:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <HAL_RCC_OscConfig+0x900>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d121      	bne.n	8002824 <HAL_RCC_OscConfig+0x910>
			/* Enable write access to Backup domain */
			SET_BIT(PWR->CR, PWR_CR_DBP);
 80027e0:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <HAL_RCC_OscConfig+0x900>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a0b      	ldr	r2, [pc, #44]	; (8002814 <HAL_RCC_OscConfig+0x900>)
 80027e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ea:	6013      	str	r3, [r2, #0]

			/* Wait for Backup domain Write protection disable */
			tickstart = HAL_GetTick();
 80027ec:	f7fd ffc4 	bl	8000778 <HAL_GetTick>
 80027f0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 80027f4:	e010      	b.n	8002818 <HAL_RCC_OscConfig+0x904>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 80027f6:	f7fd ffbf 	bl	8000778 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b64      	cmp	r3, #100	; 0x64
 8002804:	d908      	bls.n	8002818 <HAL_RCC_OscConfig+0x904>
					return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e3d1      	b.n	8002fae <HAL_RCC_OscConfig+0x109a>
 800280a:	bf00      	nop
 800280c:	40021000 	.word	0x40021000
 8002810:	10908120 	.word	0x10908120
 8002814:	40007000 	.word	0x40007000
			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8002818:	4b8d      	ldr	r3, [pc, #564]	; (8002a50 <HAL_RCC_OscConfig+0xb3c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0e8      	beq.n	80027f6 <HAL_RCC_OscConfig+0x8e2>
				}
			}
		}

		/* Set the new LSE configuration -----------------------------------------*/
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002824:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002828:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d106      	bne.n	8002842 <HAL_RCC_OscConfig+0x92e>
 8002834:	4b87      	ldr	r3, [pc, #540]	; (8002a54 <HAL_RCC_OscConfig+0xb40>)
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	4a86      	ldr	r2, [pc, #536]	; (8002a54 <HAL_RCC_OscConfig+0xb40>)
 800283a:	f043 0301 	orr.w	r3, r3, #1
 800283e:	6213      	str	r3, [r2, #32]
 8002840:	e035      	b.n	80028ae <HAL_RCC_OscConfig+0x99a>
 8002842:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002846:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10c      	bne.n	800286c <HAL_RCC_OscConfig+0x958>
 8002852:	4b80      	ldr	r3, [pc, #512]	; (8002a54 <HAL_RCC_OscConfig+0xb40>)
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	4a7f      	ldr	r2, [pc, #508]	; (8002a54 <HAL_RCC_OscConfig+0xb40>)
 8002858:	f023 0301 	bic.w	r3, r3, #1
 800285c:	6213      	str	r3, [r2, #32]
 800285e:	4b7d      	ldr	r3, [pc, #500]	; (8002a54 <HAL_RCC_OscConfig+0xb40>)
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	4a7c      	ldr	r2, [pc, #496]	; (8002a54 <HAL_RCC_OscConfig+0xb40>)
 8002864:	f023 0304 	bic.w	r3, r3, #4
 8002868:	6213      	str	r3, [r2, #32]
 800286a:	e020      	b.n	80028ae <HAL_RCC_OscConfig+0x99a>
 800286c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002870:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	2b05      	cmp	r3, #5
 800287a:	d10c      	bne.n	8002896 <HAL_RCC_OscConfig+0x982>
 800287c:	4b75      	ldr	r3, [pc, #468]	; (8002a54 <HAL_RCC_OscConfig+0xb40>)
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	4a74      	ldr	r2, [pc, #464]	; (8002a54 <HAL_RCC_OscConfig+0xb40>)
 8002882:	f043 0304 	orr.w	r3, r3, #4
 8002886:	6213      	str	r3, [r2, #32]
 8002888:	4b72      	ldr	r3, [pc, #456]	; (8002a54 <HAL_RCC_OscConfig+0xb40>)
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	4a71      	ldr	r2, [pc, #452]	; (8002a54 <HAL_RCC_OscConfig+0xb40>)
 800288e:	f043 0301 	orr.w	r3, r3, #1
 8002892:	6213      	str	r3, [r2, #32]
 8002894:	e00b      	b.n	80028ae <HAL_RCC_OscConfig+0x99a>
 8002896:	4b6f      	ldr	r3, [pc, #444]	; (8002a54 <HAL_RCC_OscConfig+0xb40>)
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	4a6e      	ldr	r2, [pc, #440]	; (8002a54 <HAL_RCC_OscConfig+0xb40>)
 800289c:	f023 0301 	bic.w	r3, r3, #1
 80028a0:	6213      	str	r3, [r2, #32]
 80028a2:	4b6c      	ldr	r3, [pc, #432]	; (8002a54 <HAL_RCC_OscConfig+0xb40>)
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	4a6b      	ldr	r2, [pc, #428]	; (8002a54 <HAL_RCC_OscConfig+0xb40>)
 80028a8:	f023 0304 	bic.w	r3, r3, #4
 80028ac:	6213      	str	r3, [r2, #32]
		/* Check the LSE State */
		if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF) {
 80028ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028b2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 8081 	beq.w	80029c2 <HAL_RCC_OscConfig+0xaae>
			/* Get Start Tick */
			tickstart = HAL_GetTick();
 80028c0:	f7fd ff5a 	bl	8000778 <HAL_GetTick>
 80028c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 80028c8:	e00b      	b.n	80028e2 <HAL_RCC_OscConfig+0x9ce>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 80028ca:	f7fd ff55 	bl	8000778 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028da:	4293      	cmp	r3, r2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x9ce>
					return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e365      	b.n	8002fae <HAL_RCC_OscConfig+0x109a>
 80028e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028e6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80028ea:	2202      	movs	r2, #2
 80028ec:	601a      	str	r2, [r3, #0]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028f2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	fa93 f2a3 	rbit	r2, r3
 80028fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002900:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800290a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800290e:	2202      	movs	r2, #2
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002916:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	fa93 f2a3 	rbit	r2, r3
 8002920:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002924:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002928:	601a      	str	r2, [r3, #0]
	return result;
 800292a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800292e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002932:	681b      	ldr	r3, [r3, #0]
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8002934:	fab3 f383 	clz	r3, r3
 8002938:	b2db      	uxtb	r3, r3
 800293a:	095b      	lsrs	r3, r3, #5
 800293c:	b2db      	uxtb	r3, r3
 800293e:	f043 0302 	orr.w	r3, r3, #2
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d102      	bne.n	800294e <HAL_RCC_OscConfig+0xa3a>
 8002948:	4b42      	ldr	r3, [pc, #264]	; (8002a54 <HAL_RCC_OscConfig+0xb40>)
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	e013      	b.n	8002976 <HAL_RCC_OscConfig+0xa62>
 800294e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002952:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002956:	2202      	movs	r2, #2
 8002958:	601a      	str	r2, [r3, #0]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800295e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	fa93 f2a3 	rbit	r2, r3
 8002968:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800296c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	4b38      	ldr	r3, [pc, #224]	; (8002a54 <HAL_RCC_OscConfig+0xb40>)
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800297a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800297e:	2102      	movs	r1, #2
 8002980:	6011      	str	r1, [r2, #0]
 8002982:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002986:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800298a:	6812      	ldr	r2, [r2, #0]
 800298c:	fa92 f1a2 	rbit	r1, r2
 8002990:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002994:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002998:	6011      	str	r1, [r2, #0]
	return result;
 800299a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800299e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80029a2:	6812      	ldr	r2, [r2, #0]
 80029a4:	fab2 f282 	clz	r2, r2
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	f002 021f 	and.w	r2, r2, #31
 80029b4:	2101      	movs	r1, #1
 80029b6:	fa01 f202 	lsl.w	r2, r1, r2
 80029ba:	4013      	ands	r3, r2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d084      	beq.n	80028ca <HAL_RCC_OscConfig+0x9b6>
 80029c0:	e083      	b.n	8002aca <HAL_RCC_OscConfig+0xbb6>
				}
			}
		} else {
			/* Get Start Tick */
			tickstart = HAL_GetTick();
 80029c2:	f7fd fed9 	bl	8000778 <HAL_GetTick>
 80029c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

			/* Wait till LSE is disabled */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 80029ca:	e00b      	b.n	80029e4 <HAL_RCC_OscConfig+0xad0>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 80029cc:	f7fd fed4 	bl	8000778 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029dc:	4293      	cmp	r3, r2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0xad0>
					return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e2e4      	b.n	8002fae <HAL_RCC_OscConfig+0x109a>
 80029e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029e8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80029ec:	2202      	movs	r2, #2
 80029ee:	601a      	str	r2, [r3, #0]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029f4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	fa93 f2a3 	rbit	r2, r3
 80029fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a02:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a0c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002a10:	2202      	movs	r2, #2
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a18:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	fa93 f2a3 	rbit	r2, r3
 8002a22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a26:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002a2a:	601a      	str	r2, [r3, #0]
	return result;
 8002a2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a30:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002a34:	681b      	ldr	r3, [r3, #0]
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 8002a36:	fab3 f383 	clz	r3, r3
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	095b      	lsrs	r3, r3, #5
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	f043 0302 	orr.w	r3, r3, #2
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d106      	bne.n	8002a58 <HAL_RCC_OscConfig+0xb44>
 8002a4a:	4b02      	ldr	r3, [pc, #8]	; (8002a54 <HAL_RCC_OscConfig+0xb40>)
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	e017      	b.n	8002a80 <HAL_RCC_OscConfig+0xb6c>
 8002a50:	40007000 	.word	0x40007000
 8002a54:	40021000 	.word	0x40021000
 8002a58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a5c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002a60:	2202      	movs	r2, #2
 8002a62:	601a      	str	r2, [r3, #0]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a68:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	fa93 f2a3 	rbit	r2, r3
 8002a72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a76:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	4bb3      	ldr	r3, [pc, #716]	; (8002d4c <HAL_RCC_OscConfig+0xe38>)
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a84:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002a88:	2102      	movs	r1, #2
 8002a8a:	6011      	str	r1, [r2, #0]
 8002a8c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a90:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002a94:	6812      	ldr	r2, [r2, #0]
 8002a96:	fa92 f1a2 	rbit	r1, r2
 8002a9a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a9e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002aa2:	6011      	str	r1, [r2, #0]
	return result;
 8002aa4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002aa8:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002aac:	6812      	ldr	r2, [r2, #0]
 8002aae:	fab2 f282 	clz	r2, r2
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	f002 021f 	and.w	r2, r2, #31
 8002abe:	2101      	movs	r1, #1
 8002ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d180      	bne.n	80029cc <HAL_RCC_OscConfig+0xab8>
				}
			}
		}

		/* Require to disable power clock if necessary */
		if (pwrclkchanged == SET) {
 8002aca:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d105      	bne.n	8002ade <HAL_RCC_OscConfig+0xbca>
			__HAL_RCC_PWR_CLK_DISABLE();
 8002ad2:	4b9e      	ldr	r3, [pc, #632]	; (8002d4c <HAL_RCC_OscConfig+0xe38>)
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	4a9d      	ldr	r2, [pc, #628]	; (8002d4c <HAL_RCC_OscConfig+0xe38>)
 8002ad8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002adc:	61d3      	str	r3, [r2, #28]
	}

	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
	if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 8002ade:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ae2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 825e 	beq.w	8002fac <HAL_RCC_OscConfig+0x1098>
		/* Check if the PLL is used as system clock or not */
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {
 8002af0:	4b96      	ldr	r3, [pc, #600]	; (8002d4c <HAL_RCC_OscConfig+0xe38>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 030c 	and.w	r3, r3, #12
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	f000 821f 	beq.w	8002f3c <HAL_RCC_OscConfig+0x1028>
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 8002afe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b02:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	f040 8170 	bne.w	8002df0 <HAL_RCC_OscConfig+0xedc>
 8002b10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b14:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002b18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b1c:	601a      	str	r2, [r3, #0]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b22:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	fa93 f2a3 	rbit	r2, r3
 8002b2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b30:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002b34:	601a      	str	r2, [r3, #0]
	return result;
 8002b36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b3a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002b3e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
				assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif

				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 8002b40:	fab3 f383 	clz	r3, r3
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b4a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	461a      	mov	r2, r3
 8002b52:	2300      	movs	r3, #0
 8002b54:	6013      	str	r3, [r2, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8002b56:	f7fd fe0f 	bl	8000778 <HAL_GetTick>
 8002b5a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

				/* Wait till PLL is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8002b5e:	e009      	b.n	8002b74 <HAL_RCC_OscConfig+0xc60>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8002b60:	f7fd fe0a 	bl	8000778 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0xc60>
						return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e21c      	b.n	8002fae <HAL_RCC_OscConfig+0x109a>
 8002b74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b78:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002b7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b80:	601a      	str	r2, [r3, #0]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b86:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	fa93 f2a3 	rbit	r2, r3
 8002b90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b94:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002b98:	601a      	str	r2, [r3, #0]
	return result;
 8002b9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b9e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002ba2:	681b      	ldr	r3, [r3, #0]
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8002ba4:	fab3 f383 	clz	r3, r3
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	f043 0301 	orr.w	r3, r3, #1
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d102      	bne.n	8002bbe <HAL_RCC_OscConfig+0xcaa>
 8002bb8:	4b64      	ldr	r3, [pc, #400]	; (8002d4c <HAL_RCC_OscConfig+0xe38>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	e027      	b.n	8002c0e <HAL_RCC_OscConfig+0xcfa>
 8002bbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bc2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002bc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bca:	601a      	str	r2, [r3, #0]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bd0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	fa93 f2a3 	rbit	r2, r3
 8002bda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bde:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002be8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002bec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bf6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	fa93 f2a3 	rbit	r2, r3
 8002c00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c04:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	4b50      	ldr	r3, [pc, #320]	; (8002d4c <HAL_RCC_OscConfig+0xe38>)
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c12:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002c16:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c1a:	6011      	str	r1, [r2, #0]
 8002c1c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c20:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002c24:	6812      	ldr	r2, [r2, #0]
 8002c26:	fa92 f1a2 	rbit	r1, r2
 8002c2a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c2e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002c32:	6011      	str	r1, [r2, #0]
	return result;
 8002c34:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c38:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002c3c:	6812      	ldr	r2, [r2, #0]
 8002c3e:	fab2 f282 	clz	r2, r2
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	f042 0220 	orr.w	r2, r2, #32
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	f002 021f 	and.w	r2, r2, #31
 8002c4e:	2101      	movs	r1, #1
 8002c50:	fa01 f202 	lsl.w	r2, r1, r2
 8002c54:	4013      	ands	r3, r2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d182      	bne.n	8002b60 <HAL_RCC_OscConfig+0xc4c>
					}
				}

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
				/* Configure the main PLL clock source, predivider and multiplication factor. */
				__HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c5a:	4b3c      	ldr	r3, [pc, #240]	; (8002d4c <HAL_RCC_OscConfig+0xe38>)
 8002c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5e:	f023 020f 	bic.w	r2, r3, #15
 8002c62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c66:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	4937      	ldr	r1, [pc, #220]	; (8002d4c <HAL_RCC_OscConfig+0xe38>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002c74:	4b35      	ldr	r3, [pc, #212]	; (8002d4c <HAL_RCC_OscConfig+0xe38>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002c7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c80:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6a19      	ldr	r1, [r3, #32]
 8002c88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c8c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	430b      	orrs	r3, r1
 8002c96:	492d      	ldr	r1, [pc, #180]	; (8002d4c <HAL_RCC_OscConfig+0xe38>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	604b      	str	r3, [r1, #4]
 8002c9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ca0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002ca4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ca8:	601a      	str	r2, [r3, #0]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002caa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cae:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	fa93 f2a3 	rbit	r2, r3
 8002cb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cbc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002cc0:	601a      	str	r2, [r3, #0]
	return result;
 8002cc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cc6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002cca:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
				/* Enable the main PLL. */
				__HAL_RCC_PLL_ENABLE();
 8002ccc:	fab3 f383 	clz	r3, r3
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cd6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	461a      	mov	r2, r3
 8002cde:	2301      	movs	r3, #1
 8002ce0:	6013      	str	r3, [r2, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8002ce2:	f7fd fd49 	bl	8000778 <HAL_GetTick>
 8002ce6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8002cea:	e009      	b.n	8002d00 <HAL_RCC_OscConfig+0xdec>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8002cec:	f7fd fd44 	bl	8000778 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0xdec>
						return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e156      	b.n	8002fae <HAL_RCC_OscConfig+0x109a>
 8002d00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d04:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002d08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d0c:	601a      	str	r2, [r3, #0]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d12:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	fa93 f2a3 	rbit	r2, r3
 8002d1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d20:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002d24:	601a      	str	r2, [r3, #0]
	return result;
 8002d26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d2a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002d2e:	681b      	ldr	r3, [r3, #0]
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8002d30:	fab3 f383 	clz	r3, r3
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	095b      	lsrs	r3, r3, #5
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	f043 0301 	orr.w	r3, r3, #1
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d105      	bne.n	8002d50 <HAL_RCC_OscConfig+0xe3c>
 8002d44:	4b01      	ldr	r3, [pc, #4]	; (8002d4c <HAL_RCC_OscConfig+0xe38>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	e02a      	b.n	8002da0 <HAL_RCC_OscConfig+0xe8c>
 8002d4a:	bf00      	nop
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d54:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002d58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d5c:	601a      	str	r2, [r3, #0]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d62:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	fa93 f2a3 	rbit	r2, r3
 8002d6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d70:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d7a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002d7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d88:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	fa93 f2a3 	rbit	r2, r3
 8002d92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d96:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	4b86      	ldr	r3, [pc, #536]	; (8002fb8 <HAL_RCC_OscConfig+0x10a4>)
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002da4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002da8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002dac:	6011      	str	r1, [r2, #0]
 8002dae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002db2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002db6:	6812      	ldr	r2, [r2, #0]
 8002db8:	fa92 f1a2 	rbit	r1, r2
 8002dbc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002dc0:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002dc4:	6011      	str	r1, [r2, #0]
	return result;
 8002dc6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002dca:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002dce:	6812      	ldr	r2, [r2, #0]
 8002dd0:	fab2 f282 	clz	r2, r2
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	f042 0220 	orr.w	r2, r2, #32
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	f002 021f 	and.w	r2, r2, #31
 8002de0:	2101      	movs	r1, #1
 8002de2:	fa01 f202 	lsl.w	r2, r1, r2
 8002de6:	4013      	ands	r3, r2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f43f af7f 	beq.w	8002cec <HAL_RCC_OscConfig+0xdd8>
 8002dee:	e0dd      	b.n	8002fac <HAL_RCC_OscConfig+0x1098>
 8002df0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002df4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002df8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002dfc:	601a      	str	r2, [r3, #0]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e02:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	fa93 f2a3 	rbit	r2, r3
 8002e0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e10:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002e14:	601a      	str	r2, [r3, #0]
	return result;
 8002e16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e1a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002e1e:	681b      	ldr	r3, [r3, #0]
					}
				}
			} else {
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 8002e20:	fab3 f383 	clz	r3, r3
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e2a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	461a      	mov	r2, r3
 8002e32:	2300      	movs	r3, #0
 8002e34:	6013      	str	r3, [r2, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8002e36:	f7fd fc9f 	bl	8000778 <HAL_GetTick>
 8002e3a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

				/* Wait till PLL is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8002e3e:	e009      	b.n	8002e54 <HAL_RCC_OscConfig+0xf40>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8002e40:	f7fd fc9a 	bl	8000778 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0xf40>
						return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e0ac      	b.n	8002fae <HAL_RCC_OscConfig+0x109a>
 8002e54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e58:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e60:	601a      	str	r2, [r3, #0]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e66:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	fa93 f2a3 	rbit	r2, r3
 8002e70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e74:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002e78:	601a      	str	r2, [r3, #0]
	return result;
 8002e7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e7e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002e82:	681b      	ldr	r3, [r3, #0]
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8002e84:	fab3 f383 	clz	r3, r3
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	095b      	lsrs	r3, r3, #5
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d102      	bne.n	8002e9e <HAL_RCC_OscConfig+0xf8a>
 8002e98:	4b47      	ldr	r3, [pc, #284]	; (8002fb8 <HAL_RCC_OscConfig+0x10a4>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	e027      	b.n	8002eee <HAL_RCC_OscConfig+0xfda>
 8002e9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ea2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002ea6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002eaa:	601a      	str	r2, [r3, #0]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eb0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	fa93 f2a3 	rbit	r2, r3
 8002eba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ebe:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ec8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002ecc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ed6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	fa93 f2a3 	rbit	r2, r3
 8002ee0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ee4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	4b33      	ldr	r3, [pc, #204]	; (8002fb8 <HAL_RCC_OscConfig+0x10a4>)
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ef2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002ef6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002efa:	6011      	str	r1, [r2, #0]
 8002efc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f00:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002f04:	6812      	ldr	r2, [r2, #0]
 8002f06:	fa92 f1a2 	rbit	r1, r2
 8002f0a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f0e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002f12:	6011      	str	r1, [r2, #0]
	return result;
 8002f14:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f18:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002f1c:	6812      	ldr	r2, [r2, #0]
 8002f1e:	fab2 f282 	clz	r2, r2
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	f042 0220 	orr.w	r2, r2, #32
 8002f28:	b2d2      	uxtb	r2, r2
 8002f2a:	f002 021f 	and.w	r2, r2, #31
 8002f2e:	2101      	movs	r1, #1
 8002f30:	fa01 f202 	lsl.w	r2, r1, r2
 8002f34:	4013      	ands	r3, r2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d182      	bne.n	8002e40 <HAL_RCC_OscConfig+0xf2c>
 8002f3a:	e037      	b.n	8002fac <HAL_RCC_OscConfig+0x1098>
					}
				}
			}
		} else {
			/* Check if there is a request to disable the PLL used as System clock source */
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) {
 8002f3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f40:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <HAL_RCC_OscConfig+0x103c>
				return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e02e      	b.n	8002fae <HAL_RCC_OscConfig+0x109a>
			} else {
				/* Do not return HAL_ERROR if request repeats the current configuration */
				pll_config = RCC->CFGR;
 8002f50:	4b19      	ldr	r3, [pc, #100]	; (8002fb8 <HAL_RCC_OscConfig+0x10a4>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
				pll_config2 = RCC->CFGR2;
 8002f58:	4b17      	ldr	r3, [pc, #92]	; (8002fb8 <HAL_RCC_OscConfig+0x10a4>)
 8002f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
				if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC)
 8002f60:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002f64:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
						!= RCC_OscInitStruct->PLL.PLLSource)
 8002f68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f6c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	69db      	ldr	r3, [r3, #28]
				if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC)
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d117      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x1094>
						|| (READ_BIT(pll_config, RCC_CFGR_PLLMUL)
 8002f78:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002f7c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
								!= RCC_OscInitStruct->PLL.PLLMUL)
 8002f80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f84:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
						|| (READ_BIT(pll_config, RCC_CFGR_PLLMUL)
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d10b      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x1094>
						|| (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)
 8002f90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f94:	f003 020f 	and.w	r2, r3, #15
								!= RCC_OscInitStruct->PLL.PREDIV))
 8002f98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f9c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
						|| (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d001      	beq.n	8002fac <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
						{
					return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e000      	b.n	8002fae <HAL_RCC_OscConfig+0x109a>
				}
			}
		}
	}

	return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40021000 	.word	0x40021000

08002fbc <HAL_RCC_ClockConfig>:
 *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
 *         currently used as system clock source.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
		uint32_t FLatency) {
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b09e      	sub	sp, #120	; 0x78
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
	uint32_t tickstart = 0U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	677b      	str	r3, [r7, #116]	; 0x74

	/* Check Null pointer */
	if (RCC_ClkInitStruct == NULL) {
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0x18>
		return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e162      	b.n	800329a <HAL_RCC_ClockConfig+0x2de>
	/* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
	 must be correctly programmed according to the frequency of the CPU clock 
	 (HCLK) of the device. */

	/* Increasing the number of wait states because of higher CPU frequency */
	if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 8002fd4:	4b90      	ldr	r3, [pc, #576]	; (8003218 <HAL_RCC_ClockConfig+0x25c>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d910      	bls.n	8003004 <HAL_RCC_ClockConfig+0x48>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 8002fe2:	4b8d      	ldr	r3, [pc, #564]	; (8003218 <HAL_RCC_ClockConfig+0x25c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f023 0207 	bic.w	r2, r3, #7
 8002fea:	498b      	ldr	r1, [pc, #556]	; (8003218 <HAL_RCC_ClockConfig+0x25c>)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	600b      	str	r3, [r1, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8002ff2:	4b89      	ldr	r3, [pc, #548]	; (8003218 <HAL_RCC_ClockConfig+0x25c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d001      	beq.n	8003004 <HAL_RCC_ClockConfig+0x48>
			return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e14a      	b.n	800329a <HAL_RCC_ClockConfig+0x2de>
		}
	}

	/*-------------------------- HCLK Configuration --------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d008      	beq.n	8003022 <HAL_RCC_ClockConfig+0x66>
			== RCC_CLOCKTYPE_HCLK) {
		assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003010:	4b82      	ldr	r3, [pc, #520]	; (800321c <HAL_RCC_ClockConfig+0x260>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	497f      	ldr	r1, [pc, #508]	; (800321c <HAL_RCC_ClockConfig+0x260>)
 800301e:	4313      	orrs	r3, r2
 8003020:	604b      	str	r3, [r1, #4]
	}

	/*------------------------- SYSCLK Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 80dc 	beq.w	80031e8 <HAL_RCC_ClockConfig+0x22c>
			== RCC_CLOCKTYPE_SYSCLK) {
		assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

		/* HSE is selected as System Clock Source */
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d13c      	bne.n	80030b2 <HAL_RCC_ClockConfig+0xf6>
 8003038:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800303c:	673b      	str	r3, [r7, #112]	; 0x70
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003040:	fa93 f3a3 	rbit	r3, r3
 8003044:	66fb      	str	r3, [r7, #108]	; 0x6c
	return result;
 8003046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
			/* Check the HSE ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8003048:	fab3 f383 	clz	r3, r3
 800304c:	b2db      	uxtb	r3, r3
 800304e:	095b      	lsrs	r3, r3, #5
 8003050:	b2db      	uxtb	r3, r3
 8003052:	f043 0301 	orr.w	r3, r3, #1
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b01      	cmp	r3, #1
 800305a:	d102      	bne.n	8003062 <HAL_RCC_ClockConfig+0xa6>
 800305c:	4b6f      	ldr	r3, [pc, #444]	; (800321c <HAL_RCC_ClockConfig+0x260>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	e00f      	b.n	8003082 <HAL_RCC_ClockConfig+0xc6>
 8003062:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003066:	66bb      	str	r3, [r7, #104]	; 0x68
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003068:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800306a:	fa93 f3a3 	rbit	r3, r3
 800306e:	667b      	str	r3, [r7, #100]	; 0x64
 8003070:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003074:	663b      	str	r3, [r7, #96]	; 0x60
 8003076:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003078:	fa93 f3a3 	rbit	r3, r3
 800307c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800307e:	4b67      	ldr	r3, [pc, #412]	; (800321c <HAL_RCC_ClockConfig+0x260>)
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003086:	65ba      	str	r2, [r7, #88]	; 0x58
 8003088:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800308a:	fa92 f2a2 	rbit	r2, r2
 800308e:	657a      	str	r2, [r7, #84]	; 0x54
	return result;
 8003090:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003092:	fab2 f282 	clz	r2, r2
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	f042 0220 	orr.w	r2, r2, #32
 800309c:	b2d2      	uxtb	r2, r2
 800309e:	f002 021f 	and.w	r2, r2, #31
 80030a2:	2101      	movs	r1, #1
 80030a4:	fa01 f202 	lsl.w	r2, r1, r2
 80030a8:	4013      	ands	r3, r2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d17b      	bne.n	80031a6 <HAL_RCC_ClockConfig+0x1ea>
				return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e0f3      	b.n	800329a <HAL_RCC_ClockConfig+0x2de>
			}
		}
		/* PLL is selected as System Clock Source */
		else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) {
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d13c      	bne.n	8003134 <HAL_RCC_ClockConfig+0x178>
 80030ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030be:	653b      	str	r3, [r7, #80]	; 0x50
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030c2:	fa93 f3a3 	rbit	r3, r3
 80030c6:	64fb      	str	r3, [r7, #76]	; 0x4c
	return result;
 80030c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
			/* Check the PLL ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 80030ca:	fab3 f383 	clz	r3, r3
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	095b      	lsrs	r3, r3, #5
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	f043 0301 	orr.w	r3, r3, #1
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d102      	bne.n	80030e4 <HAL_RCC_ClockConfig+0x128>
 80030de:	4b4f      	ldr	r3, [pc, #316]	; (800321c <HAL_RCC_ClockConfig+0x260>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	e00f      	b.n	8003104 <HAL_RCC_ClockConfig+0x148>
 80030e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030e8:	64bb      	str	r3, [r7, #72]	; 0x48
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ec:	fa93 f3a3 	rbit	r3, r3
 80030f0:	647b      	str	r3, [r7, #68]	; 0x44
 80030f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030f6:	643b      	str	r3, [r7, #64]	; 0x40
 80030f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030fa:	fa93 f3a3 	rbit	r3, r3
 80030fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003100:	4b46      	ldr	r3, [pc, #280]	; (800321c <HAL_RCC_ClockConfig+0x260>)
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003108:	63ba      	str	r2, [r7, #56]	; 0x38
 800310a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800310c:	fa92 f2a2 	rbit	r2, r2
 8003110:	637a      	str	r2, [r7, #52]	; 0x34
	return result;
 8003112:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003114:	fab2 f282 	clz	r2, r2
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	f042 0220 	orr.w	r2, r2, #32
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	f002 021f 	and.w	r2, r2, #31
 8003124:	2101      	movs	r1, #1
 8003126:	fa01 f202 	lsl.w	r2, r1, r2
 800312a:	4013      	ands	r3, r2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d13a      	bne.n	80031a6 <HAL_RCC_ClockConfig+0x1ea>
				return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e0b2      	b.n	800329a <HAL_RCC_ClockConfig+0x2de>
 8003134:	2302      	movs	r3, #2
 8003136:	633b      	str	r3, [r7, #48]	; 0x30
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313a:	fa93 f3a3 	rbit	r3, r3
 800313e:	62fb      	str	r3, [r7, #44]	; 0x2c
	return result;
 8003140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
			}
		}
		/* HSI is selected as System Clock Source */
		else {
			/* Check the HSI ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8003142:	fab3 f383 	clz	r3, r3
 8003146:	b2db      	uxtb	r3, r3
 8003148:	095b      	lsrs	r3, r3, #5
 800314a:	b2db      	uxtb	r3, r3
 800314c:	f043 0301 	orr.w	r3, r3, #1
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b01      	cmp	r3, #1
 8003154:	d102      	bne.n	800315c <HAL_RCC_ClockConfig+0x1a0>
 8003156:	4b31      	ldr	r3, [pc, #196]	; (800321c <HAL_RCC_ClockConfig+0x260>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	e00d      	b.n	8003178 <HAL_RCC_ClockConfig+0x1bc>
 800315c:	2302      	movs	r3, #2
 800315e:	62bb      	str	r3, [r7, #40]	; 0x28
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003162:	fa93 f3a3 	rbit	r3, r3
 8003166:	627b      	str	r3, [r7, #36]	; 0x24
 8003168:	2302      	movs	r3, #2
 800316a:	623b      	str	r3, [r7, #32]
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	fa93 f3a3 	rbit	r3, r3
 8003172:	61fb      	str	r3, [r7, #28]
 8003174:	4b29      	ldr	r3, [pc, #164]	; (800321c <HAL_RCC_ClockConfig+0x260>)
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	2202      	movs	r2, #2
 800317a:	61ba      	str	r2, [r7, #24]
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	fa92 f2a2 	rbit	r2, r2
 8003182:	617a      	str	r2, [r7, #20]
	return result;
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	fab2 f282 	clz	r2, r2
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	f042 0220 	orr.w	r2, r2, #32
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	f002 021f 	and.w	r2, r2, #31
 8003196:	2101      	movs	r1, #1
 8003198:	fa01 f202 	lsl.w	r2, r1, r2
 800319c:	4013      	ands	r3, r2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_RCC_ClockConfig+0x1ea>
				return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e079      	b.n	800329a <HAL_RCC_ClockConfig+0x2de>
			}
		}

		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031a6:	4b1d      	ldr	r3, [pc, #116]	; (800321c <HAL_RCC_ClockConfig+0x260>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f023 0203 	bic.w	r2, r3, #3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	491a      	ldr	r1, [pc, #104]	; (800321c <HAL_RCC_ClockConfig+0x260>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	604b      	str	r3, [r1, #4]

		/* Get Start Tick */
		tickstart = HAL_GetTick();
 80031b8:	f7fd fade 	bl	8000778 <HAL_GetTick>
 80031bc:	6778      	str	r0, [r7, #116]	; 0x74

		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 80031be:	e00a      	b.n	80031d6 <HAL_RCC_ClockConfig+0x21a>
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 80031c0:	f7fd fada 	bl	8000778 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_ClockConfig+0x21a>
				return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e061      	b.n	800329a <HAL_RCC_ClockConfig+0x2de>
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 80031d6:	4b11      	ldr	r3, [pc, #68]	; (800321c <HAL_RCC_ClockConfig+0x260>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f003 020c 	and.w	r2, r3, #12
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	009b      	lsls	r3, r3, #2
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d1eb      	bne.n	80031c0 <HAL_RCC_ClockConfig+0x204>
			}
		}
	}
	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 80031e8:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <HAL_RCC_ClockConfig+0x25c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d214      	bcs.n	8003220 <HAL_RCC_ClockConfig+0x264>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 80031f6:	4b08      	ldr	r3, [pc, #32]	; (8003218 <HAL_RCC_ClockConfig+0x25c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f023 0207 	bic.w	r2, r3, #7
 80031fe:	4906      	ldr	r1, [pc, #24]	; (8003218 <HAL_RCC_ClockConfig+0x25c>)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	4313      	orrs	r3, r2
 8003204:	600b      	str	r3, [r1, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8003206:	4b04      	ldr	r3, [pc, #16]	; (8003218 <HAL_RCC_ClockConfig+0x25c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d005      	beq.n	8003220 <HAL_RCC_ClockConfig+0x264>
			return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e040      	b.n	800329a <HAL_RCC_ClockConfig+0x2de>
 8003218:	40022000 	.word	0x40022000
 800321c:	40021000 	.word	0x40021000
		}
	}

	/*-------------------------- PCLK1 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d008      	beq.n	800323e <HAL_RCC_ClockConfig+0x282>
			== RCC_CLOCKTYPE_PCLK1) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1,
 800322c:	4b1d      	ldr	r3, [pc, #116]	; (80032a4 <HAL_RCC_ClockConfig+0x2e8>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	491a      	ldr	r1, [pc, #104]	; (80032a4 <HAL_RCC_ClockConfig+0x2e8>)
 800323a:	4313      	orrs	r3, r2
 800323c:	604b      	str	r3, [r1, #4]
				RCC_ClkInitStruct->APB1CLKDivider);
	}

	/*-------------------------- PCLK2 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b00      	cmp	r3, #0
 8003248:	d009      	beq.n	800325e <HAL_RCC_ClockConfig+0x2a2>
			== RCC_CLOCKTYPE_PCLK2) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2,
 800324a:	4b16      	ldr	r3, [pc, #88]	; (80032a4 <HAL_RCC_ClockConfig+0x2e8>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	4912      	ldr	r1, [pc, #72]	; (80032a4 <HAL_RCC_ClockConfig+0x2e8>)
 800325a:	4313      	orrs	r3, r2
 800325c:	604b      	str	r3, [r1, #4]
				((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
	}

	/* Update the SystemCoreClock global variable */
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 800325e:	f000 f829 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 8003262:	4601      	mov	r1, r0
			>> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)
 8003264:	4b0f      	ldr	r3, [pc, #60]	; (80032a4 <HAL_RCC_ClockConfig+0x2e8>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800326c:	22f0      	movs	r2, #240	; 0xf0
 800326e:	613a      	str	r2, [r7, #16]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	fa92 f2a2 	rbit	r2, r2
 8003276:	60fa      	str	r2, [r7, #12]
	return result;
 8003278:	68fa      	ldr	r2, [r7, #12]
					>> RCC_CFGR_HPRE_BITNUMBER];
 800327a:	fab2 f282 	clz	r2, r2
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	40d3      	lsrs	r3, r2
			>> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)
 8003282:	4a09      	ldr	r2, [pc, #36]	; (80032a8 <HAL_RCC_ClockConfig+0x2ec>)
 8003284:	5cd3      	ldrb	r3, [r2, r3]
 8003286:	fa21 f303 	lsr.w	r3, r1, r3
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 800328a:	4a08      	ldr	r2, [pc, #32]	; (80032ac <HAL_RCC_ClockConfig+0x2f0>)
 800328c:	6013      	str	r3, [r2, #0]

	/* Configure the source of time base considering new system clocks settings*/
	HAL_InitTick(uwTickPrio);
 800328e:	4b08      	ldr	r3, [pc, #32]	; (80032b0 <HAL_RCC_ClockConfig+0x2f4>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f7fd fa2c 	bl	80006f0 <HAL_InitTick>

	return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3778      	adds	r7, #120	; 0x78
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40021000 	.word	0x40021000
 80032a8:	08003834 	.word	0x08003834
 80032ac:	20000000 	.word	0x20000000
 80032b0:	20000004 	.word	0x20000004

080032b4 <HAL_RCC_GetSysClockFreq>:
 * @note   Each time SYSCLK changes, this function must be called to update the
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *         
 * @retval SYSCLK frequency
 */
uint32_t HAL_RCC_GetSysClockFreq(void) {
 80032b4:	b480      	push	{r7}
 80032b6:	b08b      	sub	sp, #44	; 0x2c
 80032b8:	af00      	add	r7, sp, #0
	uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	61fb      	str	r3, [r7, #28]
 80032be:	2300      	movs	r3, #0
 80032c0:	61bb      	str	r3, [r7, #24]
 80032c2:	2300      	movs	r3, #0
 80032c4:	627b      	str	r3, [r7, #36]	; 0x24
 80032c6:	2300      	movs	r3, #0
 80032c8:	617b      	str	r3, [r7, #20]
	uint32_t sysclockfreq = 0U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	623b      	str	r3, [r7, #32]

	tmpreg = RCC->CFGR;
 80032ce:	4b2a      	ldr	r3, [pc, #168]	; (8003378 <HAL_RCC_GetSysClockFreq+0xc4>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	61fb      	str	r3, [r7, #28]

	/* Get SYSCLK source -------------------------------------------------------*/
	switch (tmpreg & RCC_CFGR_SWS) {
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f003 030c 	and.w	r3, r3, #12
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d002      	beq.n	80032e4 <HAL_RCC_GetSysClockFreq+0x30>
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d003      	beq.n	80032ea <HAL_RCC_GetSysClockFreq+0x36>
 80032e2:	e03f      	b.n	8003364 <HAL_RCC_GetSysClockFreq+0xb0>
	case RCC_SYSCLKSOURCE_STATUS_HSE: /* HSE used as system clock */
	{
		sysclockfreq = HSE_VALUE;
 80032e4:	4b25      	ldr	r3, [pc, #148]	; (800337c <HAL_RCC_GetSysClockFreq+0xc8>)
 80032e6:	623b      	str	r3, [r7, #32]
		break;
 80032e8:	e03f      	b.n	800336a <HAL_RCC_GetSysClockFreq+0xb6>
	}
	case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock */
	{
		pllmul = aPLLMULFactorTable[(uint32_t) (tmpreg & RCC_CFGR_PLLMUL)
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80032f0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80032f4:	60ba      	str	r2, [r7, #8]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	fa92 f2a2 	rbit	r2, r2
 80032fc:	607a      	str	r2, [r7, #4]
	return result;
 80032fe:	687a      	ldr	r2, [r7, #4]
				>> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003300:	fab2 f282 	clz	r2, r2
 8003304:	b2d2      	uxtb	r2, r2
 8003306:	40d3      	lsrs	r3, r2
		pllmul = aPLLMULFactorTable[(uint32_t) (tmpreg & RCC_CFGR_PLLMUL)
 8003308:	4a1d      	ldr	r2, [pc, #116]	; (8003380 <HAL_RCC_GetSysClockFreq+0xcc>)
 800330a:	5cd3      	ldrb	r3, [r2, r3]
 800330c:	617b      	str	r3, [r7, #20]
		prediv = aPredivFactorTable[(uint32_t) (RCC->CFGR2 & RCC_CFGR2_PREDIV)
 800330e:	4b1a      	ldr	r3, [pc, #104]	; (8003378 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003312:	f003 030f 	and.w	r3, r3, #15
 8003316:	220f      	movs	r2, #15
 8003318:	613a      	str	r2, [r7, #16]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	fa92 f2a2 	rbit	r2, r2
 8003320:	60fa      	str	r2, [r7, #12]
	return result;
 8003322:	68fa      	ldr	r2, [r7, #12]
				>> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003324:	fab2 f282 	clz	r2, r2
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	40d3      	lsrs	r3, r2
		prediv = aPredivFactorTable[(uint32_t) (RCC->CFGR2 & RCC_CFGR2_PREDIV)
 800332c:	4a15      	ldr	r2, [pc, #84]	; (8003384 <HAL_RCC_GetSysClockFreq+0xd0>)
 800332e:	5cd3      	ldrb	r3, [r2, r3]
 8003330:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
		if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV) {
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d008      	beq.n	800334e <HAL_RCC_GetSysClockFreq+0x9a>
			/* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
			pllclk = (uint32_t) ((uint64_t) HSE_VALUE / (uint64_t) (prediv))
 800333c:	4a0f      	ldr	r2, [pc, #60]	; (800337c <HAL_RCC_GetSysClockFreq+0xc8>)
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	fbb2 f2f3 	udiv	r2, r2, r3
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	fb02 f303 	mul.w	r3, r2, r3
 800334a:	627b      	str	r3, [r7, #36]	; 0x24
 800334c:	e007      	b.n	800335e <HAL_RCC_GetSysClockFreq+0xaa>
					* ((uint64_t) pllmul);
		} else {
			/* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
			pllclk = (uint32_t) ((uint64_t) HSI_VALUE / (uint64_t) (prediv))
 800334e:	4a0b      	ldr	r2, [pc, #44]	; (800337c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	fbb2 f2f3 	udiv	r2, r2, r3
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	fb02 f303 	mul.w	r3, r2, r3
 800335c:	627b      	str	r3, [r7, #36]	; 0x24
					* ((uint64_t) pllmul);
		}
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
		sysclockfreq = pllclk;
 800335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003360:	623b      	str	r3, [r7, #32]
		break;
 8003362:	e002      	b.n	800336a <HAL_RCC_GetSysClockFreq+0xb6>
	}
	case RCC_SYSCLKSOURCE_STATUS_HSI: /* HSI used as system clock source */
	default: /* HSI used as system clock */
	{
		sysclockfreq = HSI_VALUE;
 8003364:	4b05      	ldr	r3, [pc, #20]	; (800337c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003366:	623b      	str	r3, [r7, #32]
		break;
 8003368:	bf00      	nop
	}
	}
	return sysclockfreq;
 800336a:	6a3b      	ldr	r3, [r7, #32]
}
 800336c:	4618      	mov	r0, r3
 800336e:	372c      	adds	r7, #44	; 0x2c
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	40021000 	.word	0x40021000
 800337c:	007a1200 	.word	0x007a1200
 8003380:	08003844 	.word	0x08003844
 8003384:	08003854 	.word	0x08003854

08003388 <HAL_RCCEx_PeriphCLKConfig>:
 *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
 *
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(
		RCC_PeriphCLKInitTypeDef *PeriphClkInit) {
 8003388:	b580      	push	{r7, lr}
 800338a:	b092      	sub	sp, #72	; 0x48
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t temp_reg = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	63fb      	str	r3, [r7, #60]	; 0x3c
	FlagStatus pwrclkchanged = RESET;
 8003398:	2300      	movs	r3, #0
 800339a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	/* Check the parameters */
	assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

	/*---------------------------- RTC configuration -------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 80d4 	beq.w	8003554 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
		assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

		/* As soon as function is called to change RTC clock source, activation of the 
		 power domain is done. */
		/* Requires to enable write access to Backup Domain of necessary */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 80033ac:	4b4e      	ldr	r3, [pc, #312]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10e      	bne.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
			__HAL_RCC_PWR_CLK_ENABLE();
 80033b8:	4b4b      	ldr	r3, [pc, #300]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	4a4a      	ldr	r2, [pc, #296]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c2:	61d3      	str	r3, [r2, #28]
 80033c4:	4b48      	ldr	r3, [pc, #288]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033cc:	60bb      	str	r3, [r7, #8]
 80033ce:	68bb      	ldr	r3, [r7, #8]
			pwrclkchanged = SET;
 80033d0:	2301      	movs	r3, #1
 80033d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}

		if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 80033d6:	4b45      	ldr	r3, [pc, #276]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d118      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x8c>
			/* Enable write access to Backup domain */
			SET_BIT(PWR->CR, PWR_CR_DBP);
 80033e2:	4b42      	ldr	r3, [pc, #264]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a41      	ldr	r2, [pc, #260]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ec:	6013      	str	r3, [r2, #0]

			/* Wait for Backup domain Write protection disable */
			tickstart = HAL_GetTick();
 80033ee:	f7fd f9c3 	bl	8000778 <HAL_GetTick>
 80033f2:	6438      	str	r0, [r7, #64]	; 0x40

			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 80033f4:	e008      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x80>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 80033f6:	f7fd f9bf 	bl	8000778 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b64      	cmp	r3, #100	; 0x64
 8003402:	d901      	bls.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x80>
					return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e1d6      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8003408:	4b38      	ldr	r3, [pc, #224]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0f0      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
				}
			}
		}

		/* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
		temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003414:	4b34      	ldr	r3, [pc, #208]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800341c:	63fb      	str	r3, [r7, #60]	; 0x3c
		if ((temp_reg != 0x00000000U)
 800341e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 8084 	beq.w	800352e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
				&& (temp_reg
						!= (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))) {
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 7340 	and.w	r3, r3, #768	; 0x300
				&& (temp_reg
 800342e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003430:	429a      	cmp	r2, r3
 8003432:	d07c      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
			/* Store the content of BDCR register before the reset of Backup Domain */
			temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003434:	4b2c      	ldr	r3, [pc, #176]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800343c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800343e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003442:	633b      	str	r3, [r7, #48]	; 0x30
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003446:	fa93 f3a3 	rbit	r3, r3
 800344a:	62fb      	str	r3, [r7, #44]	; 0x2c
	return result;
 800344c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
			/* RTC Clock selection can be changed only if the Backup Domain is reset */
			__HAL_RCC_BACKUPRESET_FORCE();
 800344e:	fab3 f383 	clz	r3, r3
 8003452:	b2db      	uxtb	r3, r3
 8003454:	461a      	mov	r2, r3
 8003456:	4b26      	ldr	r3, [pc, #152]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003458:	4413      	add	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	461a      	mov	r2, r3
 800345e:	2301      	movs	r3, #1
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003466:	63bb      	str	r3, [r7, #56]	; 0x38
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346a:	fa93 f3a3 	rbit	r3, r3
 800346e:	637b      	str	r3, [r7, #52]	; 0x34
	return result;
 8003470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
			__HAL_RCC_BACKUPRESET_RELEASE();
 8003472:	fab3 f383 	clz	r3, r3
 8003476:	b2db      	uxtb	r3, r3
 8003478:	461a      	mov	r2, r3
 800347a:	4b1d      	ldr	r3, [pc, #116]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800347c:	4413      	add	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	461a      	mov	r2, r3
 8003482:	2300      	movs	r3, #0
 8003484:	6013      	str	r3, [r2, #0]
			/* Restore the Content of BDCR register */
			RCC->BDCR = temp_reg;
 8003486:	4a18      	ldr	r2, [pc, #96]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800348a:	6213      	str	r3, [r2, #32]

			/* Wait for LSERDY if LSE was enabled */
			if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON)) {
 800348c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d04b      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8003496:	f7fd f96f 	bl	8000778 <HAL_GetTick>
 800349a:	6438      	str	r0, [r7, #64]	; 0x40

				/* Wait till LSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 800349c:	e00a      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
					if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 800349e:	f7fd f96b 	bl	8000778 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
						return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e180      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80034b4:	2302      	movs	r3, #2
 80034b6:	62bb      	str	r3, [r7, #40]	; 0x28
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ba:	fa93 f3a3 	rbit	r3, r3
 80034be:	627b      	str	r3, [r7, #36]	; 0x24
 80034c0:	2302      	movs	r3, #2
 80034c2:	623b      	str	r3, [r7, #32]
 80034c4:	6a3b      	ldr	r3, [r7, #32]
 80034c6:	fa93 f3a3 	rbit	r3, r3
 80034ca:	61fb      	str	r3, [r7, #28]
	return result;
 80034cc:	69fb      	ldr	r3, [r7, #28]
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 80034ce:	fab3 f383 	clz	r3, r3
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	095b      	lsrs	r3, r3, #5
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	f043 0302 	orr.w	r3, r3, #2
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d108      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80034e2:	4b01      	ldr	r3, [pc, #4]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	e00d      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80034e8:	40021000 	.word	0x40021000
 80034ec:	40007000 	.word	0x40007000
 80034f0:	10908100 	.word	0x10908100
 80034f4:	2302      	movs	r3, #2
 80034f6:	61bb      	str	r3, [r7, #24]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	fa93 f3a3 	rbit	r3, r3
 80034fe:	617b      	str	r3, [r7, #20]
 8003500:	4b9a      	ldr	r3, [pc, #616]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	2202      	movs	r2, #2
 8003506:	613a      	str	r2, [r7, #16]
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	fa92 f2a2 	rbit	r2, r2
 800350e:	60fa      	str	r2, [r7, #12]
	return result;
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	fab2 f282 	clz	r2, r2
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800351c:	b2d2      	uxtb	r2, r2
 800351e:	f002 021f 	and.w	r2, r2, #31
 8003522:	2101      	movs	r1, #1
 8003524:	fa01 f202 	lsl.w	r2, r1, r2
 8003528:	4013      	ands	r3, r2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0b7      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x116>
					}
				}
			}
		}
		__HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800352e:	4b8f      	ldr	r3, [pc, #572]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	498c      	ldr	r1, [pc, #560]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800353c:	4313      	orrs	r3, r2
 800353e:	620b      	str	r3, [r1, #32]

		/* Require to disable power clock if necessary */
		if (pwrclkchanged == SET) {
 8003540:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003544:	2b01      	cmp	r3, #1
 8003546:	d105      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
			__HAL_RCC_PWR_CLK_DISABLE();
 8003548:	4b88      	ldr	r3, [pc, #544]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800354a:	69db      	ldr	r3, [r3, #28]
 800354c:	4a87      	ldr	r2, [pc, #540]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800354e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003552:	61d3      	str	r3, [r2, #28]
		}
	}

	/*------------------------------- USART1 Configuration ------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b00      	cmp	r3, #0
 800355e:	d008      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
		/* Check the parameters */
		assert_param(
				IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

		/* Configure the USART1 clock source */
		__HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003560:	4b82      	ldr	r3, [pc, #520]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003564:	f023 0203 	bic.w	r2, r3, #3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	497f      	ldr	r1, [pc, #508]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800356e:	4313      	orrs	r3, r2
 8003570:	630b      	str	r3, [r1, #48]	; 0x30
	}

#if defined(RCC_CFGR3_USART2SW)
	/*----------------------------- USART2 Configuration --------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d008      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x208>
		/* Check the parameters */
		assert_param(
				IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

		/* Configure the USART2 clock source */
		__HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800357e:	4b7b      	ldr	r3, [pc, #492]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003582:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	4978      	ldr	r1, [pc, #480]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800358c:	4313      	orrs	r3, r2
 800358e:	630b      	str	r3, [r1, #48]	; 0x30
	}
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
	/*------------------------------ USART3 Configuration ------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b00      	cmp	r3, #0
 800359a:	d008      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x226>
		/* Check the parameters */
		assert_param(
				IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

		/* Configure the USART3 clock source */
		__HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800359c:	4b73      	ldr	r3, [pc, #460]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800359e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	4970      	ldr	r1, [pc, #448]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	630b      	str	r3, [r1, #48]	; 0x30
	}
#endif /* RCC_CFGR3_USART3SW */

	/*------------------------------ I2C1 Configuration ------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0320 	and.w	r3, r3, #32
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d008      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x244>
			== RCC_PERIPHCLK_I2C1) {
		/* Check the parameters */
		assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

		/* Configure the I2C1 clock source */
		__HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035ba:	4b6c      	ldr	r3, [pc, #432]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	f023 0210 	bic.w	r2, r3, #16
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	4969      	ldr	r1, [pc, #420]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
	/*------------------------------ USB Configuration ------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d008      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x262>
			== RCC_PERIPHCLK_USB) {
		/* Check the parameters */
		assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));

		/* Configure the USB clock source */
		__HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80035d8:	4b64      	ldr	r3, [pc, #400]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e4:	4961      	ldr	r1, [pc, #388]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

	/*------------------------------ I2C2 Configuration ------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d008      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x280>
			== RCC_PERIPHCLK_I2C2) {
		/* Check the parameters */
		assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

		/* Configure the I2C2 clock source */
		__HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035f6:	4b5d      	ldr	r3, [pc, #372]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fa:	f023 0220 	bic.w	r2, r3, #32
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	495a      	ldr	r1, [pc, #360]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003604:	4313      	orrs	r3, r2
 8003606:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

	/*------------------------------ I2C3 Configuration ------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d008      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x29e>
			== RCC_PERIPHCLK_I2C3) {
		/* Check the parameters */
		assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

		/* Configure the I2C3 clock source */
		__HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003614:	4b55      	ldr	r3, [pc, #340]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003618:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	4952      	ldr	r1, [pc, #328]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003622:	4313      	orrs	r3, r2
 8003624:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

	/*------------------------------ UART4 Configuration ------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b00      	cmp	r3, #0
 8003630:	d008      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
			== RCC_PERIPHCLK_UART4) {
		/* Check the parameters */
		assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

		/* Configure the UART4 clock source */
		__HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003632:	4b4e      	ldr	r3, [pc, #312]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003636:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	494b      	ldr	r1, [pc, #300]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003640:	4313      	orrs	r3, r2
 8003642:	630b      	str	r3, [r1, #48]	; 0x30
	}

	/*------------------------------ UART5 Configuration ------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0310 	and.w	r3, r3, #16
 800364c:	2b00      	cmp	r3, #0
 800364e:	d008      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x2da>
			== RCC_PERIPHCLK_UART5) {
		/* Check the parameters */
		assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

		/* Configure the UART5 clock source */
		__HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003650:	4b46      	ldr	r3, [pc, #280]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003654:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	4943      	ldr	r1, [pc, #268]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800365e:	4313      	orrs	r3, r2
 8003660:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
	/*------------------------------ I2S Configuration ------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800366a:	2b00      	cmp	r3, #0
 800366c:	d008      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
			== RCC_PERIPHCLK_I2S) {
		/* Check the parameters */
		assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

		/* Configure the I2S clock source */
		__HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800366e:	4b3f      	ldr	r3, [pc, #252]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367a:	493c      	ldr	r1, [pc, #240]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800367c:	4313      	orrs	r3, r2
 800367e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)

	/*------------------------------ ADC1 & ADC2 clock Configuration -------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003688:	2b00      	cmp	r3, #0
 800368a:	d008      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x316>
		/* Check the parameters */
		assert_param(
				IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));

		/* Configure the ADC12 clock source */
		__HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800368c:	4b37      	ldr	r3, [pc, #220]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800368e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003690:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003698:	4934      	ldr	r1, [pc, #208]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800369a:	4313      	orrs	r3, r2
 800369c:	62cb      	str	r3, [r1, #44]	; 0x2c

#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

	/*------------------------------ ADC3 & ADC4 clock Configuration -------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d008      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x334>
		/* Check the parameters */
		assert_param(
				IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));

		/* Configure the ADC34 clock source */
		__HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80036aa:	4b30      	ldr	r3, [pc, #192]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ae:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b6:	492d      	ldr	r1, [pc, #180]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

	/*------------------------------ TIM1 clock Configuration ----------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d008      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x352>
			== RCC_PERIPHCLK_TIM1) {
		/* Check the parameters */
		assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

		/* Configure the TIM1 clock source */
		__HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80036c8:	4b28      	ldr	r3, [pc, #160]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d4:	4925      	ldr	r1, [pc, #148]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

	/*------------------------------ TIM8 clock Configuration ----------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d008      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x370>
			== RCC_PERIPHCLK_TIM8) {
		/* Check the parameters */
		assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));

		/* Configure the TIM8 clock source */
		__HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80036e6:	4b21      	ldr	r3, [pc, #132]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	491e      	ldr	r1, [pc, #120]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)

	/*------------------------------ TIM2 clock Configuration -------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d008      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x38e>
			== RCC_PERIPHCLK_TIM2) {
		/* Check the parameters */
		assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));

		/* Configure the CEC clock source */
		__HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003704:	4b19      	ldr	r3, [pc, #100]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003708:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003710:	4916      	ldr	r1, [pc, #88]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003712:	4313      	orrs	r3, r2
 8003714:	630b      	str	r3, [r1, #48]	; 0x30
	}

	/*------------------------------ TIM3 clock Configuration -------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d008      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
			== RCC_PERIPHCLK_TIM34) {
		/* Check the parameters */
		assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));

		/* Configure the CEC clock source */
		__HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003722:	4b12      	ldr	r3, [pc, #72]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003726:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800372e:	490f      	ldr	r1, [pc, #60]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003730:	4313      	orrs	r3, r2
 8003732:	630b      	str	r3, [r1, #48]	; 0x30
	}

	/*------------------------------ TIM15 clock Configuration ------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d008      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
			== RCC_PERIPHCLK_TIM15) {
		/* Check the parameters */
		assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

		/* Configure the CEC clock source */
		__HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003740:	4b0a      	ldr	r3, [pc, #40]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003744:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374c:	4907      	ldr	r1, [pc, #28]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800374e:	4313      	orrs	r3, r2
 8003750:	630b      	str	r3, [r1, #48]	; 0x30
	}

	/*------------------------------ TIM16 clock Configuration ------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00c      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
			== RCC_PERIPHCLK_TIM16) {
		/* Check the parameters */
		assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));

		/* Configure the CEC clock source */
		__HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800375e:	4b03      	ldr	r3, [pc, #12]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003762:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	e002      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800376a:	bf00      	nop
 800376c:	40021000 	.word	0x40021000
 8003770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003772:	4913      	ldr	r1, [pc, #76]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003774:	4313      	orrs	r3, r2
 8003776:	630b      	str	r3, [r1, #48]	; 0x30
	}

	/*------------------------------ TIM17 clock Configuration ------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d008      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x40e>
			== RCC_PERIPHCLK_TIM17) {
		/* Check the parameters */
		assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));

		/* Configure the CEC clock source */
		__HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003784:	4b0e      	ldr	r3, [pc, #56]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003788:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003790:	490b      	ldr	r1, [pc, #44]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003792:	4313      	orrs	r3, r2
 8003794:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
	/*------------------------------ TIM20 clock Configuration ------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d008      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
			== RCC_PERIPHCLK_TIM20) {
		/* Check the parameters */
		assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));

		/* Configure the CEC clock source */
		__HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80037a2:	4b07      	ldr	r3, [pc, #28]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ae:	4904      	ldr	r1, [pc, #16]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	630b      	str	r3, [r1, #48]	; 0x30
	}
#endif /* STM32F303xE || STM32F398xx */  

	return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3748      	adds	r7, #72	; 0x48
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	40021000 	.word	0x40021000

080037c4 <__libc_init_array>:
 80037c4:	b570      	push	{r4, r5, r6, lr}
 80037c6:	4d0d      	ldr	r5, [pc, #52]	; (80037fc <__libc_init_array+0x38>)
 80037c8:	4c0d      	ldr	r4, [pc, #52]	; (8003800 <__libc_init_array+0x3c>)
 80037ca:	1b64      	subs	r4, r4, r5
 80037cc:	10a4      	asrs	r4, r4, #2
 80037ce:	2600      	movs	r6, #0
 80037d0:	42a6      	cmp	r6, r4
 80037d2:	d109      	bne.n	80037e8 <__libc_init_array+0x24>
 80037d4:	4d0b      	ldr	r5, [pc, #44]	; (8003804 <__libc_init_array+0x40>)
 80037d6:	4c0c      	ldr	r4, [pc, #48]	; (8003808 <__libc_init_array+0x44>)
 80037d8:	f000 f820 	bl	800381c <_init>
 80037dc:	1b64      	subs	r4, r4, r5
 80037de:	10a4      	asrs	r4, r4, #2
 80037e0:	2600      	movs	r6, #0
 80037e2:	42a6      	cmp	r6, r4
 80037e4:	d105      	bne.n	80037f2 <__libc_init_array+0x2e>
 80037e6:	bd70      	pop	{r4, r5, r6, pc}
 80037e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80037ec:	4798      	blx	r3
 80037ee:	3601      	adds	r6, #1
 80037f0:	e7ee      	b.n	80037d0 <__libc_init_array+0xc>
 80037f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80037f6:	4798      	blx	r3
 80037f8:	3601      	adds	r6, #1
 80037fa:	e7f2      	b.n	80037e2 <__libc_init_array+0x1e>
 80037fc:	08003864 	.word	0x08003864
 8003800:	08003864 	.word	0x08003864
 8003804:	08003864 	.word	0x08003864
 8003808:	08003868 	.word	0x08003868

0800380c <memset>:
 800380c:	4402      	add	r2, r0
 800380e:	4603      	mov	r3, r0
 8003810:	4293      	cmp	r3, r2
 8003812:	d100      	bne.n	8003816 <memset+0xa>
 8003814:	4770      	bx	lr
 8003816:	f803 1b01 	strb.w	r1, [r3], #1
 800381a:	e7f9      	b.n	8003810 <memset+0x4>

0800381c <_init>:
 800381c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800381e:	bf00      	nop
 8003820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003822:	bc08      	pop	{r3}
 8003824:	469e      	mov	lr, r3
 8003826:	4770      	bx	lr

08003828 <_fini>:
 8003828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800382a:	bf00      	nop
 800382c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800382e:	bc08      	pop	{r3}
 8003830:	469e      	mov	lr, r3
 8003832:	4770      	bx	lr
