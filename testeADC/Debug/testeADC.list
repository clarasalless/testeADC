
testeADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036dc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003870  08003870  00013870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038a0  080038a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080038a0  080038a0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038a0  080038a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038a0  080038a0  000138a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038a4  080038a4  000138a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080038a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000007c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000088  20000088  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007d83  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001631  00000000  00000000  00027dbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000600  00000000  00000000  000293f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000548  00000000  00000000  000299f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f637  00000000  00000000  00029f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000923d  00000000  00000000  0004956f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c420b  00000000  00000000  000527ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001169b7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001688  00000000  00000000  00116a08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003858 	.word	0x08003858

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003858 	.word	0x08003858

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001da:	f000 fa91 	bl	8000700 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001de:	f000 f835 	bl	800024c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e2:	f000 f901 	bl	80003e8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80001e6:	f000 f88f 	bl	8000308 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  uint32_t tick = HAL_GetTick();
 80001ea:	f000 fae3 	bl	80007b4 <HAL_GetTick>
 80001ee:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0 && button_status == 0)
 80001f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001f4:	4811      	ldr	r0, [pc, #68]	; (800023c <main+0x68>)
 80001f6:	f001 fe93 	bl	8001f20 <HAL_GPIO_ReadPin>
 80001fa:	4603      	mov	r3, r0
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d10c      	bne.n	800021a <main+0x46>
 8000200:	4b0f      	ldr	r3, [pc, #60]	; (8000240 <main+0x6c>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d108      	bne.n	800021a <main+0x46>
	  {
		  button_status = 1;
 8000208:	4b0d      	ldr	r3, [pc, #52]	; (8000240 <main+0x6c>)
 800020a:	2201      	movs	r2, #1
 800020c:	601a      	str	r2, [r3, #0]
		  tensao_media = teste_ADC(&hadc1);
 800020e:	480d      	ldr	r0, [pc, #52]	; (8000244 <main+0x70>)
 8000210:	f000 f9f8 	bl	8000604 <teste_ADC>
 8000214:	4603      	mov	r3, r0
 8000216:	4a0c      	ldr	r2, [pc, #48]	; (8000248 <main+0x74>)
 8000218:	6013      	str	r3, [r2, #0]
	  }
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1 && button_status == 1)
 800021a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800021e:	4807      	ldr	r0, [pc, #28]	; (800023c <main+0x68>)
 8000220:	f001 fe7e 	bl	8001f20 <HAL_GPIO_ReadPin>
 8000224:	4603      	mov	r3, r0
 8000226:	2b01      	cmp	r3, #1
 8000228:	d1e2      	bne.n	80001f0 <main+0x1c>
 800022a:	4b05      	ldr	r3, [pc, #20]	; (8000240 <main+0x6c>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	2b01      	cmp	r3, #1
 8000230:	d1de      	bne.n	80001f0 <main+0x1c>
	  {
		  button_status = 0;
 8000232:	4b03      	ldr	r3, [pc, #12]	; (8000240 <main+0x6c>)
 8000234:	2200      	movs	r2, #0
 8000236:	601a      	str	r2, [r3, #0]
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0 && button_status == 0)
 8000238:	e7da      	b.n	80001f0 <main+0x1c>
 800023a:	bf00      	nop
 800023c:	48000800 	.word	0x48000800
 8000240:	2000007c 	.word	0x2000007c
 8000244:	20000028 	.word	0x20000028
 8000248:	20000078 	.word	0x20000078

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b0a6      	sub	sp, #152	; 0x98
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000256:	2228      	movs	r2, #40	; 0x28
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f003 faf4 	bl	8003848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000260:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000264:	2200      	movs	r2, #0
 8000266:	601a      	str	r2, [r3, #0]
 8000268:	605a      	str	r2, [r3, #4]
 800026a:	609a      	str	r2, [r3, #8]
 800026c:	60da      	str	r2, [r3, #12]
 800026e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	2258      	movs	r2, #88	; 0x58
 8000274:	2100      	movs	r1, #0
 8000276:	4618      	mov	r0, r3
 8000278:	f003 fae6 	bl	8003848 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800027c:	2302      	movs	r3, #2
 800027e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000280:	2301      	movs	r3, #1
 8000282:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000284:	2310      	movs	r3, #16
 8000286:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800028a:	2302      	movs	r3, #2
 800028c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000290:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000294:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000298:	2300      	movs	r3, #0
 800029a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002a8:	4618      	mov	r0, r3
 80002aa:	f001 fe51 	bl	8001f50 <HAL_RCC_OscConfig>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80002b4:	f000 f8d0 	bl	8000458 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b8:	230f      	movs	r3, #15
 80002ba:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002bc:	2300      	movs	r3, #0
 80002be:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f002 fe90 	bl	8002ff8 <HAL_RCC_ClockConfig>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002de:	f000 f8bb 	bl	8000458 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80002e2:	2380      	movs	r3, #128	; 0x80
 80002e4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80002e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	4618      	mov	r0, r3
 80002f0:	f003 f868 	bl	80033c4 <HAL_RCCEx_PeriphCLKConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80002fa:	f000 f8ad 	bl	8000458 <Error_Handler>
  }
}
 80002fe:	bf00      	nop
 8000300:	3798      	adds	r7, #152	; 0x98
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
	...

08000308 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b08a      	sub	sp, #40	; 0x28
 800030c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800030e:	f107 031c 	add.w	r3, r7, #28
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
 8000320:	605a      	str	r2, [r3, #4]
 8000322:	609a      	str	r2, [r3, #8]
 8000324:	60da      	str	r2, [r3, #12]
 8000326:	611a      	str	r2, [r3, #16]
 8000328:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800032a:	4b2e      	ldr	r3, [pc, #184]	; (80003e4 <MX_ADC1_Init+0xdc>)
 800032c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000330:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000332:	4b2c      	ldr	r3, [pc, #176]	; (80003e4 <MX_ADC1_Init+0xdc>)
 8000334:	2200      	movs	r2, #0
 8000336:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000338:	4b2a      	ldr	r3, [pc, #168]	; (80003e4 <MX_ADC1_Init+0xdc>)
 800033a:	2200      	movs	r2, #0
 800033c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800033e:	4b29      	ldr	r3, [pc, #164]	; (80003e4 <MX_ADC1_Init+0xdc>)
 8000340:	2200      	movs	r2, #0
 8000342:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000344:	4b27      	ldr	r3, [pc, #156]	; (80003e4 <MX_ADC1_Init+0xdc>)
 8000346:	2200      	movs	r2, #0
 8000348:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800034a:	4b26      	ldr	r3, [pc, #152]	; (80003e4 <MX_ADC1_Init+0xdc>)
 800034c:	2200      	movs	r2, #0
 800034e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000352:	4b24      	ldr	r3, [pc, #144]	; (80003e4 <MX_ADC1_Init+0xdc>)
 8000354:	2200      	movs	r2, #0
 8000356:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000358:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <MX_ADC1_Init+0xdc>)
 800035a:	2201      	movs	r2, #1
 800035c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800035e:	4b21      	ldr	r3, [pc, #132]	; (80003e4 <MX_ADC1_Init+0xdc>)
 8000360:	2200      	movs	r2, #0
 8000362:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000364:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <MX_ADC1_Init+0xdc>)
 8000366:	2201      	movs	r2, #1
 8000368:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800036a:	4b1e      	ldr	r3, [pc, #120]	; (80003e4 <MX_ADC1_Init+0xdc>)
 800036c:	2200      	movs	r2, #0
 800036e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <MX_ADC1_Init+0xdc>)
 8000374:	2204      	movs	r2, #4
 8000376:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <MX_ADC1_Init+0xdc>)
 800037a:	2200      	movs	r2, #0
 800037c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800037e:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <MX_ADC1_Init+0xdc>)
 8000380:	2200      	movs	r2, #0
 8000382:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000384:	4817      	ldr	r0, [pc, #92]	; (80003e4 <MX_ADC1_Init+0xdc>)
 8000386:	f000 fa21 	bl	80007cc <HAL_ADC_Init>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000390:	f000 f862 	bl	8000458 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000394:	2300      	movs	r3, #0
 8000396:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000398:	f107 031c 	add.w	r3, r7, #28
 800039c:	4619      	mov	r1, r3
 800039e:	4811      	ldr	r0, [pc, #68]	; (80003e4 <MX_ADC1_Init+0xdc>)
 80003a0:	f001 f992 	bl	80016c8 <HAL_ADCEx_MultiModeConfigChannel>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80003aa:	f000 f855 	bl	8000458 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003ae:	2301      	movs	r3, #1
 80003b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003b2:	2301      	movs	r3, #1
 80003b4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003b6:	2300      	movs	r3, #0
 80003b8:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003ba:	2300      	movs	r3, #0
 80003bc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003be:	2300      	movs	r3, #0
 80003c0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003c2:	2300      	movs	r3, #0
 80003c4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	4619      	mov	r1, r3
 80003ca:	4806      	ldr	r0, [pc, #24]	; (80003e4 <MX_ADC1_Init+0xdc>)
 80003cc:	f000 fe90 	bl	80010f0 <HAL_ADC_ConfigChannel>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80003d6:	f000 f83f 	bl	8000458 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003da:	bf00      	nop
 80003dc:	3728      	adds	r7, #40	; 0x28
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	20000028 	.word	0x20000028

080003e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b088      	sub	sp, #32
 80003ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ee:	f107 030c 	add.w	r3, r7, #12
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]
 80003fa:	60da      	str	r2, [r3, #12]
 80003fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003fe:	4b14      	ldr	r3, [pc, #80]	; (8000450 <MX_GPIO_Init+0x68>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	4a13      	ldr	r2, [pc, #76]	; (8000450 <MX_GPIO_Init+0x68>)
 8000404:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000408:	6153      	str	r3, [r2, #20]
 800040a:	4b11      	ldr	r3, [pc, #68]	; (8000450 <MX_GPIO_Init+0x68>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000412:	60bb      	str	r3, [r7, #8]
 8000414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000416:	4b0e      	ldr	r3, [pc, #56]	; (8000450 <MX_GPIO_Init+0x68>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	4a0d      	ldr	r2, [pc, #52]	; (8000450 <MX_GPIO_Init+0x68>)
 800041c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000420:	6153      	str	r3, [r2, #20]
 8000422:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <MX_GPIO_Init+0x68>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800042a:	607b      	str	r3, [r7, #4]
 800042c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800042e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000432:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000434:	2300      	movs	r3, #0
 8000436:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000438:	2300      	movs	r3, #0
 800043a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800043c:	f107 030c 	add.w	r3, r7, #12
 8000440:	4619      	mov	r1, r3
 8000442:	4804      	ldr	r0, [pc, #16]	; (8000454 <MX_GPIO_Init+0x6c>)
 8000444:	f001 fbe2 	bl	8001c0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000448:	bf00      	nop
 800044a:	3720      	adds	r7, #32
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	40021000 	.word	0x40021000
 8000454:	48000800 	.word	0x48000800

08000458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800045c:	b672      	cpsid	i
}
 800045e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000460:	e7fe      	b.n	8000460 <Error_Handler+0x8>
	...

08000464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800046a:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <HAL_MspInit+0x44>)
 800046c:	699b      	ldr	r3, [r3, #24]
 800046e:	4a0e      	ldr	r2, [pc, #56]	; (80004a8 <HAL_MspInit+0x44>)
 8000470:	f043 0301 	orr.w	r3, r3, #1
 8000474:	6193      	str	r3, [r2, #24]
 8000476:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <HAL_MspInit+0x44>)
 8000478:	699b      	ldr	r3, [r3, #24]
 800047a:	f003 0301 	and.w	r3, r3, #1
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000482:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <HAL_MspInit+0x44>)
 8000484:	69db      	ldr	r3, [r3, #28]
 8000486:	4a08      	ldr	r2, [pc, #32]	; (80004a8 <HAL_MspInit+0x44>)
 8000488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800048c:	61d3      	str	r3, [r2, #28]
 800048e:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <HAL_MspInit+0x44>)
 8000490:	69db      	ldr	r3, [r3, #28]
 8000492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000496:	603b      	str	r3, [r7, #0]
 8000498:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800049a:	bf00      	nop
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	40021000 	.word	0x40021000

080004ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b08a      	sub	sp, #40	; 0x28
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b4:	f107 0314 	add.w	r3, r7, #20
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
 80004bc:	605a      	str	r2, [r3, #4]
 80004be:	609a      	str	r2, [r3, #8]
 80004c0:	60da      	str	r2, [r3, #12]
 80004c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80004cc:	d124      	bne.n	8000518 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80004ce:	4b14      	ldr	r3, [pc, #80]	; (8000520 <HAL_ADC_MspInit+0x74>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	4a13      	ldr	r2, [pc, #76]	; (8000520 <HAL_ADC_MspInit+0x74>)
 80004d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d8:	6153      	str	r3, [r2, #20]
 80004da:	4b11      	ldr	r3, [pc, #68]	; (8000520 <HAL_ADC_MspInit+0x74>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004e2:	613b      	str	r3, [r7, #16]
 80004e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e6:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <HAL_ADC_MspInit+0x74>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	4a0d      	ldr	r2, [pc, #52]	; (8000520 <HAL_ADC_MspInit+0x74>)
 80004ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004f0:	6153      	str	r3, [r2, #20]
 80004f2:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <HAL_ADC_MspInit+0x74>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004fe:	2301      	movs	r3, #1
 8000500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000502:	2303      	movs	r3, #3
 8000504:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000506:	2300      	movs	r3, #0
 8000508:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050a:	f107 0314 	add.w	r3, r7, #20
 800050e:	4619      	mov	r1, r3
 8000510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000514:	f001 fb7a 	bl	8001c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000518:	bf00      	nop
 800051a:	3728      	adds	r7, #40	; 0x28
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40021000 	.word	0x40021000

08000524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000528:	e7fe      	b.n	8000528 <NMI_Handler+0x4>

0800052a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800052e:	e7fe      	b.n	800052e <HardFault_Handler+0x4>

08000530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000534:	e7fe      	b.n	8000534 <MemManage_Handler+0x4>

08000536 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800053a:	e7fe      	b.n	800053a <BusFault_Handler+0x4>

0800053c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000540:	e7fe      	b.n	8000540 <UsageFault_Handler+0x4>

08000542 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000546:	bf00      	nop
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr

0800055e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000562:	bf00      	nop
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr

0800056c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000570:	f000 f90c 	bl	800078c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000574:	bf00      	nop
 8000576:	bd80      	pop	{r7, pc}

08000578 <SystemInit>:
/**
 * @brief  Setup the microcontroller system
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
	/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <SystemInit+0x20>)
 800057e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000582:	4a05      	ldr	r2, [pc, #20]	; (8000598 <SystemInit+0x20>)
 8000584:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000588:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	e000ed00 	.word	0xe000ed00

0800059c <ADC_Calibration>:
{
	HAL_ADC_DeInit(hadc);
}

void ADC_Calibration(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
	HAL_ADCEx_Calibration_Start(hadc, SingleDiff);
 80005a6:	6839      	ldr	r1, [r7, #0]
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f000 fd2e 	bl	800100a <HAL_ADCEx_Calibration_Start>
}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <ADC_Start>:

HAL_StatusTypeDef ADC_Start(ADC_HandleTypeDef* hadc)
{
 80005b6:	b580      	push	{r7, lr}
 80005b8:	b082      	sub	sp, #8
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
	return HAL_ADC_Start(hadc);
 80005be:	6878      	ldr	r0, [r7, #4]
 80005c0:	f000 fafe 	bl	8000bc0 <HAL_ADC_Start>
 80005c4:	4603      	mov	r3, r0
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}

080005ce <ADC_PollForConversion>:

HAL_StatusTypeDef ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	b082      	sub	sp, #8
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
 80005d6:	6039      	str	r1, [r7, #0]
	return HAL_ADC_PollForConversion(hadc, Timeout);
 80005d8:	6839      	ldr	r1, [r7, #0]
 80005da:	6878      	ldr	r0, [r7, #4]
 80005dc:	f000 fc06 	bl	8000dec <HAL_ADC_PollForConversion>
 80005e0:	4603      	mov	r3, r0
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}

080005ea <ADC_GetValue>:

uint32_t ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80005ea:	b580      	push	{r7, lr}
 80005ec:	b082      	sub	sp, #8
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
	return HAL_ADC_GetValue(hadc);
 80005f2:	6878      	ldr	r0, [r7, #4]
 80005f4:	f000 fcfc 	bl	8000ff0 <HAL_ADC_GetValue>
 80005f8:	4603      	mov	r3, r0
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
	...

08000604 <teste_ADC>:

uint32_t teste_ADC(ADC_HandleTypeDef* hadc)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08e      	sub	sp, #56	; 0x38
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	ADC_Calibration(hadc, ADC_SINGLE_ENDED);
 800060c:	2100      	movs	r1, #0
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f7ff ffc4 	bl	800059c <ADC_Calibration>
	status = ADC_Start(hadc);
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f7ff ffce 	bl	80005b6 <ADC_Start>
 800061a:	4603      	mov	r3, r0
 800061c:	461a      	mov	r2, r3
 800061e:	4b21      	ldr	r3, [pc, #132]	; (80006a4 <teste_ADC+0xa0>)
 8000620:	701a      	strb	r2, [r3, #0]
	uint32_t avrg_value = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t adc_values[10];
	if (status != HAL_OK)
 8000626:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <teste_ADC+0xa0>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <teste_ADC+0x2e>
	{
		Error_Handler();
 800062e:	f7ff ff13 	bl	8000458 <Error_Handler>
	}

	status = ADC_PollForConversion(hadc, 100);
 8000632:	2164      	movs	r1, #100	; 0x64
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f7ff ffca 	bl	80005ce <ADC_PollForConversion>
 800063a:	4603      	mov	r3, r0
 800063c:	461a      	mov	r2, r3
 800063e:	4b19      	ldr	r3, [pc, #100]	; (80006a4 <teste_ADC+0xa0>)
 8000640:	701a      	strb	r2, [r3, #0]
	if (status != HAL_OK)
 8000642:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <teste_ADC+0xa0>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <teste_ADC+0x4a>
	{
		Error_Handler();
 800064a:	f7ff ff05 	bl	8000458 <Error_Handler>
	}
	for(int i=0; i<10;i++){
 800064e:	2300      	movs	r3, #0
 8000650:	633b      	str	r3, [r7, #48]	; 0x30
 8000652:	e015      	b.n	8000680 <teste_ADC+0x7c>
		adc_values[i] = ADC_GetValue(hadc);
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f7ff ffc8 	bl	80005ea <ADC_GetValue>
 800065a:	4602      	mov	r2, r0
 800065c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	3338      	adds	r3, #56	; 0x38
 8000662:	443b      	add	r3, r7
 8000664:	f843 2c30 	str.w	r2, [r3, #-48]
		avrg_value = avrg_value + adc_values[i];
 8000668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	3338      	adds	r3, #56	; 0x38
 800066e:	443b      	add	r3, r7
 8000670:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000674:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000676:	4413      	add	r3, r2
 8000678:	637b      	str	r3, [r7, #52]	; 0x34
	for(int i=0; i<10;i++){
 800067a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800067c:	3301      	adds	r3, #1
 800067e:	633b      	str	r3, [r7, #48]	; 0x30
 8000680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000682:	2b09      	cmp	r3, #9
 8000684:	dde6      	ble.n	8000654 <teste_ADC+0x50>
	}
	avrg_value = avrg_value*3300/40950;
 8000686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000688:	f640 42e4 	movw	r2, #3300	; 0xce4
 800068c:	fb02 f303 	mul.w	r3, r2, r3
 8000690:	4a05      	ldr	r2, [pc, #20]	; (80006a8 <teste_ADC+0xa4>)
 8000692:	fba2 2303 	umull	r2, r3, r2, r3
 8000696:	0bdb      	lsrs	r3, r3, #15
 8000698:	637b      	str	r3, [r7, #52]	; 0x34
	return avrg_value;
 800069a:	6b7b      	ldr	r3, [r7, #52]	; 0x34

}
 800069c:	4618      	mov	r0, r3
 800069e:	3738      	adds	r7, #56	; 0x38
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000080 	.word	0x20000080
 80006a8:	ccd99a67 	.word	0xccd99a67

080006ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006e4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80006b0:	f7ff ff62 	bl	8000578 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b4:	480c      	ldr	r0, [pc, #48]	; (80006e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80006b6:	490d      	ldr	r1, [pc, #52]	; (80006ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80006b8:	4a0d      	ldr	r2, [pc, #52]	; (80006f0 <LoopForever+0xe>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006bc:	e002      	b.n	80006c4 <LoopCopyDataInit>

080006be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c2:	3304      	adds	r3, #4

080006c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c8:	d3f9      	bcc.n	80006be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ca:	4a0a      	ldr	r2, [pc, #40]	; (80006f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006cc:	4c0a      	ldr	r4, [pc, #40]	; (80006f8 <LoopForever+0x16>)
  movs r3, #0
 80006ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d0:	e001      	b.n	80006d6 <LoopFillZerobss>

080006d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d4:	3204      	adds	r2, #4

080006d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d8:	d3fb      	bcc.n	80006d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006da:	f003 f891 	bl	8003800 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006de:	f7ff fd79 	bl	80001d4 <main>

080006e2 <LoopForever>:

LoopForever:
    b LoopForever
 80006e2:	e7fe      	b.n	80006e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006e4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80006e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006f0:	080038a8 	.word	0x080038a8
  ldr r2, =_sbss
 80006f4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006f8:	20000088 	.word	0x20000088

080006fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006fc:	e7fe      	b.n	80006fc <ADC1_2_IRQHandler>
	...

08000700 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000704:	4b08      	ldr	r3, [pc, #32]	; (8000728 <HAL_Init+0x28>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a07      	ldr	r2, [pc, #28]	; (8000728 <HAL_Init+0x28>)
 800070a:	f043 0310 	orr.w	r3, r3, #16
 800070e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000710:	2003      	movs	r0, #3
 8000712:	f001 fa47 	bl	8001ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000716:	200f      	movs	r0, #15
 8000718:	f000 f808 	bl	800072c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800071c:	f7ff fea2 	bl	8000464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000720:	2300      	movs	r3, #0
}
 8000722:	4618      	mov	r0, r3
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40022000 	.word	0x40022000

0800072c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <HAL_InitTick+0x54>)
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <HAL_InitTick+0x58>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	4619      	mov	r1, r3
 800073e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000742:	fbb3 f3f1 	udiv	r3, r3, r1
 8000746:	fbb2 f3f3 	udiv	r3, r2, r3
 800074a:	4618      	mov	r0, r3
 800074c:	f001 fa51 	bl	8001bf2 <HAL_SYSTICK_Config>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000756:	2301      	movs	r3, #1
 8000758:	e00e      	b.n	8000778 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2b0f      	cmp	r3, #15
 800075e:	d80a      	bhi.n	8000776 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000760:	2200      	movs	r2, #0
 8000762:	6879      	ldr	r1, [r7, #4]
 8000764:	f04f 30ff 	mov.w	r0, #4294967295
 8000768:	f001 fa27 	bl	8001bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800076c:	4a06      	ldr	r2, [pc, #24]	; (8000788 <HAL_InitTick+0x5c>)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000772:	2300      	movs	r3, #0
 8000774:	e000      	b.n	8000778 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000776:	2301      	movs	r3, #1
}
 8000778:	4618      	mov	r0, r3
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000000 	.word	0x20000000
 8000784:	20000008 	.word	0x20000008
 8000788:	20000004 	.word	0x20000004

0800078c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <HAL_IncTick+0x20>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	461a      	mov	r2, r3
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <HAL_IncTick+0x24>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4413      	add	r3, r2
 800079c:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <HAL_IncTick+0x24>)
 800079e:	6013      	str	r3, [r2, #0]
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	20000008 	.word	0x20000008
 80007b0:	20000084 	.word	0x20000084

080007b4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  return uwTick;  
 80007b8:	4b03      	ldr	r3, [pc, #12]	; (80007c8 <HAL_GetTick+0x14>)
 80007ba:	681b      	ldr	r3, [r3, #0]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	20000084 	.word	0x20000084

080007cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b09a      	sub	sp, #104	; 0x68
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007d4:	2300      	movs	r3, #0
 80007d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80007da:	2300      	movs	r3, #0
 80007dc:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d101      	bne.n	80007ec <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80007e8:	2301      	movs	r3, #1
 80007ea:	e1e3      	b.n	8000bb4 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	691b      	ldr	r3, [r3, #16]
 80007f0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f6:	f003 0310 	and.w	r3, r3, #16
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d176      	bne.n	80008ec <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	2b00      	cmp	r3, #0
 8000804:	d152      	bne.n	80008ac <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2200      	movs	r2, #0
 800080a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2200      	movs	r2, #0
 8000810:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2200      	movs	r2, #0
 8000816:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2200      	movs	r2, #0
 800081c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f7ff fe43 	bl	80004ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000830:	2b00      	cmp	r3, #0
 8000832:	d13b      	bne.n	80008ac <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f001 f89d 	bl	8001974 <ADC_Disable>
 800083a:	4603      	mov	r3, r0
 800083c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000844:	f003 0310 	and.w	r3, r3, #16
 8000848:	2b00      	cmp	r3, #0
 800084a:	d12f      	bne.n	80008ac <HAL_ADC_Init+0xe0>
 800084c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000850:	2b00      	cmp	r3, #0
 8000852:	d12b      	bne.n	80008ac <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000858:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800085c:	f023 0302 	bic.w	r3, r3, #2
 8000860:	f043 0202 	orr.w	r2, r3, #2
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	689a      	ldr	r2, [r3, #8]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000876:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	689a      	ldr	r2, [r3, #8]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000886:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000888:	4b92      	ldr	r3, [pc, #584]	; (8000ad4 <HAL_ADC_Init+0x308>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a92      	ldr	r2, [pc, #584]	; (8000ad8 <HAL_ADC_Init+0x30c>)
 800088e:	fba2 2303 	umull	r2, r3, r2, r3
 8000892:	0c9a      	lsrs	r2, r3, #18
 8000894:	4613      	mov	r3, r2
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	4413      	add	r3, r2
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800089e:	e002      	b.n	80008a6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	3b01      	subs	r3, #1
 80008a4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d1f9      	bne.n	80008a0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	689b      	ldr	r3, [r3, #8]
 80008b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d007      	beq.n	80008ca <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	689b      	ldr	r3, [r3, #8]
 80008c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80008c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80008c8:	d110      	bne.n	80008ec <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ce:	f023 0312 	bic.w	r3, r3, #18
 80008d2:	f043 0210 	orr.w	r2, r3, #16
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008de:	f043 0201 	orr.w	r2, r3, #1
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f0:	f003 0310 	and.w	r3, r3, #16
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	f040 8150 	bne.w	8000b9a <HAL_ADC_Init+0x3ce>
 80008fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80008fe:	2b00      	cmp	r3, #0
 8000900:	f040 814b 	bne.w	8000b9a <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	689b      	ldr	r3, [r3, #8]
 800090a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800090e:	2b00      	cmp	r3, #0
 8000910:	f040 8143 	bne.w	8000b9a <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000918:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800091c:	f043 0202 	orr.w	r2, r3, #2
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800092c:	d004      	beq.n	8000938 <HAL_ADC_Init+0x16c>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a6a      	ldr	r2, [pc, #424]	; (8000adc <HAL_ADC_Init+0x310>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d101      	bne.n	800093c <HAL_ADC_Init+0x170>
 8000938:	4b69      	ldr	r3, [pc, #420]	; (8000ae0 <HAL_ADC_Init+0x314>)
 800093a:	e000      	b.n	800093e <HAL_ADC_Init+0x172>
 800093c:	4b69      	ldr	r3, [pc, #420]	; (8000ae4 <HAL_ADC_Init+0x318>)
 800093e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000948:	d102      	bne.n	8000950 <HAL_ADC_Init+0x184>
 800094a:	4b64      	ldr	r3, [pc, #400]	; (8000adc <HAL_ADC_Init+0x310>)
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	e01a      	b.n	8000986 <HAL_ADC_Init+0x1ba>
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a61      	ldr	r2, [pc, #388]	; (8000adc <HAL_ADC_Init+0x310>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d103      	bne.n	8000962 <HAL_ADC_Init+0x196>
 800095a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	e011      	b.n	8000986 <HAL_ADC_Init+0x1ba>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a60      	ldr	r2, [pc, #384]	; (8000ae8 <HAL_ADC_Init+0x31c>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d102      	bne.n	8000972 <HAL_ADC_Init+0x1a6>
 800096c:	4b5f      	ldr	r3, [pc, #380]	; (8000aec <HAL_ADC_Init+0x320>)
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	e009      	b.n	8000986 <HAL_ADC_Init+0x1ba>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a5d      	ldr	r2, [pc, #372]	; (8000aec <HAL_ADC_Init+0x320>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d102      	bne.n	8000982 <HAL_ADC_Init+0x1b6>
 800097c:	4b5a      	ldr	r3, [pc, #360]	; (8000ae8 <HAL_ADC_Init+0x31c>)
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	e001      	b.n	8000986 <HAL_ADC_Init+0x1ba>
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	f003 0303 	and.w	r3, r3, #3
 8000990:	2b01      	cmp	r3, #1
 8000992:	d108      	bne.n	80009a6 <HAL_ADC_Init+0x1da>
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d101      	bne.n	80009a6 <HAL_ADC_Init+0x1da>
 80009a2:	2301      	movs	r3, #1
 80009a4:	e000      	b.n	80009a8 <HAL_ADC_Init+0x1dc>
 80009a6:	2300      	movs	r3, #0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d11c      	bne.n	80009e6 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80009ac:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d010      	beq.n	80009d4 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	f003 0303 	and.w	r3, r3, #3
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d107      	bne.n	80009ce <HAL_ADC_Init+0x202>
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d101      	bne.n	80009ce <HAL_ADC_Init+0x202>
 80009ca:	2301      	movs	r3, #1
 80009cc:	e000      	b.n	80009d0 <HAL_ADC_Init+0x204>
 80009ce:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d108      	bne.n	80009e6 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80009d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009d6:	689b      	ldr	r3, [r3, #8]
 80009d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	431a      	orrs	r2, r3
 80009e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009e4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	7e5b      	ldrb	r3, [r3, #25]
 80009ea:	035b      	lsls	r3, r3, #13
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80009f0:	2a01      	cmp	r2, #1
 80009f2:	d002      	beq.n	80009fa <HAL_ADC_Init+0x22e>
 80009f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009f8:	e000      	b.n	80009fc <HAL_ADC_Init+0x230>
 80009fa:	2200      	movs	r2, #0
 80009fc:	431a      	orrs	r2, r3
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	68db      	ldr	r3, [r3, #12]
 8000a02:	431a      	orrs	r2, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	689b      	ldr	r3, [r3, #8]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d11b      	bne.n	8000a52 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	7e5b      	ldrb	r3, [r3, #25]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d109      	bne.n	8000a36 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a26:	3b01      	subs	r3, #1
 8000a28:	045a      	lsls	r2, r3, #17
 8000a2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a32:	663b      	str	r3, [r7, #96]	; 0x60
 8000a34:	e00d      	b.n	8000a52 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000a3e:	f043 0220 	orr.w	r2, r3, #32
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	f043 0201 	orr.w	r2, r3, #1
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d054      	beq.n	8000b04 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a22      	ldr	r2, [pc, #136]	; (8000ae8 <HAL_ADC_Init+0x31c>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d004      	beq.n	8000a6e <HAL_ADC_Init+0x2a2>
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a20      	ldr	r2, [pc, #128]	; (8000aec <HAL_ADC_Init+0x320>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d140      	bne.n	8000af0 <HAL_ADC_Init+0x324>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a72:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000a76:	d02a      	beq.n	8000ace <HAL_ADC_Init+0x302>
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a80:	d022      	beq.n	8000ac8 <HAL_ADC_Init+0x2fc>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a86:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000a8a:	d01a      	beq.n	8000ac2 <HAL_ADC_Init+0x2f6>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a90:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8000a94:	d012      	beq.n	8000abc <HAL_ADC_Init+0x2f0>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a9a:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8000a9e:	d00a      	beq.n	8000ab6 <HAL_ADC_Init+0x2ea>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa4:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8000aa8:	d002      	beq.n	8000ab0 <HAL_ADC_Init+0x2e4>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aae:	e023      	b.n	8000af8 <HAL_ADC_Init+0x32c>
 8000ab0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000ab4:	e020      	b.n	8000af8 <HAL_ADC_Init+0x32c>
 8000ab6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000aba:	e01d      	b.n	8000af8 <HAL_ADC_Init+0x32c>
 8000abc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000ac0:	e01a      	b.n	8000af8 <HAL_ADC_Init+0x32c>
 8000ac2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ac6:	e017      	b.n	8000af8 <HAL_ADC_Init+0x32c>
 8000ac8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000acc:	e014      	b.n	8000af8 <HAL_ADC_Init+0x32c>
 8000ace:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000ad2:	e011      	b.n	8000af8 <HAL_ADC_Init+0x32c>
 8000ad4:	20000000 	.word	0x20000000
 8000ad8:	431bde83 	.word	0x431bde83
 8000adc:	50000100 	.word	0x50000100
 8000ae0:	50000300 	.word	0x50000300
 8000ae4:	50000700 	.word	0x50000700
 8000ae8:	50000400 	.word	0x50000400
 8000aec:	50000500 	.word	0x50000500
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000afc:	4313      	orrs	r3, r2
 8000afe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b00:	4313      	orrs	r3, r2
 8000b02:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	689b      	ldr	r3, [r3, #8]
 8000b0a:	f003 030c 	and.w	r3, r3, #12
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d114      	bne.n	8000b3c <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	6812      	ldr	r2, [r2, #0]
 8000b1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000b20:	f023 0302 	bic.w	r3, r3, #2
 8000b24:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	7e1b      	ldrb	r3, [r3, #24]
 8000b2a:	039a      	lsls	r2, r3, #14
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	4313      	orrs	r3, r2
 8000b36:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	68da      	ldr	r2, [r3, #12]
 8000b42:	4b1e      	ldr	r3, [pc, #120]	; (8000bbc <HAL_ADC_Init+0x3f0>)
 8000b44:	4013      	ands	r3, r2
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	6812      	ldr	r2, [r2, #0]
 8000b4a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000b4c:	430b      	orrs	r3, r1
 8000b4e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	691b      	ldr	r3, [r3, #16]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d10c      	bne.n	8000b72 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f023 010f 	bic.w	r1, r3, #15
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	69db      	ldr	r3, [r3, #28]
 8000b66:	1e5a      	subs	r2, r3, #1
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	430a      	orrs	r2, r1
 8000b6e:	631a      	str	r2, [r3, #48]	; 0x30
 8000b70:	e007      	b.n	8000b82 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f022 020f 	bic.w	r2, r2, #15
 8000b80:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2200      	movs	r2, #0
 8000b86:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8c:	f023 0303 	bic.w	r3, r3, #3
 8000b90:	f043 0201 	orr.w	r2, r3, #1
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	641a      	str	r2, [r3, #64]	; 0x40
 8000b98:	e00a      	b.n	8000bb0 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	f023 0312 	bic.w	r3, r3, #18
 8000ba2:	f043 0210 	orr.w	r2, r3, #16
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000baa:	2301      	movs	r3, #1
 8000bac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000bb0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3768      	adds	r7, #104	; 0x68
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	fff0c007 	.word	0xfff0c007

08000bc0 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	f003 0304 	and.w	r3, r3, #4
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f040 80f9 	bne.w	8000dce <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d101      	bne.n	8000bea <HAL_ADC_Start+0x2a>
 8000be6:	2302      	movs	r3, #2
 8000be8:	e0f4      	b.n	8000dd4 <HAL_ADC_Start+0x214>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2201      	movs	r2, #1
 8000bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f000 fe5a 	bl	80018ac <ADC_Enable>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	f040 80e0 	bne.w	8000dc4 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c08:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000c0c:	f023 0301 	bic.w	r3, r3, #1
 8000c10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c20:	d004      	beq.n	8000c2c <HAL_ADC_Start+0x6c>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a6d      	ldr	r2, [pc, #436]	; (8000ddc <HAL_ADC_Start+0x21c>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d106      	bne.n	8000c3a <HAL_ADC_Start+0x7a>
 8000c2c:	4b6c      	ldr	r3, [pc, #432]	; (8000de0 <HAL_ADC_Start+0x220>)
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	f003 031f 	and.w	r3, r3, #31
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d010      	beq.n	8000c5a <HAL_ADC_Start+0x9a>
 8000c38:	e005      	b.n	8000c46 <HAL_ADC_Start+0x86>
 8000c3a:	4b6a      	ldr	r3, [pc, #424]	; (8000de4 <HAL_ADC_Start+0x224>)
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	f003 031f 	and.w	r3, r3, #31
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d009      	beq.n	8000c5a <HAL_ADC_Start+0x9a>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c4e:	d004      	beq.n	8000c5a <HAL_ADC_Start+0x9a>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a64      	ldr	r2, [pc, #400]	; (8000de8 <HAL_ADC_Start+0x228>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d115      	bne.n	8000c86 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d036      	beq.n	8000ce2 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c7c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000c84:	e02d      	b.n	8000ce2 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c9a:	d004      	beq.n	8000ca6 <HAL_ADC_Start+0xe6>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a4e      	ldr	r2, [pc, #312]	; (8000ddc <HAL_ADC_Start+0x21c>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d10a      	bne.n	8000cbc <HAL_ADC_Start+0xfc>
 8000ca6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	bf14      	ite	ne
 8000cb4:	2301      	movne	r3, #1
 8000cb6:	2300      	moveq	r3, #0
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	e008      	b.n	8000cce <HAL_ADC_Start+0x10e>
 8000cbc:	4b4a      	ldr	r3, [pc, #296]	; (8000de8 <HAL_ADC_Start+0x228>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	bf14      	ite	ne
 8000cc8:	2301      	movne	r3, #1
 8000cca:	2300      	moveq	r3, #0
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d007      	beq.n	8000ce2 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000cda:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cee:	d106      	bne.n	8000cfe <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf4:	f023 0206 	bic.w	r2, r3, #6
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	645a      	str	r2, [r3, #68]	; 0x44
 8000cfc:	e002      	b.n	8000d04 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2200      	movs	r2, #0
 8000d02:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2200      	movs	r2, #0
 8000d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	221c      	movs	r2, #28
 8000d12:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d1c:	d004      	beq.n	8000d28 <HAL_ADC_Start+0x168>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a2e      	ldr	r2, [pc, #184]	; (8000ddc <HAL_ADC_Start+0x21c>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d106      	bne.n	8000d36 <HAL_ADC_Start+0x176>
 8000d28:	4b2d      	ldr	r3, [pc, #180]	; (8000de0 <HAL_ADC_Start+0x220>)
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	f003 031f 	and.w	r3, r3, #31
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d03e      	beq.n	8000db2 <HAL_ADC_Start+0x1f2>
 8000d34:	e005      	b.n	8000d42 <HAL_ADC_Start+0x182>
 8000d36:	4b2b      	ldr	r3, [pc, #172]	; (8000de4 <HAL_ADC_Start+0x224>)
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	f003 031f 	and.w	r3, r3, #31
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d037      	beq.n	8000db2 <HAL_ADC_Start+0x1f2>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d4a:	d004      	beq.n	8000d56 <HAL_ADC_Start+0x196>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a22      	ldr	r2, [pc, #136]	; (8000ddc <HAL_ADC_Start+0x21c>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d106      	bne.n	8000d64 <HAL_ADC_Start+0x1a4>
 8000d56:	4b22      	ldr	r3, [pc, #136]	; (8000de0 <HAL_ADC_Start+0x220>)
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	f003 031f 	and.w	r3, r3, #31
 8000d5e:	2b05      	cmp	r3, #5
 8000d60:	d027      	beq.n	8000db2 <HAL_ADC_Start+0x1f2>
 8000d62:	e005      	b.n	8000d70 <HAL_ADC_Start+0x1b0>
 8000d64:	4b1f      	ldr	r3, [pc, #124]	; (8000de4 <HAL_ADC_Start+0x224>)
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	f003 031f 	and.w	r3, r3, #31
 8000d6c:	2b05      	cmp	r3, #5
 8000d6e:	d020      	beq.n	8000db2 <HAL_ADC_Start+0x1f2>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d78:	d004      	beq.n	8000d84 <HAL_ADC_Start+0x1c4>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a17      	ldr	r2, [pc, #92]	; (8000ddc <HAL_ADC_Start+0x21c>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d106      	bne.n	8000d92 <HAL_ADC_Start+0x1d2>
 8000d84:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <HAL_ADC_Start+0x220>)
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	f003 031f 	and.w	r3, r3, #31
 8000d8c:	2b09      	cmp	r3, #9
 8000d8e:	d010      	beq.n	8000db2 <HAL_ADC_Start+0x1f2>
 8000d90:	e005      	b.n	8000d9e <HAL_ADC_Start+0x1de>
 8000d92:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <HAL_ADC_Start+0x224>)
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	f003 031f 	and.w	r3, r3, #31
 8000d9a:	2b09      	cmp	r3, #9
 8000d9c:	d009      	beq.n	8000db2 <HAL_ADC_Start+0x1f2>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000da6:	d004      	beq.n	8000db2 <HAL_ADC_Start+0x1f2>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a0e      	ldr	r2, [pc, #56]	; (8000de8 <HAL_ADC_Start+0x228>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d10f      	bne.n	8000dd2 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	689a      	ldr	r2, [r3, #8]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f042 0204 	orr.w	r2, r2, #4
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	e006      	b.n	8000dd2 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000dcc:	e001      	b.n	8000dd2 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	50000100 	.word	0x50000100
 8000de0:	50000300 	.word	0x50000300
 8000de4:	50000700 	.word	0x50000700
 8000de8:	50000400 	.word	0x50000400

08000dec <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	2b08      	cmp	r3, #8
 8000e00:	d102      	bne.n	8000e08 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000e02:	2308      	movs	r3, #8
 8000e04:	617b      	str	r3, [r7, #20]
 8000e06:	e03a      	b.n	8000e7e <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e10:	d004      	beq.n	8000e1c <HAL_ADC_PollForConversion+0x30>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a72      	ldr	r2, [pc, #456]	; (8000fe0 <HAL_ADC_PollForConversion+0x1f4>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d101      	bne.n	8000e20 <HAL_ADC_PollForConversion+0x34>
 8000e1c:	4b71      	ldr	r3, [pc, #452]	; (8000fe4 <HAL_ADC_PollForConversion+0x1f8>)
 8000e1e:	e000      	b.n	8000e22 <HAL_ADC_PollForConversion+0x36>
 8000e20:	4b71      	ldr	r3, [pc, #452]	; (8000fe8 <HAL_ADC_PollForConversion+0x1fc>)
 8000e22:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	f003 031f 	and.w	r3, r3, #31
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d112      	bne.n	8000e56 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d11d      	bne.n	8000e7a <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	f043 0220 	orr.w	r2, r3, #32
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e0bf      	b.n	8000fd6 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d00b      	beq.n	8000e7a <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	f043 0220 	orr.w	r2, r3, #32
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2200      	movs	r2, #0
 8000e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e0ad      	b.n	8000fd6 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000e7a:	230c      	movs	r3, #12
 8000e7c:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e86:	d004      	beq.n	8000e92 <HAL_ADC_PollForConversion+0xa6>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a54      	ldr	r2, [pc, #336]	; (8000fe0 <HAL_ADC_PollForConversion+0x1f4>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d106      	bne.n	8000ea0 <HAL_ADC_PollForConversion+0xb4>
 8000e92:	4b54      	ldr	r3, [pc, #336]	; (8000fe4 <HAL_ADC_PollForConversion+0x1f8>)
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	f003 031f 	and.w	r3, r3, #31
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d010      	beq.n	8000ec0 <HAL_ADC_PollForConversion+0xd4>
 8000e9e:	e005      	b.n	8000eac <HAL_ADC_PollForConversion+0xc0>
 8000ea0:	4b51      	ldr	r3, [pc, #324]	; (8000fe8 <HAL_ADC_PollForConversion+0x1fc>)
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	f003 031f 	and.w	r3, r3, #31
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d009      	beq.n	8000ec0 <HAL_ADC_PollForConversion+0xd4>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000eb4:	d004      	beq.n	8000ec0 <HAL_ADC_PollForConversion+0xd4>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a4c      	ldr	r2, [pc, #304]	; (8000fec <HAL_ADC_PollForConversion+0x200>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d104      	bne.n	8000eca <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	e00f      	b.n	8000eea <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ed2:	d004      	beq.n	8000ede <HAL_ADC_PollForConversion+0xf2>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a41      	ldr	r2, [pc, #260]	; (8000fe0 <HAL_ADC_PollForConversion+0x1f4>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d102      	bne.n	8000ee4 <HAL_ADC_PollForConversion+0xf8>
 8000ede:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ee2:	e000      	b.n	8000ee6 <HAL_ADC_PollForConversion+0xfa>
 8000ee4:	4b41      	ldr	r3, [pc, #260]	; (8000fec <HAL_ADC_PollForConversion+0x200>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8000eea:	f7ff fc63 	bl	80007b4 <HAL_GetTick>
 8000eee:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000ef0:	e021      	b.n	8000f36 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef8:	d01d      	beq.n	8000f36 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d007      	beq.n	8000f10 <HAL_ADC_PollForConversion+0x124>
 8000f00:	f7ff fc58 	bl	80007b4 <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	683a      	ldr	r2, [r7, #0]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d212      	bcs.n	8000f36 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d10b      	bne.n	8000f36 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f22:	f043 0204 	orr.w	r2, r3, #4
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8000f32:	2303      	movs	r3, #3
 8000f34:	e04f      	b.n	8000fd6 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d0d6      	beq.n	8000ef2 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f48:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d131      	bne.n	8000fc2 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d12c      	bne.n	8000fc2 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0308 	and.w	r3, r3, #8
 8000f72:	2b08      	cmp	r3, #8
 8000f74:	d125      	bne.n	8000fc2 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	f003 0304 	and.w	r3, r3, #4
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d112      	bne.n	8000faa <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d112      	bne.n	8000fc2 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa0:	f043 0201 	orr.w	r2, r3, #1
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	641a      	str	r2, [r3, #64]	; 0x40
 8000fa8:	e00b      	b.n	8000fc2 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	f043 0220 	orr.w	r2, r3, #32
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	f043 0201 	orr.w	r2, r3, #1
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d103      	bne.n	8000fd4 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	697a      	ldr	r2, [r7, #20]
 8000fd2:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	50000100 	.word	0x50000100
 8000fe4:	50000300 	.word	0x50000300
 8000fe8:	50000700 	.word	0x50000700
 8000fec:	50000400 	.word	0x50000400

08000ff0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b084      	sub	sp, #16
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001014:	2300      	movs	r3, #0
 8001016:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800101e:	2b01      	cmp	r3, #1
 8001020:	d101      	bne.n	8001026 <HAL_ADCEx_Calibration_Start+0x1c>
 8001022:	2302      	movs	r3, #2
 8001024:	e05f      	b.n	80010e6 <HAL_ADCEx_Calibration_Start+0xdc>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2201      	movs	r2, #1
 800102a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f000 fca0 	bl	8001974 <ADC_Disable>
 8001034:	4603      	mov	r3, r0
 8001036:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d14e      	bne.n	80010dc <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2201      	movs	r2, #1
 8001042:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	689a      	ldr	r2, [r3, #8]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001052:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d107      	bne.n	800106a <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	689a      	ldr	r2, [r3, #8]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001068:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001078:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800107a:	f7ff fb9b 	bl	80007b4 <HAL_GetTick>
 800107e:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001080:	e01c      	b.n	80010bc <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001082:	f7ff fb97 	bl	80007b4 <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	2b0a      	cmp	r3, #10
 800108e:	d915      	bls.n	80010bc <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800109a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800109e:	d10d      	bne.n	80010bc <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	f023 0312 	bic.w	r3, r3, #18
 80010a8:	f043 0210 	orr.w	r2, r3, #16
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e014      	b.n	80010e6 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80010c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80010ca:	d0da      	beq.n	8001082 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d0:	f023 0303 	bic.w	r3, r3, #3
 80010d4:	f043 0201 	orr.w	r2, r3, #1
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b09b      	sub	sp, #108	; 0x6c
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010fa:	2300      	movs	r3, #0
 80010fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001100:	2300      	movs	r3, #0
 8001102:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800110a:	2b01      	cmp	r3, #1
 800110c:	d101      	bne.n	8001112 <HAL_ADC_ConfigChannel+0x22>
 800110e:	2302      	movs	r3, #2
 8001110:	e2ca      	b.n	80016a8 <HAL_ADC_ConfigChannel+0x5b8>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2201      	movs	r2, #1
 8001116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	2b00      	cmp	r3, #0
 8001126:	f040 82ae 	bne.w	8001686 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2b04      	cmp	r3, #4
 8001130:	d81c      	bhi.n	800116c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	4613      	mov	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	4413      	add	r3, r2
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	461a      	mov	r2, r3
 8001146:	231f      	movs	r3, #31
 8001148:	4093      	lsls	r3, r2
 800114a:	43db      	mvns	r3, r3
 800114c:	4019      	ands	r1, r3
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	6818      	ldr	r0, [r3, #0]
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	4613      	mov	r3, r2
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	4413      	add	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	fa00 f203 	lsl.w	r2, r0, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	430a      	orrs	r2, r1
 8001168:	631a      	str	r2, [r3, #48]	; 0x30
 800116a:	e063      	b.n	8001234 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	2b09      	cmp	r3, #9
 8001172:	d81e      	bhi.n	80011b2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	4613      	mov	r3, r2
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	4413      	add	r3, r2
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	3b1e      	subs	r3, #30
 8001188:	221f      	movs	r2, #31
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	4019      	ands	r1, r3
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	6818      	ldr	r0, [r3, #0]
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	4613      	mov	r3, r2
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	4413      	add	r3, r2
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	3b1e      	subs	r3, #30
 80011a4:	fa00 f203 	lsl.w	r2, r0, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	430a      	orrs	r2, r1
 80011ae:	635a      	str	r2, [r3, #52]	; 0x34
 80011b0:	e040      	b.n	8001234 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b0e      	cmp	r3, #14
 80011b8:	d81e      	bhi.n	80011f8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	4613      	mov	r3, r2
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	4413      	add	r3, r2
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	3b3c      	subs	r3, #60	; 0x3c
 80011ce:	221f      	movs	r2, #31
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	4019      	ands	r1, r3
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	6818      	ldr	r0, [r3, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685a      	ldr	r2, [r3, #4]
 80011e0:	4613      	mov	r3, r2
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	4413      	add	r3, r2
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	3b3c      	subs	r3, #60	; 0x3c
 80011ea:	fa00 f203 	lsl.w	r2, r0, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	430a      	orrs	r2, r1
 80011f4:	639a      	str	r2, [r3, #56]	; 0x38
 80011f6:	e01d      	b.n	8001234 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685a      	ldr	r2, [r3, #4]
 8001202:	4613      	mov	r3, r2
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	4413      	add	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	3b5a      	subs	r3, #90	; 0x5a
 800120c:	221f      	movs	r2, #31
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	4019      	ands	r1, r3
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	6818      	ldr	r0, [r3, #0]
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	4613      	mov	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	4413      	add	r3, r2
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	3b5a      	subs	r3, #90	; 0x5a
 8001228:	fa00 f203 	lsl.w	r2, r0, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	430a      	orrs	r2, r1
 8001232:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f003 030c 	and.w	r3, r3, #12
 800123e:	2b00      	cmp	r3, #0
 8001240:	f040 80e5 	bne.w	800140e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b09      	cmp	r3, #9
 800124a:	d91c      	bls.n	8001286 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6999      	ldr	r1, [r3, #24]
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	4613      	mov	r3, r2
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	4413      	add	r3, r2
 800125c:	3b1e      	subs	r3, #30
 800125e:	2207      	movs	r2, #7
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	4019      	ands	r1, r3
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	6898      	ldr	r0, [r3, #8]
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4613      	mov	r3, r2
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	4413      	add	r3, r2
 8001276:	3b1e      	subs	r3, #30
 8001278:	fa00 f203 	lsl.w	r2, r0, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	430a      	orrs	r2, r1
 8001282:	619a      	str	r2, [r3, #24]
 8001284:	e019      	b.n	80012ba <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6959      	ldr	r1, [r3, #20]
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4613      	mov	r3, r2
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	4413      	add	r3, r2
 8001296:	2207      	movs	r2, #7
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	4019      	ands	r1, r3
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	6898      	ldr	r0, [r3, #8]
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4613      	mov	r3, r2
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	4413      	add	r3, r2
 80012ae:	fa00 f203 	lsl.w	r2, r0, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	430a      	orrs	r2, r1
 80012b8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	695a      	ldr	r2, [r3, #20]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	08db      	lsrs	r3, r3, #3
 80012c6:	f003 0303 	and.w	r3, r3, #3
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	691b      	ldr	r3, [r3, #16]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	2b03      	cmp	r3, #3
 80012da:	d84f      	bhi.n	800137c <HAL_ADC_ConfigChannel+0x28c>
 80012dc:	a201      	add	r2, pc, #4	; (adr r2, 80012e4 <HAL_ADC_ConfigChannel+0x1f4>)
 80012de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e2:	bf00      	nop
 80012e4:	080012f5 	.word	0x080012f5
 80012e8:	08001317 	.word	0x08001317
 80012ec:	08001339 	.word	0x08001339
 80012f0:	0800135b 	.word	0x0800135b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012fa:	4b9a      	ldr	r3, [pc, #616]	; (8001564 <HAL_ADC_ConfigChannel+0x474>)
 80012fc:	4013      	ands	r3, r2
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	6812      	ldr	r2, [r2, #0]
 8001302:	0691      	lsls	r1, r2, #26
 8001304:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001306:	430a      	orrs	r2, r1
 8001308:	431a      	orrs	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001312:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001314:	e07e      	b.n	8001414 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800131c:	4b91      	ldr	r3, [pc, #580]	; (8001564 <HAL_ADC_ConfigChannel+0x474>)
 800131e:	4013      	ands	r3, r2
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	6812      	ldr	r2, [r2, #0]
 8001324:	0691      	lsls	r1, r2, #26
 8001326:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001328:	430a      	orrs	r2, r1
 800132a:	431a      	orrs	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001334:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001336:	e06d      	b.n	8001414 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800133e:	4b89      	ldr	r3, [pc, #548]	; (8001564 <HAL_ADC_ConfigChannel+0x474>)
 8001340:	4013      	ands	r3, r2
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	6812      	ldr	r2, [r2, #0]
 8001346:	0691      	lsls	r1, r2, #26
 8001348:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800134a:	430a      	orrs	r2, r1
 800134c:	431a      	orrs	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001356:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001358:	e05c      	b.n	8001414 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001360:	4b80      	ldr	r3, [pc, #512]	; (8001564 <HAL_ADC_ConfigChannel+0x474>)
 8001362:	4013      	ands	r3, r2
 8001364:	683a      	ldr	r2, [r7, #0]
 8001366:	6812      	ldr	r2, [r2, #0]
 8001368:	0691      	lsls	r1, r2, #26
 800136a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800136c:	430a      	orrs	r2, r1
 800136e:	431a      	orrs	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001378:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800137a:	e04b      	b.n	8001414 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001382:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	069b      	lsls	r3, r3, #26
 800138c:	429a      	cmp	r2, r3
 800138e:	d107      	bne.n	80013a0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800139e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80013a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	069b      	lsls	r3, r3, #26
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d107      	bne.n	80013c4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80013c2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80013ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	069b      	lsls	r3, r3, #26
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d107      	bne.n	80013e8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80013e6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80013ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	069b      	lsls	r3, r3, #26
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d10a      	bne.n	8001412 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800140a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800140c:	e001      	b.n	8001412 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800140e:	bf00      	nop
 8001410:	e000      	b.n	8001414 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001412:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f003 0303 	and.w	r3, r3, #3
 800141e:	2b01      	cmp	r3, #1
 8001420:	d108      	bne.n	8001434 <HAL_ADC_ConfigChannel+0x344>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	2b01      	cmp	r3, #1
 800142e:	d101      	bne.n	8001434 <HAL_ADC_ConfigChannel+0x344>
 8001430:	2301      	movs	r3, #1
 8001432:	e000      	b.n	8001436 <HAL_ADC_ConfigChannel+0x346>
 8001434:	2300      	movs	r3, #0
 8001436:	2b00      	cmp	r3, #0
 8001438:	f040 8130 	bne.w	800169c <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d00f      	beq.n	8001464 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2201      	movs	r2, #1
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43da      	mvns	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	400a      	ands	r2, r1
 800145e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001462:	e049      	b.n	80014f8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2201      	movs	r2, #1
 8001472:	409a      	lsls	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	430a      	orrs	r2, r1
 800147a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2b09      	cmp	r3, #9
 8001484:	d91c      	bls.n	80014c0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6999      	ldr	r1, [r3, #24]
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4613      	mov	r3, r2
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	4413      	add	r3, r2
 8001496:	3b1b      	subs	r3, #27
 8001498:	2207      	movs	r2, #7
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	4019      	ands	r1, r3
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	6898      	ldr	r0, [r3, #8]
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	4613      	mov	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	4413      	add	r3, r2
 80014b0:	3b1b      	subs	r3, #27
 80014b2:	fa00 f203 	lsl.w	r2, r0, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	430a      	orrs	r2, r1
 80014bc:	619a      	str	r2, [r3, #24]
 80014be:	e01b      	b.n	80014f8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6959      	ldr	r1, [r3, #20]
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	1c5a      	adds	r2, r3, #1
 80014cc:	4613      	mov	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	4413      	add	r3, r2
 80014d2:	2207      	movs	r2, #7
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	4019      	ands	r1, r3
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	6898      	ldr	r0, [r3, #8]
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	1c5a      	adds	r2, r3, #1
 80014e6:	4613      	mov	r3, r2
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	4413      	add	r3, r2
 80014ec:	fa00 f203 	lsl.w	r2, r0, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001500:	d004      	beq.n	800150c <HAL_ADC_ConfigChannel+0x41c>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a18      	ldr	r2, [pc, #96]	; (8001568 <HAL_ADC_ConfigChannel+0x478>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d101      	bne.n	8001510 <HAL_ADC_ConfigChannel+0x420>
 800150c:	4b17      	ldr	r3, [pc, #92]	; (800156c <HAL_ADC_ConfigChannel+0x47c>)
 800150e:	e000      	b.n	8001512 <HAL_ADC_ConfigChannel+0x422>
 8001510:	4b17      	ldr	r3, [pc, #92]	; (8001570 <HAL_ADC_ConfigChannel+0x480>)
 8001512:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b10      	cmp	r3, #16
 800151a:	d105      	bne.n	8001528 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800151c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001524:	2b00      	cmp	r3, #0
 8001526:	d015      	beq.n	8001554 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800152c:	2b11      	cmp	r3, #17
 800152e:	d105      	bne.n	800153c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001530:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001538:	2b00      	cmp	r3, #0
 800153a:	d00b      	beq.n	8001554 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001540:	2b12      	cmp	r3, #18
 8001542:	f040 80ab 	bne.w	800169c <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001546:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800154e:	2b00      	cmp	r3, #0
 8001550:	f040 80a4 	bne.w	800169c <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800155c:	d10a      	bne.n	8001574 <HAL_ADC_ConfigChannel+0x484>
 800155e:	4b02      	ldr	r3, [pc, #8]	; (8001568 <HAL_ADC_ConfigChannel+0x478>)
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	e022      	b.n	80015aa <HAL_ADC_ConfigChannel+0x4ba>
 8001564:	83fff000 	.word	0x83fff000
 8001568:	50000100 	.word	0x50000100
 800156c:	50000300 	.word	0x50000300
 8001570:	50000700 	.word	0x50000700
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a4e      	ldr	r2, [pc, #312]	; (80016b4 <HAL_ADC_ConfigChannel+0x5c4>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d103      	bne.n	8001586 <HAL_ADC_ConfigChannel+0x496>
 800157e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	e011      	b.n	80015aa <HAL_ADC_ConfigChannel+0x4ba>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a4b      	ldr	r2, [pc, #300]	; (80016b8 <HAL_ADC_ConfigChannel+0x5c8>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d102      	bne.n	8001596 <HAL_ADC_ConfigChannel+0x4a6>
 8001590:	4b4a      	ldr	r3, [pc, #296]	; (80016bc <HAL_ADC_ConfigChannel+0x5cc>)
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	e009      	b.n	80015aa <HAL_ADC_ConfigChannel+0x4ba>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a48      	ldr	r2, [pc, #288]	; (80016bc <HAL_ADC_ConfigChannel+0x5cc>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d102      	bne.n	80015a6 <HAL_ADC_ConfigChannel+0x4b6>
 80015a0:	4b45      	ldr	r3, [pc, #276]	; (80016b8 <HAL_ADC_ConfigChannel+0x5c8>)
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	e001      	b.n	80015aa <HAL_ADC_ConfigChannel+0x4ba>
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f003 0303 	and.w	r3, r3, #3
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d108      	bne.n	80015ca <HAL_ADC_ConfigChannel+0x4da>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d101      	bne.n	80015ca <HAL_ADC_ConfigChannel+0x4da>
 80015c6:	2301      	movs	r3, #1
 80015c8:	e000      	b.n	80015cc <HAL_ADC_ConfigChannel+0x4dc>
 80015ca:	2300      	movs	r3, #0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d150      	bne.n	8001672 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80015d0:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d010      	beq.n	80015f8 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 0303 	and.w	r3, r3, #3
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d107      	bne.n	80015f2 <HAL_ADC_ConfigChannel+0x502>
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d101      	bne.n	80015f2 <HAL_ADC_ConfigChannel+0x502>
 80015ee:	2301      	movs	r3, #1
 80015f0:	e000      	b.n	80015f4 <HAL_ADC_ConfigChannel+0x504>
 80015f2:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d13c      	bne.n	8001672 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b10      	cmp	r3, #16
 80015fe:	d11d      	bne.n	800163c <HAL_ADC_ConfigChannel+0x54c>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001608:	d118      	bne.n	800163c <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800160a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001614:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001616:	4b2a      	ldr	r3, [pc, #168]	; (80016c0 <HAL_ADC_ConfigChannel+0x5d0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a2a      	ldr	r2, [pc, #168]	; (80016c4 <HAL_ADC_ConfigChannel+0x5d4>)
 800161c:	fba2 2303 	umull	r2, r3, r2, r3
 8001620:	0c9a      	lsrs	r2, r3, #18
 8001622:	4613      	mov	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4413      	add	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800162c:	e002      	b.n	8001634 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	3b01      	subs	r3, #1
 8001632:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f9      	bne.n	800162e <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800163a:	e02e      	b.n	800169a <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b11      	cmp	r3, #17
 8001642:	d10b      	bne.n	800165c <HAL_ADC_ConfigChannel+0x56c>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800164c:	d106      	bne.n	800165c <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800164e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001658:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800165a:	e01e      	b.n	800169a <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b12      	cmp	r3, #18
 8001662:	d11a      	bne.n	800169a <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001664:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800166c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800166e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001670:	e013      	b.n	800169a <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	f043 0220 	orr.w	r2, r3, #32
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001684:	e00a      	b.n	800169c <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f043 0220 	orr.w	r2, r3, #32
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001698:	e000      	b.n	800169c <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800169a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80016a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	376c      	adds	r7, #108	; 0x6c
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	50000100 	.word	0x50000100
 80016b8:	50000400 	.word	0x50000400
 80016bc:	50000500 	.word	0x50000500
 80016c0:	20000000 	.word	0x20000000
 80016c4:	431bde83 	.word	0x431bde83

080016c8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b099      	sub	sp, #100	; 0x64
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016d2:	2300      	movs	r3, #0
 80016d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016e0:	d102      	bne.n	80016e8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80016e2:	4b6d      	ldr	r3, [pc, #436]	; (8001898 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	e01a      	b.n	800171e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a6a      	ldr	r2, [pc, #424]	; (8001898 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d103      	bne.n	80016fa <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80016f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	e011      	b.n	800171e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a67      	ldr	r2, [pc, #412]	; (800189c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d102      	bne.n	800170a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001704:	4b66      	ldr	r3, [pc, #408]	; (80018a0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	e009      	b.n	800171e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a64      	ldr	r2, [pc, #400]	; (80018a0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d102      	bne.n	800171a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001714:	4b61      	ldr	r3, [pc, #388]	; (800189c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	e001      	b.n	800171e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800171a:	2300      	movs	r3, #0
 800171c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d101      	bne.n	8001728 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e0b0      	b.n	800188a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800172e:	2b01      	cmp	r3, #1
 8001730:	d101      	bne.n	8001736 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001732:	2302      	movs	r3, #2
 8001734:	e0a9      	b.n	800188a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2201      	movs	r2, #1
 800173a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	2b00      	cmp	r3, #0
 800174a:	f040 808d 	bne.w	8001868 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 0304 	and.w	r3, r3, #4
 8001756:	2b00      	cmp	r3, #0
 8001758:	f040 8086 	bne.w	8001868 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001764:	d004      	beq.n	8001770 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a4b      	ldr	r2, [pc, #300]	; (8001898 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d101      	bne.n	8001774 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001770:	4b4c      	ldr	r3, [pc, #304]	; (80018a4 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001772:	e000      	b.n	8001776 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001774:	4b4c      	ldr	r3, [pc, #304]	; (80018a8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001776:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d040      	beq.n	8001802 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001780:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	6859      	ldr	r1, [r3, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001792:	035b      	lsls	r3, r3, #13
 8001794:	430b      	orrs	r3, r1
 8001796:	431a      	orrs	r2, r3
 8001798:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800179a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d108      	bne.n	80017bc <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d101      	bne.n	80017bc <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80017b8:	2301      	movs	r3, #1
 80017ba:	e000      	b.n	80017be <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80017bc:	2300      	movs	r3, #0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d15c      	bne.n	800187c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d107      	bne.n	80017de <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d101      	bne.n	80017de <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80017de:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d14b      	bne.n	800187c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80017e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80017ec:	f023 030f 	bic.w	r3, r3, #15
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	6811      	ldr	r1, [r2, #0]
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	6892      	ldr	r2, [r2, #8]
 80017f8:	430a      	orrs	r2, r1
 80017fa:	431a      	orrs	r2, r3
 80017fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017fe:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001800:	e03c      	b.n	800187c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001802:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800180a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800180c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	2b01      	cmp	r3, #1
 800181a:	d108      	bne.n	800182e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b01      	cmp	r3, #1
 8001828:	d101      	bne.n	800182e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800182a:	2301      	movs	r3, #1
 800182c:	e000      	b.n	8001830 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800182e:	2300      	movs	r3, #0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d123      	bne.n	800187c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 0303 	and.w	r3, r3, #3
 800183c:	2b01      	cmp	r3, #1
 800183e:	d107      	bne.n	8001850 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	2b01      	cmp	r3, #1
 800184a:	d101      	bne.n	8001850 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800184c:	2301      	movs	r3, #1
 800184e:	e000      	b.n	8001852 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001850:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001852:	2b00      	cmp	r3, #0
 8001854:	d112      	bne.n	800187c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001856:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800185e:	f023 030f 	bic.w	r3, r3, #15
 8001862:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001864:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001866:	e009      	b.n	800187c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	f043 0220 	orr.w	r2, r3, #32
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800187a:	e000      	b.n	800187e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800187c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001886:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800188a:	4618      	mov	r0, r3
 800188c:	3764      	adds	r7, #100	; 0x64
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	50000100 	.word	0x50000100
 800189c:	50000400 	.word	0x50000400
 80018a0:	50000500 	.word	0x50000500
 80018a4:	50000300 	.word	0x50000300
 80018a8:	50000700 	.word	0x50000700

080018ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d108      	bne.n	80018d8 <ADC_Enable+0x2c>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d101      	bne.n	80018d8 <ADC_Enable+0x2c>
 80018d4:	2301      	movs	r3, #1
 80018d6:	e000      	b.n	80018da <ADC_Enable+0x2e>
 80018d8:	2300      	movs	r3, #0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d143      	bne.n	8001966 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	4b22      	ldr	r3, [pc, #136]	; (8001970 <ADC_Enable+0xc4>)
 80018e6:	4013      	ands	r3, r2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d00d      	beq.n	8001908 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f0:	f043 0210 	orr.w	r2, r3, #16
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fc:	f043 0201 	orr.w	r2, r3, #1
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e02f      	b.n	8001968 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f042 0201 	orr.w	r2, r2, #1
 8001916:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001918:	f7fe ff4c 	bl	80007b4 <HAL_GetTick>
 800191c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800191e:	e01b      	b.n	8001958 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001920:	f7fe ff48 	bl	80007b4 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d914      	bls.n	8001958 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	2b01      	cmp	r3, #1
 800193a:	d00d      	beq.n	8001958 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	f043 0210 	orr.w	r2, r3, #16
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194c:	f043 0201 	orr.w	r2, r3, #1
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e007      	b.n	8001968 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b01      	cmp	r3, #1
 8001964:	d1dc      	bne.n	8001920 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	8000003f 	.word	0x8000003f

08001974 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	2b01      	cmp	r3, #1
 800198c:	d108      	bne.n	80019a0 <ADC_Disable+0x2c>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b01      	cmp	r3, #1
 800199a:	d101      	bne.n	80019a0 <ADC_Disable+0x2c>
 800199c:	2301      	movs	r3, #1
 800199e:	e000      	b.n	80019a2 <ADC_Disable+0x2e>
 80019a0:	2300      	movs	r3, #0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d047      	beq.n	8001a36 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 030d 	and.w	r3, r3, #13
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d10f      	bne.n	80019d4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f042 0202 	orr.w	r2, r2, #2
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2203      	movs	r2, #3
 80019ca:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80019cc:	f7fe fef2 	bl	80007b4 <HAL_GetTick>
 80019d0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80019d2:	e029      	b.n	8001a28 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	f043 0210 	orr.w	r2, r3, #16
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e4:	f043 0201 	orr.w	r2, r3, #1
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e023      	b.n	8001a38 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019f0:	f7fe fee0 	bl	80007b4 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d914      	bls.n	8001a28 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d10d      	bne.n	8001a28 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a10:	f043 0210 	orr.w	r2, r3, #16
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1c:	f043 0201 	orr.w	r2, r3, #1
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e007      	b.n	8001a38 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d0dc      	beq.n	80019f0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <__NVIC_SetPriorityGrouping+0x44>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a56:	68ba      	ldr	r2, [r7, #8]
 8001a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a72:	4a04      	ldr	r2, [pc, #16]	; (8001a84 <__NVIC_SetPriorityGrouping+0x44>)
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	60d3      	str	r3, [r2, #12]
}
 8001a78:	bf00      	nop
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a8c:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	0a1b      	lsrs	r3, r3, #8
 8001a92:	f003 0307 	and.w	r3, r3, #7
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	6039      	str	r1, [r7, #0]
 8001aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	db0a      	blt.n	8001ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	490c      	ldr	r1, [pc, #48]	; (8001af0 <__NVIC_SetPriority+0x4c>)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	0112      	lsls	r2, r2, #4
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001acc:	e00a      	b.n	8001ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	4908      	ldr	r1, [pc, #32]	; (8001af4 <__NVIC_SetPriority+0x50>)
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	3b04      	subs	r3, #4
 8001adc:	0112      	lsls	r2, r2, #4
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	761a      	strb	r2, [r3, #24]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	e000e100 	.word	0xe000e100
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b089      	sub	sp, #36	; 0x24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f1c3 0307 	rsb	r3, r3, #7
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	bf28      	it	cs
 8001b16:	2304      	movcs	r3, #4
 8001b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	2b06      	cmp	r3, #6
 8001b20:	d902      	bls.n	8001b28 <NVIC_EncodePriority+0x30>
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3b03      	subs	r3, #3
 8001b26:	e000      	b.n	8001b2a <NVIC_EncodePriority+0x32>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43da      	mvns	r2, r3
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	401a      	ands	r2, r3
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b40:	f04f 31ff 	mov.w	r1, #4294967295
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4a:	43d9      	mvns	r1, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	4313      	orrs	r3, r2
         );
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3724      	adds	r7, #36	; 0x24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
	...

08001b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b70:	d301      	bcc.n	8001b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b72:	2301      	movs	r3, #1
 8001b74:	e00f      	b.n	8001b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b76:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <SysTick_Config+0x40>)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b7e:	210f      	movs	r1, #15
 8001b80:	f04f 30ff 	mov.w	r0, #4294967295
 8001b84:	f7ff ff8e 	bl	8001aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <SysTick_Config+0x40>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b8e:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <SysTick_Config+0x40>)
 8001b90:	2207      	movs	r2, #7
 8001b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	e000e010 	.word	0xe000e010

08001ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff ff47 	bl	8001a40 <__NVIC_SetPriorityGrouping>
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b086      	sub	sp, #24
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bcc:	f7ff ff5c 	bl	8001a88 <__NVIC_GetPriorityGrouping>
 8001bd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	68b9      	ldr	r1, [r7, #8]
 8001bd6:	6978      	ldr	r0, [r7, #20]
 8001bd8:	f7ff ff8e 	bl	8001af8 <NVIC_EncodePriority>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be2:	4611      	mov	r1, r2
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff ff5d 	bl	8001aa4 <__NVIC_SetPriority>
}
 8001bea:	bf00      	nop
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff ffb0 	bl	8001b60 <SysTick_Config>
 8001c00:	4603      	mov	r3, r0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b087      	sub	sp, #28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c1a:	e160      	b.n	8001ede <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	2101      	movs	r1, #1
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	fa01 f303 	lsl.w	r3, r1, r3
 8001c28:	4013      	ands	r3, r2
 8001c2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 8152 	beq.w	8001ed8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 0303 	and.w	r3, r3, #3
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d005      	beq.n	8001c4c <HAL_GPIO_Init+0x40>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d130      	bne.n	8001cae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	2203      	movs	r2, #3
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4013      	ands	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c82:	2201      	movs	r2, #1
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	091b      	lsrs	r3, r3, #4
 8001c98:	f003 0201 	and.w	r2, r3, #1
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	2b03      	cmp	r3, #3
 8001cb8:	d017      	beq.n	8001cea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d123      	bne.n	8001d3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	08da      	lsrs	r2, r3, #3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3208      	adds	r2, #8
 8001cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	220f      	movs	r2, #15
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43db      	mvns	r3, r3
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	4013      	ands	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	691a      	ldr	r2, [r3, #16]
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	08da      	lsrs	r2, r3, #3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3208      	adds	r2, #8
 8001d38:	6939      	ldr	r1, [r7, #16]
 8001d3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	2203      	movs	r2, #3
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	4013      	ands	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 0203 	and.w	r2, r3, #3
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 80ac 	beq.w	8001ed8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d80:	4b5e      	ldr	r3, [pc, #376]	; (8001efc <HAL_GPIO_Init+0x2f0>)
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	4a5d      	ldr	r2, [pc, #372]	; (8001efc <HAL_GPIO_Init+0x2f0>)
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	6193      	str	r3, [r2, #24]
 8001d8c:	4b5b      	ldr	r3, [pc, #364]	; (8001efc <HAL_GPIO_Init+0x2f0>)
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d98:	4a59      	ldr	r2, [pc, #356]	; (8001f00 <HAL_GPIO_Init+0x2f4>)
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	089b      	lsrs	r3, r3, #2
 8001d9e:	3302      	adds	r3, #2
 8001da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f003 0303 	and.w	r3, r3, #3
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	220f      	movs	r2, #15
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4013      	ands	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001dc2:	d025      	beq.n	8001e10 <HAL_GPIO_Init+0x204>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a4f      	ldr	r2, [pc, #316]	; (8001f04 <HAL_GPIO_Init+0x2f8>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d01f      	beq.n	8001e0c <HAL_GPIO_Init+0x200>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a4e      	ldr	r2, [pc, #312]	; (8001f08 <HAL_GPIO_Init+0x2fc>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d019      	beq.n	8001e08 <HAL_GPIO_Init+0x1fc>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a4d      	ldr	r2, [pc, #308]	; (8001f0c <HAL_GPIO_Init+0x300>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d013      	beq.n	8001e04 <HAL_GPIO_Init+0x1f8>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a4c      	ldr	r2, [pc, #304]	; (8001f10 <HAL_GPIO_Init+0x304>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d00d      	beq.n	8001e00 <HAL_GPIO_Init+0x1f4>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a4b      	ldr	r2, [pc, #300]	; (8001f14 <HAL_GPIO_Init+0x308>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d007      	beq.n	8001dfc <HAL_GPIO_Init+0x1f0>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a4a      	ldr	r2, [pc, #296]	; (8001f18 <HAL_GPIO_Init+0x30c>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d101      	bne.n	8001df8 <HAL_GPIO_Init+0x1ec>
 8001df4:	2306      	movs	r3, #6
 8001df6:	e00c      	b.n	8001e12 <HAL_GPIO_Init+0x206>
 8001df8:	2307      	movs	r3, #7
 8001dfa:	e00a      	b.n	8001e12 <HAL_GPIO_Init+0x206>
 8001dfc:	2305      	movs	r3, #5
 8001dfe:	e008      	b.n	8001e12 <HAL_GPIO_Init+0x206>
 8001e00:	2304      	movs	r3, #4
 8001e02:	e006      	b.n	8001e12 <HAL_GPIO_Init+0x206>
 8001e04:	2303      	movs	r3, #3
 8001e06:	e004      	b.n	8001e12 <HAL_GPIO_Init+0x206>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e002      	b.n	8001e12 <HAL_GPIO_Init+0x206>
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e000      	b.n	8001e12 <HAL_GPIO_Init+0x206>
 8001e10:	2300      	movs	r3, #0
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	f002 0203 	and.w	r2, r2, #3
 8001e18:	0092      	lsls	r2, r2, #2
 8001e1a:	4093      	lsls	r3, r2
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e22:	4937      	ldr	r1, [pc, #220]	; (8001f00 <HAL_GPIO_Init+0x2f4>)
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	089b      	lsrs	r3, r3, #2
 8001e28:	3302      	adds	r3, #2
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e30:	4b3a      	ldr	r3, [pc, #232]	; (8001f1c <HAL_GPIO_Init+0x310>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e54:	4a31      	ldr	r2, [pc, #196]	; (8001f1c <HAL_GPIO_Init+0x310>)
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e5a:	4b30      	ldr	r3, [pc, #192]	; (8001f1c <HAL_GPIO_Init+0x310>)
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	43db      	mvns	r3, r3
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	4013      	ands	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e7e:	4a27      	ldr	r2, [pc, #156]	; (8001f1c <HAL_GPIO_Init+0x310>)
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e84:	4b25      	ldr	r3, [pc, #148]	; (8001f1c <HAL_GPIO_Init+0x310>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4013      	ands	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ea8:	4a1c      	ldr	r2, [pc, #112]	; (8001f1c <HAL_GPIO_Init+0x310>)
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eae:	4b1b      	ldr	r3, [pc, #108]	; (8001f1c <HAL_GPIO_Init+0x310>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ed2:	4a12      	ldr	r2, [pc, #72]	; (8001f1c <HAL_GPIO_Init+0x310>)
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	3301      	adds	r3, #1
 8001edc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f47f ae97 	bne.w	8001c1c <HAL_GPIO_Init+0x10>
  }
}
 8001eee:	bf00      	nop
 8001ef0:	bf00      	nop
 8001ef2:	371c      	adds	r7, #28
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	40021000 	.word	0x40021000
 8001f00:	40010000 	.word	0x40010000
 8001f04:	48000400 	.word	0x48000400
 8001f08:	48000800 	.word	0x48000800
 8001f0c:	48000c00 	.word	0x48000c00
 8001f10:	48001000 	.word	0x48001000
 8001f14:	48001400 	.word	0x48001400
 8001f18:	48001800 	.word	0x48001800
 8001f1c:	40010400 	.word	0x40010400

08001f20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	691a      	ldr	r2, [r3, #16]
 8001f30:	887b      	ldrh	r3, [r7, #2]
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d002      	beq.n	8001f3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	73fb      	strb	r3, [r7, #15]
 8001f3c:	e001      	b.n	8001f42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f5c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f60:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f66:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d102      	bne.n	8001f76 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	f001 b83a 	b.w	8002fea <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f7a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 816f 	beq.w	800226a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f8c:	4bb5      	ldr	r3, [pc, #724]	; (8002264 <HAL_RCC_OscConfig+0x314>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 030c 	and.w	r3, r3, #12
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d00c      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f98:	4bb2      	ldr	r3, [pc, #712]	; (8002264 <HAL_RCC_OscConfig+0x314>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 030c 	and.w	r3, r3, #12
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d15c      	bne.n	800205e <HAL_RCC_OscConfig+0x10e>
 8001fa4:	4baf      	ldr	r3, [pc, #700]	; (8002264 <HAL_RCC_OscConfig+0x314>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fb0:	d155      	bne.n	800205e <HAL_RCC_OscConfig+0x10e>
 8001fb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fb6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001fbe:	fa93 f3a3 	rbit	r3, r3
 8001fc2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fc6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fca:	fab3 f383 	clz	r3, r3
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	095b      	lsrs	r3, r3, #5
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d102      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x94>
 8001fde:	4ba1      	ldr	r3, [pc, #644]	; (8002264 <HAL_RCC_OscConfig+0x314>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	e015      	b.n	8002010 <HAL_RCC_OscConfig+0xc0>
 8001fe4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fe8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fec:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001ff0:	fa93 f3a3 	rbit	r3, r3
 8001ff4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001ff8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ffc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002000:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002004:	fa93 f3a3 	rbit	r3, r3
 8002008:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800200c:	4b95      	ldr	r3, [pc, #596]	; (8002264 <HAL_RCC_OscConfig+0x314>)
 800200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002010:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002014:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002018:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800201c:	fa92 f2a2 	rbit	r2, r2
 8002020:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002024:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002028:	fab2 f282 	clz	r2, r2
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	f042 0220 	orr.w	r2, r2, #32
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	f002 021f 	and.w	r2, r2, #31
 8002038:	2101      	movs	r1, #1
 800203a:	fa01 f202 	lsl.w	r2, r1, r2
 800203e:	4013      	ands	r3, r2
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 8111 	beq.w	8002268 <HAL_RCC_OscConfig+0x318>
 8002046:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800204a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	f040 8108 	bne.w	8002268 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	f000 bfc6 	b.w	8002fea <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800205e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002062:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800206e:	d106      	bne.n	800207e <HAL_RCC_OscConfig+0x12e>
 8002070:	4b7c      	ldr	r3, [pc, #496]	; (8002264 <HAL_RCC_OscConfig+0x314>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a7b      	ldr	r2, [pc, #492]	; (8002264 <HAL_RCC_OscConfig+0x314>)
 8002076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800207a:	6013      	str	r3, [r2, #0]
 800207c:	e036      	b.n	80020ec <HAL_RCC_OscConfig+0x19c>
 800207e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002082:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10c      	bne.n	80020a8 <HAL_RCC_OscConfig+0x158>
 800208e:	4b75      	ldr	r3, [pc, #468]	; (8002264 <HAL_RCC_OscConfig+0x314>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a74      	ldr	r2, [pc, #464]	; (8002264 <HAL_RCC_OscConfig+0x314>)
 8002094:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	4b72      	ldr	r3, [pc, #456]	; (8002264 <HAL_RCC_OscConfig+0x314>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a71      	ldr	r2, [pc, #452]	; (8002264 <HAL_RCC_OscConfig+0x314>)
 80020a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	e021      	b.n	80020ec <HAL_RCC_OscConfig+0x19c>
 80020a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020b8:	d10c      	bne.n	80020d4 <HAL_RCC_OscConfig+0x184>
 80020ba:	4b6a      	ldr	r3, [pc, #424]	; (8002264 <HAL_RCC_OscConfig+0x314>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a69      	ldr	r2, [pc, #420]	; (8002264 <HAL_RCC_OscConfig+0x314>)
 80020c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	4b67      	ldr	r3, [pc, #412]	; (8002264 <HAL_RCC_OscConfig+0x314>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a66      	ldr	r2, [pc, #408]	; (8002264 <HAL_RCC_OscConfig+0x314>)
 80020cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	e00b      	b.n	80020ec <HAL_RCC_OscConfig+0x19c>
 80020d4:	4b63      	ldr	r3, [pc, #396]	; (8002264 <HAL_RCC_OscConfig+0x314>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a62      	ldr	r2, [pc, #392]	; (8002264 <HAL_RCC_OscConfig+0x314>)
 80020da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020de:	6013      	str	r3, [r2, #0]
 80020e0:	4b60      	ldr	r3, [pc, #384]	; (8002264 <HAL_RCC_OscConfig+0x314>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a5f      	ldr	r2, [pc, #380]	; (8002264 <HAL_RCC_OscConfig+0x314>)
 80020e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ea:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d059      	beq.n	80021b0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fc:	f7fe fb5a 	bl	80007b4 <HAL_GetTick>
 8002100:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002104:	e00a      	b.n	800211c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002106:	f7fe fb55 	bl	80007b4 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b64      	cmp	r3, #100	; 0x64
 8002114:	d902      	bls.n	800211c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	f000 bf67 	b.w	8002fea <HAL_RCC_OscConfig+0x109a>
 800211c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002120:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002124:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002128:	fa93 f3a3 	rbit	r3, r3
 800212c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002130:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002134:	fab3 f383 	clz	r3, r3
 8002138:	b2db      	uxtb	r3, r3
 800213a:	095b      	lsrs	r3, r3, #5
 800213c:	b2db      	uxtb	r3, r3
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b01      	cmp	r3, #1
 8002146:	d102      	bne.n	800214e <HAL_RCC_OscConfig+0x1fe>
 8002148:	4b46      	ldr	r3, [pc, #280]	; (8002264 <HAL_RCC_OscConfig+0x314>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	e015      	b.n	800217a <HAL_RCC_OscConfig+0x22a>
 800214e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002152:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002156:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800215a:	fa93 f3a3 	rbit	r3, r3
 800215e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002162:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002166:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800216a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800216e:	fa93 f3a3 	rbit	r3, r3
 8002172:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002176:	4b3b      	ldr	r3, [pc, #236]	; (8002264 <HAL_RCC_OscConfig+0x314>)
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800217e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002182:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002186:	fa92 f2a2 	rbit	r2, r2
 800218a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800218e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002192:	fab2 f282 	clz	r2, r2
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	f042 0220 	orr.w	r2, r2, #32
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	f002 021f 	and.w	r2, r2, #31
 80021a2:	2101      	movs	r1, #1
 80021a4:	fa01 f202 	lsl.w	r2, r1, r2
 80021a8:	4013      	ands	r3, r2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0ab      	beq.n	8002106 <HAL_RCC_OscConfig+0x1b6>
 80021ae:	e05c      	b.n	800226a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b0:	f7fe fb00 	bl	80007b4 <HAL_GetTick>
 80021b4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b8:	e00a      	b.n	80021d0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021ba:	f7fe fafb 	bl	80007b4 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b64      	cmp	r3, #100	; 0x64
 80021c8:	d902      	bls.n	80021d0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	f000 bf0d 	b.w	8002fea <HAL_RCC_OscConfig+0x109a>
 80021d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021d4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80021dc:	fa93 f3a3 	rbit	r3, r3
 80021e0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80021e4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021e8:	fab3 f383 	clz	r3, r3
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	095b      	lsrs	r3, r3, #5
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d102      	bne.n	8002202 <HAL_RCC_OscConfig+0x2b2>
 80021fc:	4b19      	ldr	r3, [pc, #100]	; (8002264 <HAL_RCC_OscConfig+0x314>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	e015      	b.n	800222e <HAL_RCC_OscConfig+0x2de>
 8002202:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002206:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800220e:	fa93 f3a3 	rbit	r3, r3
 8002212:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002216:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800221a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800221e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002222:	fa93 f3a3 	rbit	r3, r3
 8002226:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800222a:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <HAL_RCC_OscConfig+0x314>)
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002232:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002236:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800223a:	fa92 f2a2 	rbit	r2, r2
 800223e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002242:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002246:	fab2 f282 	clz	r2, r2
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	f042 0220 	orr.w	r2, r2, #32
 8002250:	b2d2      	uxtb	r2, r2
 8002252:	f002 021f 	and.w	r2, r2, #31
 8002256:	2101      	movs	r1, #1
 8002258:	fa01 f202 	lsl.w	r2, r1, r2
 800225c:	4013      	ands	r3, r2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1ab      	bne.n	80021ba <HAL_RCC_OscConfig+0x26a>
 8002262:	e002      	b.n	800226a <HAL_RCC_OscConfig+0x31a>
 8002264:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800226a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800226e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 817f 	beq.w	800257e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002280:	4ba7      	ldr	r3, [pc, #668]	; (8002520 <HAL_RCC_OscConfig+0x5d0>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 030c 	and.w	r3, r3, #12
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00c      	beq.n	80022a6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800228c:	4ba4      	ldr	r3, [pc, #656]	; (8002520 <HAL_RCC_OscConfig+0x5d0>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 030c 	and.w	r3, r3, #12
 8002294:	2b08      	cmp	r3, #8
 8002296:	d173      	bne.n	8002380 <HAL_RCC_OscConfig+0x430>
 8002298:	4ba1      	ldr	r3, [pc, #644]	; (8002520 <HAL_RCC_OscConfig+0x5d0>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80022a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022a4:	d16c      	bne.n	8002380 <HAL_RCC_OscConfig+0x430>
 80022a6:	2302      	movs	r3, #2
 80022a8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ac:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80022b0:	fa93 f3a3 	rbit	r3, r3
 80022b4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80022b8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022bc:	fab3 f383 	clz	r3, r3
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	095b      	lsrs	r3, r3, #5
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	f043 0301 	orr.w	r3, r3, #1
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d102      	bne.n	80022d6 <HAL_RCC_OscConfig+0x386>
 80022d0:	4b93      	ldr	r3, [pc, #588]	; (8002520 <HAL_RCC_OscConfig+0x5d0>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	e013      	b.n	80022fe <HAL_RCC_OscConfig+0x3ae>
 80022d6:	2302      	movs	r3, #2
 80022d8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022dc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80022e0:	fa93 f3a3 	rbit	r3, r3
 80022e4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80022e8:	2302      	movs	r3, #2
 80022ea:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80022ee:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80022f2:	fa93 f3a3 	rbit	r3, r3
 80022f6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80022fa:	4b89      	ldr	r3, [pc, #548]	; (8002520 <HAL_RCC_OscConfig+0x5d0>)
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	2202      	movs	r2, #2
 8002300:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002304:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002308:	fa92 f2a2 	rbit	r2, r2
 800230c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002310:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002314:	fab2 f282 	clz	r2, r2
 8002318:	b2d2      	uxtb	r2, r2
 800231a:	f042 0220 	orr.w	r2, r2, #32
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	f002 021f 	and.w	r2, r2, #31
 8002324:	2101      	movs	r1, #1
 8002326:	fa01 f202 	lsl.w	r2, r1, r2
 800232a:	4013      	ands	r3, r2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00a      	beq.n	8002346 <HAL_RCC_OscConfig+0x3f6>
 8002330:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002334:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d002      	beq.n	8002346 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	f000 be52 	b.w	8002fea <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002346:	4b76      	ldr	r3, [pc, #472]	; (8002520 <HAL_RCC_OscConfig+0x5d0>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800234e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002352:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	21f8      	movs	r1, #248	; 0xf8
 800235c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002360:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002364:	fa91 f1a1 	rbit	r1, r1
 8002368:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800236c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002370:	fab1 f181 	clz	r1, r1
 8002374:	b2c9      	uxtb	r1, r1
 8002376:	408b      	lsls	r3, r1
 8002378:	4969      	ldr	r1, [pc, #420]	; (8002520 <HAL_RCC_OscConfig+0x5d0>)
 800237a:	4313      	orrs	r3, r2
 800237c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800237e:	e0fe      	b.n	800257e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002380:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002384:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 8088 	beq.w	80024a2 <HAL_RCC_OscConfig+0x552>
 8002392:	2301      	movs	r3, #1
 8002394:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002398:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800239c:	fa93 f3a3 	rbit	r3, r3
 80023a0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80023a4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a8:	fab3 f383 	clz	r3, r3
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023b2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	461a      	mov	r2, r3
 80023ba:	2301      	movs	r3, #1
 80023bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023be:	f7fe f9f9 	bl	80007b4 <HAL_GetTick>
 80023c2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c6:	e00a      	b.n	80023de <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023c8:	f7fe f9f4 	bl	80007b4 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d902      	bls.n	80023de <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	f000 be06 	b.w	8002fea <HAL_RCC_OscConfig+0x109a>
 80023de:	2302      	movs	r3, #2
 80023e0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80023e8:	fa93 f3a3 	rbit	r3, r3
 80023ec:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80023f0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f4:	fab3 f383 	clz	r3, r3
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	095b      	lsrs	r3, r3, #5
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b01      	cmp	r3, #1
 8002406:	d102      	bne.n	800240e <HAL_RCC_OscConfig+0x4be>
 8002408:	4b45      	ldr	r3, [pc, #276]	; (8002520 <HAL_RCC_OscConfig+0x5d0>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	e013      	b.n	8002436 <HAL_RCC_OscConfig+0x4e6>
 800240e:	2302      	movs	r3, #2
 8002410:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002414:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002418:	fa93 f3a3 	rbit	r3, r3
 800241c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002420:	2302      	movs	r3, #2
 8002422:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002426:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800242a:	fa93 f3a3 	rbit	r3, r3
 800242e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002432:	4b3b      	ldr	r3, [pc, #236]	; (8002520 <HAL_RCC_OscConfig+0x5d0>)
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002436:	2202      	movs	r2, #2
 8002438:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800243c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002440:	fa92 f2a2 	rbit	r2, r2
 8002444:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002448:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800244c:	fab2 f282 	clz	r2, r2
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	f042 0220 	orr.w	r2, r2, #32
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	f002 021f 	and.w	r2, r2, #31
 800245c:	2101      	movs	r1, #1
 800245e:	fa01 f202 	lsl.w	r2, r1, r2
 8002462:	4013      	ands	r3, r2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0af      	beq.n	80023c8 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002468:	4b2d      	ldr	r3, [pc, #180]	; (8002520 <HAL_RCC_OscConfig+0x5d0>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002470:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002474:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	21f8      	movs	r1, #248	; 0xf8
 800247e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002482:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002486:	fa91 f1a1 	rbit	r1, r1
 800248a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800248e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002492:	fab1 f181 	clz	r1, r1
 8002496:	b2c9      	uxtb	r1, r1
 8002498:	408b      	lsls	r3, r1
 800249a:	4921      	ldr	r1, [pc, #132]	; (8002520 <HAL_RCC_OscConfig+0x5d0>)
 800249c:	4313      	orrs	r3, r2
 800249e:	600b      	str	r3, [r1, #0]
 80024a0:	e06d      	b.n	800257e <HAL_RCC_OscConfig+0x62e>
 80024a2:	2301      	movs	r3, #1
 80024a4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80024ac:	fa93 f3a3 	rbit	r3, r3
 80024b0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80024b4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024b8:	fab3 f383 	clz	r3, r3
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024c2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	461a      	mov	r2, r3
 80024ca:	2300      	movs	r3, #0
 80024cc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ce:	f7fe f971 	bl	80007b4 <HAL_GetTick>
 80024d2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024d6:	e00a      	b.n	80024ee <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024d8:	f7fe f96c 	bl	80007b4 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d902      	bls.n	80024ee <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	f000 bd7e 	b.w	8002fea <HAL_RCC_OscConfig+0x109a>
 80024ee:	2302      	movs	r3, #2
 80024f0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80024f8:	fa93 f3a3 	rbit	r3, r3
 80024fc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002500:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002504:	fab3 f383 	clz	r3, r3
 8002508:	b2db      	uxtb	r3, r3
 800250a:	095b      	lsrs	r3, r3, #5
 800250c:	b2db      	uxtb	r3, r3
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b01      	cmp	r3, #1
 8002516:	d105      	bne.n	8002524 <HAL_RCC_OscConfig+0x5d4>
 8002518:	4b01      	ldr	r3, [pc, #4]	; (8002520 <HAL_RCC_OscConfig+0x5d0>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	e016      	b.n	800254c <HAL_RCC_OscConfig+0x5fc>
 800251e:	bf00      	nop
 8002520:	40021000 	.word	0x40021000
 8002524:	2302      	movs	r3, #2
 8002526:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800252e:	fa93 f3a3 	rbit	r3, r3
 8002532:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002536:	2302      	movs	r3, #2
 8002538:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800253c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002540:	fa93 f3a3 	rbit	r3, r3
 8002544:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002548:	4bbf      	ldr	r3, [pc, #764]	; (8002848 <HAL_RCC_OscConfig+0x8f8>)
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	2202      	movs	r2, #2
 800254e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002552:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002556:	fa92 f2a2 	rbit	r2, r2
 800255a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800255e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002562:	fab2 f282 	clz	r2, r2
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	f042 0220 	orr.w	r2, r2, #32
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	f002 021f 	and.w	r2, r2, #31
 8002572:	2101      	movs	r1, #1
 8002574:	fa01 f202 	lsl.w	r2, r1, r2
 8002578:	4013      	ands	r3, r2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1ac      	bne.n	80024d8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800257e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002582:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 8113 	beq.w	80027ba <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002594:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002598:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d07c      	beq.n	800269e <HAL_RCC_OscConfig+0x74e>
 80025a4:	2301      	movs	r3, #1
 80025a6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80025ae:	fa93 f3a3 	rbit	r3, r3
 80025b2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80025b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ba:	fab3 f383 	clz	r3, r3
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	461a      	mov	r2, r3
 80025c2:	4ba2      	ldr	r3, [pc, #648]	; (800284c <HAL_RCC_OscConfig+0x8fc>)
 80025c4:	4413      	add	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	461a      	mov	r2, r3
 80025ca:	2301      	movs	r3, #1
 80025cc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ce:	f7fe f8f1 	bl	80007b4 <HAL_GetTick>
 80025d2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d6:	e00a      	b.n	80025ee <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025d8:	f7fe f8ec 	bl	80007b4 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d902      	bls.n	80025ee <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	f000 bcfe 	b.w	8002fea <HAL_RCC_OscConfig+0x109a>
 80025ee:	2302      	movs	r3, #2
 80025f0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025f8:	fa93 f2a3 	rbit	r2, r3
 80025fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002600:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800260a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800260e:	2202      	movs	r2, #2
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002616:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	fa93 f2a3 	rbit	r2, r3
 8002620:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002624:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800262e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002632:	2202      	movs	r2, #2
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800263a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	fa93 f2a3 	rbit	r2, r3
 8002644:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002648:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800264c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800264e:	4b7e      	ldr	r3, [pc, #504]	; (8002848 <HAL_RCC_OscConfig+0x8f8>)
 8002650:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002652:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002656:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800265a:	2102      	movs	r1, #2
 800265c:	6019      	str	r1, [r3, #0]
 800265e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002662:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	fa93 f1a3 	rbit	r1, r3
 800266c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002670:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002674:	6019      	str	r1, [r3, #0]
  return result;
 8002676:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800267a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	fab3 f383 	clz	r3, r3
 8002684:	b2db      	uxtb	r3, r3
 8002686:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800268a:	b2db      	uxtb	r3, r3
 800268c:	f003 031f 	and.w	r3, r3, #31
 8002690:	2101      	movs	r1, #1
 8002692:	fa01 f303 	lsl.w	r3, r1, r3
 8002696:	4013      	ands	r3, r2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d09d      	beq.n	80025d8 <HAL_RCC_OscConfig+0x688>
 800269c:	e08d      	b.n	80027ba <HAL_RCC_OscConfig+0x86a>
 800269e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026a2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80026a6:	2201      	movs	r2, #1
 80026a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026ae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	fa93 f2a3 	rbit	r2, r3
 80026b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026bc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80026c0:	601a      	str	r2, [r3, #0]
  return result;
 80026c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026c6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80026ca:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026cc:	fab3 f383 	clz	r3, r3
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	461a      	mov	r2, r3
 80026d4:	4b5d      	ldr	r3, [pc, #372]	; (800284c <HAL_RCC_OscConfig+0x8fc>)
 80026d6:	4413      	add	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	461a      	mov	r2, r3
 80026dc:	2300      	movs	r3, #0
 80026de:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e0:	f7fe f868 	bl	80007b4 <HAL_GetTick>
 80026e4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e8:	e00a      	b.n	8002700 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ea:	f7fe f863 	bl	80007b4 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d902      	bls.n	8002700 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	f000 bc75 	b.w	8002fea <HAL_RCC_OscConfig+0x109a>
 8002700:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002704:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002708:	2202      	movs	r2, #2
 800270a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002710:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	fa93 f2a3 	rbit	r2, r3
 800271a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800271e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002728:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800272c:	2202      	movs	r2, #2
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002734:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	fa93 f2a3 	rbit	r2, r3
 800273e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002742:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800274c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002750:	2202      	movs	r2, #2
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002758:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	fa93 f2a3 	rbit	r2, r3
 8002762:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002766:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800276a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800276c:	4b36      	ldr	r3, [pc, #216]	; (8002848 <HAL_RCC_OscConfig+0x8f8>)
 800276e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002770:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002774:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002778:	2102      	movs	r1, #2
 800277a:	6019      	str	r1, [r3, #0]
 800277c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002780:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	fa93 f1a3 	rbit	r1, r3
 800278a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800278e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002792:	6019      	str	r1, [r3, #0]
  return result;
 8002794:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002798:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	fab3 f383 	clz	r3, r3
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	f003 031f 	and.w	r3, r3, #31
 80027ae:	2101      	movs	r1, #1
 80027b0:	fa01 f303 	lsl.w	r3, r1, r3
 80027b4:	4013      	ands	r3, r2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d197      	bne.n	80026ea <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f000 81a5 	beq.w	8002b1a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027d0:	2300      	movs	r3, #0
 80027d2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027d6:	4b1c      	ldr	r3, [pc, #112]	; (8002848 <HAL_RCC_OscConfig+0x8f8>)
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d116      	bne.n	8002810 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027e2:	4b19      	ldr	r3, [pc, #100]	; (8002848 <HAL_RCC_OscConfig+0x8f8>)
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	4a18      	ldr	r2, [pc, #96]	; (8002848 <HAL_RCC_OscConfig+0x8f8>)
 80027e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ec:	61d3      	str	r3, [r2, #28]
 80027ee:	4b16      	ldr	r3, [pc, #88]	; (8002848 <HAL_RCC_OscConfig+0x8f8>)
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80027f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002804:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002808:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800280a:	2301      	movs	r3, #1
 800280c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002810:	4b0f      	ldr	r3, [pc, #60]	; (8002850 <HAL_RCC_OscConfig+0x900>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002818:	2b00      	cmp	r3, #0
 800281a:	d121      	bne.n	8002860 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800281c:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <HAL_RCC_OscConfig+0x900>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a0b      	ldr	r2, [pc, #44]	; (8002850 <HAL_RCC_OscConfig+0x900>)
 8002822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002826:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002828:	f7fd ffc4 	bl	80007b4 <HAL_GetTick>
 800282c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002830:	e010      	b.n	8002854 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002832:	f7fd ffbf 	bl	80007b4 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b64      	cmp	r3, #100	; 0x64
 8002840:	d908      	bls.n	8002854 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e3d1      	b.n	8002fea <HAL_RCC_OscConfig+0x109a>
 8002846:	bf00      	nop
 8002848:	40021000 	.word	0x40021000
 800284c:	10908120 	.word	0x10908120
 8002850:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002854:	4b8d      	ldr	r3, [pc, #564]	; (8002a8c <HAL_RCC_OscConfig+0xb3c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0e8      	beq.n	8002832 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002860:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002864:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d106      	bne.n	800287e <HAL_RCC_OscConfig+0x92e>
 8002870:	4b87      	ldr	r3, [pc, #540]	; (8002a90 <HAL_RCC_OscConfig+0xb40>)
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	4a86      	ldr	r2, [pc, #536]	; (8002a90 <HAL_RCC_OscConfig+0xb40>)
 8002876:	f043 0301 	orr.w	r3, r3, #1
 800287a:	6213      	str	r3, [r2, #32]
 800287c:	e035      	b.n	80028ea <HAL_RCC_OscConfig+0x99a>
 800287e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002882:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10c      	bne.n	80028a8 <HAL_RCC_OscConfig+0x958>
 800288e:	4b80      	ldr	r3, [pc, #512]	; (8002a90 <HAL_RCC_OscConfig+0xb40>)
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	4a7f      	ldr	r2, [pc, #508]	; (8002a90 <HAL_RCC_OscConfig+0xb40>)
 8002894:	f023 0301 	bic.w	r3, r3, #1
 8002898:	6213      	str	r3, [r2, #32]
 800289a:	4b7d      	ldr	r3, [pc, #500]	; (8002a90 <HAL_RCC_OscConfig+0xb40>)
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	4a7c      	ldr	r2, [pc, #496]	; (8002a90 <HAL_RCC_OscConfig+0xb40>)
 80028a0:	f023 0304 	bic.w	r3, r3, #4
 80028a4:	6213      	str	r3, [r2, #32]
 80028a6:	e020      	b.n	80028ea <HAL_RCC_OscConfig+0x99a>
 80028a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2b05      	cmp	r3, #5
 80028b6:	d10c      	bne.n	80028d2 <HAL_RCC_OscConfig+0x982>
 80028b8:	4b75      	ldr	r3, [pc, #468]	; (8002a90 <HAL_RCC_OscConfig+0xb40>)
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	4a74      	ldr	r2, [pc, #464]	; (8002a90 <HAL_RCC_OscConfig+0xb40>)
 80028be:	f043 0304 	orr.w	r3, r3, #4
 80028c2:	6213      	str	r3, [r2, #32]
 80028c4:	4b72      	ldr	r3, [pc, #456]	; (8002a90 <HAL_RCC_OscConfig+0xb40>)
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	4a71      	ldr	r2, [pc, #452]	; (8002a90 <HAL_RCC_OscConfig+0xb40>)
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	6213      	str	r3, [r2, #32]
 80028d0:	e00b      	b.n	80028ea <HAL_RCC_OscConfig+0x99a>
 80028d2:	4b6f      	ldr	r3, [pc, #444]	; (8002a90 <HAL_RCC_OscConfig+0xb40>)
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	4a6e      	ldr	r2, [pc, #440]	; (8002a90 <HAL_RCC_OscConfig+0xb40>)
 80028d8:	f023 0301 	bic.w	r3, r3, #1
 80028dc:	6213      	str	r3, [r2, #32]
 80028de:	4b6c      	ldr	r3, [pc, #432]	; (8002a90 <HAL_RCC_OscConfig+0xb40>)
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	4a6b      	ldr	r2, [pc, #428]	; (8002a90 <HAL_RCC_OscConfig+0xb40>)
 80028e4:	f023 0304 	bic.w	r3, r3, #4
 80028e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 8081 	beq.w	80029fe <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fc:	f7fd ff5a 	bl	80007b4 <HAL_GetTick>
 8002900:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002904:	e00b      	b.n	800291e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002906:	f7fd ff55 	bl	80007b4 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	f241 3288 	movw	r2, #5000	; 0x1388
 8002916:	4293      	cmp	r3, r2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e365      	b.n	8002fea <HAL_RCC_OscConfig+0x109a>
 800291e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002922:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002926:	2202      	movs	r2, #2
 8002928:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800292e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	fa93 f2a3 	rbit	r2, r3
 8002938:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800293c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002946:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800294a:	2202      	movs	r2, #2
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002952:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	fa93 f2a3 	rbit	r2, r3
 800295c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002960:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002964:	601a      	str	r2, [r3, #0]
  return result;
 8002966:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800296a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800296e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002970:	fab3 f383 	clz	r3, r3
 8002974:	b2db      	uxtb	r3, r3
 8002976:	095b      	lsrs	r3, r3, #5
 8002978:	b2db      	uxtb	r3, r3
 800297a:	f043 0302 	orr.w	r3, r3, #2
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d102      	bne.n	800298a <HAL_RCC_OscConfig+0xa3a>
 8002984:	4b42      	ldr	r3, [pc, #264]	; (8002a90 <HAL_RCC_OscConfig+0xb40>)
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	e013      	b.n	80029b2 <HAL_RCC_OscConfig+0xa62>
 800298a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800298e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002992:	2202      	movs	r2, #2
 8002994:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002996:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800299a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	fa93 f2a3 	rbit	r2, r3
 80029a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029a8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	4b38      	ldr	r3, [pc, #224]	; (8002a90 <HAL_RCC_OscConfig+0xb40>)
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80029b6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80029ba:	2102      	movs	r1, #2
 80029bc:	6011      	str	r1, [r2, #0]
 80029be:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80029c2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80029c6:	6812      	ldr	r2, [r2, #0]
 80029c8:	fa92 f1a2 	rbit	r1, r2
 80029cc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80029d0:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80029d4:	6011      	str	r1, [r2, #0]
  return result;
 80029d6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80029da:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80029de:	6812      	ldr	r2, [r2, #0]
 80029e0:	fab2 f282 	clz	r2, r2
 80029e4:	b2d2      	uxtb	r2, r2
 80029e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	f002 021f 	and.w	r2, r2, #31
 80029f0:	2101      	movs	r1, #1
 80029f2:	fa01 f202 	lsl.w	r2, r1, r2
 80029f6:	4013      	ands	r3, r2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d084      	beq.n	8002906 <HAL_RCC_OscConfig+0x9b6>
 80029fc:	e083      	b.n	8002b06 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029fe:	f7fd fed9 	bl	80007b4 <HAL_GetTick>
 8002a02:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a06:	e00b      	b.n	8002a20 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a08:	f7fd fed4 	bl	80007b4 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e2e4      	b.n	8002fea <HAL_RCC_OscConfig+0x109a>
 8002a20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a24:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002a28:	2202      	movs	r2, #2
 8002a2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a30:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	fa93 f2a3 	rbit	r2, r3
 8002a3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a3e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a48:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a54:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	fa93 f2a3 	rbit	r2, r3
 8002a5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a62:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002a66:	601a      	str	r2, [r3, #0]
  return result;
 8002a68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a6c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002a70:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a72:	fab3 f383 	clz	r3, r3
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	095b      	lsrs	r3, r3, #5
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	f043 0302 	orr.w	r3, r3, #2
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d106      	bne.n	8002a94 <HAL_RCC_OscConfig+0xb44>
 8002a86:	4b02      	ldr	r3, [pc, #8]	; (8002a90 <HAL_RCC_OscConfig+0xb40>)
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	e017      	b.n	8002abc <HAL_RCC_OscConfig+0xb6c>
 8002a8c:	40007000 	.word	0x40007000
 8002a90:	40021000 	.word	0x40021000
 8002a94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a98:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aa4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	fa93 f2a3 	rbit	r2, r3
 8002aae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ab2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	4bb3      	ldr	r3, [pc, #716]	; (8002d88 <HAL_RCC_OscConfig+0xe38>)
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ac0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002ac4:	2102      	movs	r1, #2
 8002ac6:	6011      	str	r1, [r2, #0]
 8002ac8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002acc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002ad0:	6812      	ldr	r2, [r2, #0]
 8002ad2:	fa92 f1a2 	rbit	r1, r2
 8002ad6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ada:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002ade:	6011      	str	r1, [r2, #0]
  return result;
 8002ae0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ae4:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002ae8:	6812      	ldr	r2, [r2, #0]
 8002aea:	fab2 f282 	clz	r2, r2
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	f002 021f 	and.w	r2, r2, #31
 8002afa:	2101      	movs	r1, #1
 8002afc:	fa01 f202 	lsl.w	r2, r1, r2
 8002b00:	4013      	ands	r3, r2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d180      	bne.n	8002a08 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b06:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d105      	bne.n	8002b1a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b0e:	4b9e      	ldr	r3, [pc, #632]	; (8002d88 <HAL_RCC_OscConfig+0xe38>)
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	4a9d      	ldr	r2, [pc, #628]	; (8002d88 <HAL_RCC_OscConfig+0xe38>)
 8002b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b18:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b1e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 825e 	beq.w	8002fe8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b2c:	4b96      	ldr	r3, [pc, #600]	; (8002d88 <HAL_RCC_OscConfig+0xe38>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 030c 	and.w	r3, r3, #12
 8002b34:	2b08      	cmp	r3, #8
 8002b36:	f000 821f 	beq.w	8002f78 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b3e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	f040 8170 	bne.w	8002e2c <HAL_RCC_OscConfig+0xedc>
 8002b4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b50:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002b54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b5e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	fa93 f2a3 	rbit	r2, r3
 8002b68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b6c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002b70:	601a      	str	r2, [r3, #0]
  return result;
 8002b72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b76:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002b7a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b7c:	fab3 f383 	clz	r3, r3
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b86:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	2300      	movs	r3, #0
 8002b90:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b92:	f7fd fe0f 	bl	80007b4 <HAL_GetTick>
 8002b96:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b9a:	e009      	b.n	8002bb0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b9c:	f7fd fe0a 	bl	80007b4 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e21c      	b.n	8002fea <HAL_RCC_OscConfig+0x109a>
 8002bb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bb4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002bb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bc2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	fa93 f2a3 	rbit	r2, r3
 8002bcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bd0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002bd4:	601a      	str	r2, [r3, #0]
  return result;
 8002bd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bda:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002bde:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002be0:	fab3 f383 	clz	r3, r3
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	095b      	lsrs	r3, r3, #5
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	f043 0301 	orr.w	r3, r3, #1
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d102      	bne.n	8002bfa <HAL_RCC_OscConfig+0xcaa>
 8002bf4:	4b64      	ldr	r3, [pc, #400]	; (8002d88 <HAL_RCC_OscConfig+0xe38>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	e027      	b.n	8002c4a <HAL_RCC_OscConfig+0xcfa>
 8002bfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bfe:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002c02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c0c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	fa93 f2a3 	rbit	r2, r3
 8002c16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c1a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c24:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002c28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c32:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	fa93 f2a3 	rbit	r2, r3
 8002c3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c40:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	4b50      	ldr	r3, [pc, #320]	; (8002d88 <HAL_RCC_OscConfig+0xe38>)
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c4e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002c52:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c56:	6011      	str	r1, [r2, #0]
 8002c58:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c5c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002c60:	6812      	ldr	r2, [r2, #0]
 8002c62:	fa92 f1a2 	rbit	r1, r2
 8002c66:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c6a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002c6e:	6011      	str	r1, [r2, #0]
  return result;
 8002c70:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c74:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002c78:	6812      	ldr	r2, [r2, #0]
 8002c7a:	fab2 f282 	clz	r2, r2
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	f042 0220 	orr.w	r2, r2, #32
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	f002 021f 	and.w	r2, r2, #31
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c90:	4013      	ands	r3, r2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d182      	bne.n	8002b9c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c96:	4b3c      	ldr	r3, [pc, #240]	; (8002d88 <HAL_RCC_OscConfig+0xe38>)
 8002c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9a:	f023 020f 	bic.w	r2, r3, #15
 8002c9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ca2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	4937      	ldr	r1, [pc, #220]	; (8002d88 <HAL_RCC_OscConfig+0xe38>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002cb0:	4b35      	ldr	r3, [pc, #212]	; (8002d88 <HAL_RCC_OscConfig+0xe38>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002cb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cbc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6a19      	ldr	r1, [r3, #32]
 8002cc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cc8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	430b      	orrs	r3, r1
 8002cd2:	492d      	ldr	r1, [pc, #180]	; (8002d88 <HAL_RCC_OscConfig+0xe38>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	604b      	str	r3, [r1, #4]
 8002cd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cdc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002ce0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ce4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cea:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	fa93 f2a3 	rbit	r2, r3
 8002cf4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cf8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002cfc:	601a      	str	r2, [r3, #0]
  return result;
 8002cfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d02:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002d06:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d08:	fab3 f383 	clz	r3, r3
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d12:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	461a      	mov	r2, r3
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1e:	f7fd fd49 	bl	80007b4 <HAL_GetTick>
 8002d22:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d26:	e009      	b.n	8002d3c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d28:	f7fd fd44 	bl	80007b4 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e156      	b.n	8002fea <HAL_RCC_OscConfig+0x109a>
 8002d3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d40:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002d44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d4e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	fa93 f2a3 	rbit	r2, r3
 8002d58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d5c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002d60:	601a      	str	r2, [r3, #0]
  return result;
 8002d62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d66:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002d6a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d6c:	fab3 f383 	clz	r3, r3
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	095b      	lsrs	r3, r3, #5
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d105      	bne.n	8002d8c <HAL_RCC_OscConfig+0xe3c>
 8002d80:	4b01      	ldr	r3, [pc, #4]	; (8002d88 <HAL_RCC_OscConfig+0xe38>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	e02a      	b.n	8002ddc <HAL_RCC_OscConfig+0xe8c>
 8002d86:	bf00      	nop
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d90:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002d94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d9e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	fa93 f2a3 	rbit	r2, r3
 8002da8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dac:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002db6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002dba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dc4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	fa93 f2a3 	rbit	r2, r3
 8002dce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dd2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	4b86      	ldr	r3, [pc, #536]	; (8002ff4 <HAL_RCC_OscConfig+0x10a4>)
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002de0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002de4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002de8:	6011      	str	r1, [r2, #0]
 8002dea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002dee:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002df2:	6812      	ldr	r2, [r2, #0]
 8002df4:	fa92 f1a2 	rbit	r1, r2
 8002df8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002dfc:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002e00:	6011      	str	r1, [r2, #0]
  return result;
 8002e02:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e06:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002e0a:	6812      	ldr	r2, [r2, #0]
 8002e0c:	fab2 f282 	clz	r2, r2
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	f042 0220 	orr.w	r2, r2, #32
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	f002 021f 	and.w	r2, r2, #31
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e22:	4013      	ands	r3, r2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f43f af7f 	beq.w	8002d28 <HAL_RCC_OscConfig+0xdd8>
 8002e2a:	e0dd      	b.n	8002fe8 <HAL_RCC_OscConfig+0x1098>
 8002e2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e30:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002e34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e3e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	fa93 f2a3 	rbit	r2, r3
 8002e48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e4c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002e50:	601a      	str	r2, [r3, #0]
  return result;
 8002e52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e56:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002e5a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e5c:	fab3 f383 	clz	r3, r3
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e66:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	2300      	movs	r3, #0
 8002e70:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e72:	f7fd fc9f 	bl	80007b4 <HAL_GetTick>
 8002e76:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e7a:	e009      	b.n	8002e90 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e7c:	f7fd fc9a 	bl	80007b4 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e0ac      	b.n	8002fea <HAL_RCC_OscConfig+0x109a>
 8002e90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e94:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ea2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	fa93 f2a3 	rbit	r2, r3
 8002eac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eb0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002eb4:	601a      	str	r2, [r3, #0]
  return result;
 8002eb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eba:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002ebe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ec0:	fab3 f383 	clz	r3, r3
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	095b      	lsrs	r3, r3, #5
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d102      	bne.n	8002eda <HAL_RCC_OscConfig+0xf8a>
 8002ed4:	4b47      	ldr	r3, [pc, #284]	; (8002ff4 <HAL_RCC_OscConfig+0x10a4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	e027      	b.n	8002f2a <HAL_RCC_OscConfig+0xfda>
 8002eda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ede:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002ee2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ee6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eec:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	fa93 f2a3 	rbit	r2, r3
 8002ef6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002efa:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f04:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002f08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f12:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	fa93 f2a3 	rbit	r2, r3
 8002f1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f20:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	4b33      	ldr	r3, [pc, #204]	; (8002ff4 <HAL_RCC_OscConfig+0x10a4>)
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f2e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002f32:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f36:	6011      	str	r1, [r2, #0]
 8002f38:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f3c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002f40:	6812      	ldr	r2, [r2, #0]
 8002f42:	fa92 f1a2 	rbit	r1, r2
 8002f46:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f4a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002f4e:	6011      	str	r1, [r2, #0]
  return result;
 8002f50:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f54:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002f58:	6812      	ldr	r2, [r2, #0]
 8002f5a:	fab2 f282 	clz	r2, r2
 8002f5e:	b2d2      	uxtb	r2, r2
 8002f60:	f042 0220 	orr.w	r2, r2, #32
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	f002 021f 	and.w	r2, r2, #31
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f70:	4013      	ands	r3, r2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d182      	bne.n	8002e7c <HAL_RCC_OscConfig+0xf2c>
 8002f76:	e037      	b.n	8002fe8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f7c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e02e      	b.n	8002fea <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f8c:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <HAL_RCC_OscConfig+0x10a4>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002f94:	4b17      	ldr	r3, [pc, #92]	; (8002ff4 <HAL_RCC_OscConfig+0x10a4>)
 8002f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f98:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002f9c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002fa0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002fa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fa8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d117      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002fb4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002fb8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002fbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fc0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d10b      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002fcc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fd0:	f003 020f 	and.w	r2, r3, #15
 8002fd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fd8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d001      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e000      	b.n	8002fea <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40021000 	.word	0x40021000

08002ff8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b09e      	sub	sp, #120	; 0x78
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003002:	2300      	movs	r3, #0
 8003004:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e162      	b.n	80032d6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003010:	4b90      	ldr	r3, [pc, #576]	; (8003254 <HAL_RCC_ClockConfig+0x25c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	429a      	cmp	r2, r3
 800301c:	d910      	bls.n	8003040 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301e:	4b8d      	ldr	r3, [pc, #564]	; (8003254 <HAL_RCC_ClockConfig+0x25c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f023 0207 	bic.w	r2, r3, #7
 8003026:	498b      	ldr	r1, [pc, #556]	; (8003254 <HAL_RCC_ClockConfig+0x25c>)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	4313      	orrs	r3, r2
 800302c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800302e:	4b89      	ldr	r3, [pc, #548]	; (8003254 <HAL_RCC_ClockConfig+0x25c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	429a      	cmp	r2, r3
 800303a:	d001      	beq.n	8003040 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e14a      	b.n	80032d6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d008      	beq.n	800305e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800304c:	4b82      	ldr	r3, [pc, #520]	; (8003258 <HAL_RCC_ClockConfig+0x260>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	497f      	ldr	r1, [pc, #508]	; (8003258 <HAL_RCC_ClockConfig+0x260>)
 800305a:	4313      	orrs	r3, r2
 800305c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 80dc 	beq.w	8003224 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d13c      	bne.n	80030ee <HAL_RCC_ClockConfig+0xf6>
 8003074:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003078:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800307c:	fa93 f3a3 	rbit	r3, r3
 8003080:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003084:	fab3 f383 	clz	r3, r3
 8003088:	b2db      	uxtb	r3, r3
 800308a:	095b      	lsrs	r3, r3, #5
 800308c:	b2db      	uxtb	r3, r3
 800308e:	f043 0301 	orr.w	r3, r3, #1
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b01      	cmp	r3, #1
 8003096:	d102      	bne.n	800309e <HAL_RCC_ClockConfig+0xa6>
 8003098:	4b6f      	ldr	r3, [pc, #444]	; (8003258 <HAL_RCC_ClockConfig+0x260>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	e00f      	b.n	80030be <HAL_RCC_ClockConfig+0xc6>
 800309e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030a6:	fa93 f3a3 	rbit	r3, r3
 80030aa:	667b      	str	r3, [r7, #100]	; 0x64
 80030ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030b0:	663b      	str	r3, [r7, #96]	; 0x60
 80030b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030b4:	fa93 f3a3 	rbit	r3, r3
 80030b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030ba:	4b67      	ldr	r3, [pc, #412]	; (8003258 <HAL_RCC_ClockConfig+0x260>)
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030c2:	65ba      	str	r2, [r7, #88]	; 0x58
 80030c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030c6:	fa92 f2a2 	rbit	r2, r2
 80030ca:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80030cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80030ce:	fab2 f282 	clz	r2, r2
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	f042 0220 	orr.w	r2, r2, #32
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	f002 021f 	and.w	r2, r2, #31
 80030de:	2101      	movs	r1, #1
 80030e0:	fa01 f202 	lsl.w	r2, r1, r2
 80030e4:	4013      	ands	r3, r2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d17b      	bne.n	80031e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e0f3      	b.n	80032d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d13c      	bne.n	8003170 <HAL_RCC_ClockConfig+0x178>
 80030f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030fa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030fe:	fa93 f3a3 	rbit	r3, r3
 8003102:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003106:	fab3 f383 	clz	r3, r3
 800310a:	b2db      	uxtb	r3, r3
 800310c:	095b      	lsrs	r3, r3, #5
 800310e:	b2db      	uxtb	r3, r3
 8003110:	f043 0301 	orr.w	r3, r3, #1
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b01      	cmp	r3, #1
 8003118:	d102      	bne.n	8003120 <HAL_RCC_ClockConfig+0x128>
 800311a:	4b4f      	ldr	r3, [pc, #316]	; (8003258 <HAL_RCC_ClockConfig+0x260>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	e00f      	b.n	8003140 <HAL_RCC_ClockConfig+0x148>
 8003120:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003124:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003128:	fa93 f3a3 	rbit	r3, r3
 800312c:	647b      	str	r3, [r7, #68]	; 0x44
 800312e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003132:	643b      	str	r3, [r7, #64]	; 0x40
 8003134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003136:	fa93 f3a3 	rbit	r3, r3
 800313a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800313c:	4b46      	ldr	r3, [pc, #280]	; (8003258 <HAL_RCC_ClockConfig+0x260>)
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003144:	63ba      	str	r2, [r7, #56]	; 0x38
 8003146:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003148:	fa92 f2a2 	rbit	r2, r2
 800314c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800314e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003150:	fab2 f282 	clz	r2, r2
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	f042 0220 	orr.w	r2, r2, #32
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	f002 021f 	and.w	r2, r2, #31
 8003160:	2101      	movs	r1, #1
 8003162:	fa01 f202 	lsl.w	r2, r1, r2
 8003166:	4013      	ands	r3, r2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d13a      	bne.n	80031e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e0b2      	b.n	80032d6 <HAL_RCC_ClockConfig+0x2de>
 8003170:	2302      	movs	r3, #2
 8003172:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003176:	fa93 f3a3 	rbit	r3, r3
 800317a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800317c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800317e:	fab3 f383 	clz	r3, r3
 8003182:	b2db      	uxtb	r3, r3
 8003184:	095b      	lsrs	r3, r3, #5
 8003186:	b2db      	uxtb	r3, r3
 8003188:	f043 0301 	orr.w	r3, r3, #1
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b01      	cmp	r3, #1
 8003190:	d102      	bne.n	8003198 <HAL_RCC_ClockConfig+0x1a0>
 8003192:	4b31      	ldr	r3, [pc, #196]	; (8003258 <HAL_RCC_ClockConfig+0x260>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	e00d      	b.n	80031b4 <HAL_RCC_ClockConfig+0x1bc>
 8003198:	2302      	movs	r3, #2
 800319a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319e:	fa93 f3a3 	rbit	r3, r3
 80031a2:	627b      	str	r3, [r7, #36]	; 0x24
 80031a4:	2302      	movs	r3, #2
 80031a6:	623b      	str	r3, [r7, #32]
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	fa93 f3a3 	rbit	r3, r3
 80031ae:	61fb      	str	r3, [r7, #28]
 80031b0:	4b29      	ldr	r3, [pc, #164]	; (8003258 <HAL_RCC_ClockConfig+0x260>)
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	2202      	movs	r2, #2
 80031b6:	61ba      	str	r2, [r7, #24]
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	fa92 f2a2 	rbit	r2, r2
 80031be:	617a      	str	r2, [r7, #20]
  return result;
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	fab2 f282 	clz	r2, r2
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	f042 0220 	orr.w	r2, r2, #32
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	f002 021f 	and.w	r2, r2, #31
 80031d2:	2101      	movs	r1, #1
 80031d4:	fa01 f202 	lsl.w	r2, r1, r2
 80031d8:	4013      	ands	r3, r2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e079      	b.n	80032d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031e2:	4b1d      	ldr	r3, [pc, #116]	; (8003258 <HAL_RCC_ClockConfig+0x260>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f023 0203 	bic.w	r2, r3, #3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	491a      	ldr	r1, [pc, #104]	; (8003258 <HAL_RCC_ClockConfig+0x260>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031f4:	f7fd fade 	bl	80007b4 <HAL_GetTick>
 80031f8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fa:	e00a      	b.n	8003212 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031fc:	f7fd fada 	bl	80007b4 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	f241 3288 	movw	r2, #5000	; 0x1388
 800320a:	4293      	cmp	r3, r2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e061      	b.n	80032d6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003212:	4b11      	ldr	r3, [pc, #68]	; (8003258 <HAL_RCC_ClockConfig+0x260>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f003 020c 	and.w	r2, r3, #12
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	429a      	cmp	r2, r3
 8003222:	d1eb      	bne.n	80031fc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003224:	4b0b      	ldr	r3, [pc, #44]	; (8003254 <HAL_RCC_ClockConfig+0x25c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d214      	bcs.n	800325c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003232:	4b08      	ldr	r3, [pc, #32]	; (8003254 <HAL_RCC_ClockConfig+0x25c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f023 0207 	bic.w	r2, r3, #7
 800323a:	4906      	ldr	r1, [pc, #24]	; (8003254 <HAL_RCC_ClockConfig+0x25c>)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	4313      	orrs	r3, r2
 8003240:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003242:	4b04      	ldr	r3, [pc, #16]	; (8003254 <HAL_RCC_ClockConfig+0x25c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	429a      	cmp	r2, r3
 800324e:	d005      	beq.n	800325c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e040      	b.n	80032d6 <HAL_RCC_ClockConfig+0x2de>
 8003254:	40022000 	.word	0x40022000
 8003258:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	d008      	beq.n	800327a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003268:	4b1d      	ldr	r3, [pc, #116]	; (80032e0 <HAL_RCC_ClockConfig+0x2e8>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	491a      	ldr	r1, [pc, #104]	; (80032e0 <HAL_RCC_ClockConfig+0x2e8>)
 8003276:	4313      	orrs	r3, r2
 8003278:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b00      	cmp	r3, #0
 8003284:	d009      	beq.n	800329a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003286:	4b16      	ldr	r3, [pc, #88]	; (80032e0 <HAL_RCC_ClockConfig+0x2e8>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4912      	ldr	r1, [pc, #72]	; (80032e0 <HAL_RCC_ClockConfig+0x2e8>)
 8003296:	4313      	orrs	r3, r2
 8003298:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800329a:	f000 f829 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 800329e:	4601      	mov	r1, r0
 80032a0:	4b0f      	ldr	r3, [pc, #60]	; (80032e0 <HAL_RCC_ClockConfig+0x2e8>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032a8:	22f0      	movs	r2, #240	; 0xf0
 80032aa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	fa92 f2a2 	rbit	r2, r2
 80032b2:	60fa      	str	r2, [r7, #12]
  return result;
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	fab2 f282 	clz	r2, r2
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	40d3      	lsrs	r3, r2
 80032be:	4a09      	ldr	r2, [pc, #36]	; (80032e4 <HAL_RCC_ClockConfig+0x2ec>)
 80032c0:	5cd3      	ldrb	r3, [r2, r3]
 80032c2:	fa21 f303 	lsr.w	r3, r1, r3
 80032c6:	4a08      	ldr	r2, [pc, #32]	; (80032e8 <HAL_RCC_ClockConfig+0x2f0>)
 80032c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80032ca:	4b08      	ldr	r3, [pc, #32]	; (80032ec <HAL_RCC_ClockConfig+0x2f4>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fd fa2c 	bl	800072c <HAL_InitTick>
  
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3778      	adds	r7, #120	; 0x78
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40021000 	.word	0x40021000
 80032e4:	08003870 	.word	0x08003870
 80032e8:	20000000 	.word	0x20000000
 80032ec:	20000004 	.word	0x20000004

080032f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b08b      	sub	sp, #44	; 0x2c
 80032f4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	61fb      	str	r3, [r7, #28]
 80032fa:	2300      	movs	r3, #0
 80032fc:	61bb      	str	r3, [r7, #24]
 80032fe:	2300      	movs	r3, #0
 8003300:	627b      	str	r3, [r7, #36]	; 0x24
 8003302:	2300      	movs	r3, #0
 8003304:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003306:	2300      	movs	r3, #0
 8003308:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800330a:	4b2a      	ldr	r3, [pc, #168]	; (80033b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	f003 030c 	and.w	r3, r3, #12
 8003316:	2b04      	cmp	r3, #4
 8003318:	d002      	beq.n	8003320 <HAL_RCC_GetSysClockFreq+0x30>
 800331a:	2b08      	cmp	r3, #8
 800331c:	d003      	beq.n	8003326 <HAL_RCC_GetSysClockFreq+0x36>
 800331e:	e03f      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003320:	4b25      	ldr	r3, [pc, #148]	; (80033b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003322:	623b      	str	r3, [r7, #32]
      break;
 8003324:	e03f      	b.n	80033a6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800332c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003330:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	fa92 f2a2 	rbit	r2, r2
 8003338:	607a      	str	r2, [r7, #4]
  return result;
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	fab2 f282 	clz	r2, r2
 8003340:	b2d2      	uxtb	r2, r2
 8003342:	40d3      	lsrs	r3, r2
 8003344:	4a1d      	ldr	r2, [pc, #116]	; (80033bc <HAL_RCC_GetSysClockFreq+0xcc>)
 8003346:	5cd3      	ldrb	r3, [r2, r3]
 8003348:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800334a:	4b1a      	ldr	r3, [pc, #104]	; (80033b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800334c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	220f      	movs	r2, #15
 8003354:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	fa92 f2a2 	rbit	r2, r2
 800335c:	60fa      	str	r2, [r7, #12]
  return result;
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	fab2 f282 	clz	r2, r2
 8003364:	b2d2      	uxtb	r2, r2
 8003366:	40d3      	lsrs	r3, r2
 8003368:	4a15      	ldr	r2, [pc, #84]	; (80033c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800336a:	5cd3      	ldrb	r3, [r2, r3]
 800336c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d008      	beq.n	800338a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003378:	4a0f      	ldr	r2, [pc, #60]	; (80033b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	fb02 f303 	mul.w	r3, r2, r3
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
 8003388:	e007      	b.n	800339a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800338a:	4a0b      	ldr	r2, [pc, #44]	; (80033b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	fb02 f303 	mul.w	r3, r2, r3
 8003398:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	623b      	str	r3, [r7, #32]
      break;
 800339e:	e002      	b.n	80033a6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033a0:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80033a2:	623b      	str	r3, [r7, #32]
      break;
 80033a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033a6:	6a3b      	ldr	r3, [r7, #32]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	372c      	adds	r7, #44	; 0x2c
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	40021000 	.word	0x40021000
 80033b8:	007a1200 	.word	0x007a1200
 80033bc:	08003880 	.word	0x08003880
 80033c0:	08003890 	.word	0x08003890

080033c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b092      	sub	sp, #72	; 0x48
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80033d4:	2300      	movs	r3, #0
 80033d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 80d4 	beq.w	8003590 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033e8:	4b4e      	ldr	r3, [pc, #312]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10e      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033f4:	4b4b      	ldr	r3, [pc, #300]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f6:	69db      	ldr	r3, [r3, #28]
 80033f8:	4a4a      	ldr	r2, [pc, #296]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033fe:	61d3      	str	r3, [r2, #28]
 8003400:	4b48      	ldr	r3, [pc, #288]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003408:	60bb      	str	r3, [r7, #8]
 800340a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800340c:	2301      	movs	r3, #1
 800340e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003412:	4b45      	ldr	r3, [pc, #276]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341a:	2b00      	cmp	r3, #0
 800341c:	d118      	bne.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800341e:	4b42      	ldr	r3, [pc, #264]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a41      	ldr	r2, [pc, #260]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003428:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800342a:	f7fd f9c3 	bl	80007b4 <HAL_GetTick>
 800342e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003430:	e008      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003432:	f7fd f9bf 	bl	80007b4 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b64      	cmp	r3, #100	; 0x64
 800343e:	d901      	bls.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e1d6      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003444:	4b38      	ldr	r3, [pc, #224]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0f0      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003450:	4b34      	ldr	r3, [pc, #208]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003458:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800345a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 8084 	beq.w	800356a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800346a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800346c:	429a      	cmp	r2, r3
 800346e:	d07c      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003470:	4b2c      	ldr	r3, [pc, #176]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003478:	63fb      	str	r3, [r7, #60]	; 0x3c
 800347a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800347e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003482:	fa93 f3a3 	rbit	r3, r3
 8003486:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800348a:	fab3 f383 	clz	r3, r3
 800348e:	b2db      	uxtb	r3, r3
 8003490:	461a      	mov	r2, r3
 8003492:	4b26      	ldr	r3, [pc, #152]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003494:	4413      	add	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	461a      	mov	r2, r3
 800349a:	2301      	movs	r3, #1
 800349c:	6013      	str	r3, [r2, #0]
 800349e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a6:	fa93 f3a3 	rbit	r3, r3
 80034aa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80034ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034ae:	fab3 f383 	clz	r3, r3
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	461a      	mov	r2, r3
 80034b6:	4b1d      	ldr	r3, [pc, #116]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034b8:	4413      	add	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	461a      	mov	r2, r3
 80034be:	2300      	movs	r3, #0
 80034c0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034c2:	4a18      	ldr	r2, [pc, #96]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034c6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d04b      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d2:	f7fd f96f 	bl	80007b4 <HAL_GetTick>
 80034d6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d8:	e00a      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034da:	f7fd f96b 	bl	80007b4 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e180      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80034f0:	2302      	movs	r3, #2
 80034f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f6:	fa93 f3a3 	rbit	r3, r3
 80034fa:	627b      	str	r3, [r7, #36]	; 0x24
 80034fc:	2302      	movs	r3, #2
 80034fe:	623b      	str	r3, [r7, #32]
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	fa93 f3a3 	rbit	r3, r3
 8003506:	61fb      	str	r3, [r7, #28]
  return result;
 8003508:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800350a:	fab3 f383 	clz	r3, r3
 800350e:	b2db      	uxtb	r3, r3
 8003510:	095b      	lsrs	r3, r3, #5
 8003512:	b2db      	uxtb	r3, r3
 8003514:	f043 0302 	orr.w	r3, r3, #2
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d108      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800351e:	4b01      	ldr	r3, [pc, #4]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	e00d      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003524:	40021000 	.word	0x40021000
 8003528:	40007000 	.word	0x40007000
 800352c:	10908100 	.word	0x10908100
 8003530:	2302      	movs	r3, #2
 8003532:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	fa93 f3a3 	rbit	r3, r3
 800353a:	617b      	str	r3, [r7, #20]
 800353c:	4b9a      	ldr	r3, [pc, #616]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	2202      	movs	r2, #2
 8003542:	613a      	str	r2, [r7, #16]
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	fa92 f2a2 	rbit	r2, r2
 800354a:	60fa      	str	r2, [r7, #12]
  return result;
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	fab2 f282 	clz	r2, r2
 8003552:	b2d2      	uxtb	r2, r2
 8003554:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003558:	b2d2      	uxtb	r2, r2
 800355a:	f002 021f 	and.w	r2, r2, #31
 800355e:	2101      	movs	r1, #1
 8003560:	fa01 f202 	lsl.w	r2, r1, r2
 8003564:	4013      	ands	r3, r2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0b7      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800356a:	4b8f      	ldr	r3, [pc, #572]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	498c      	ldr	r1, [pc, #560]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003578:	4313      	orrs	r3, r2
 800357a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800357c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003580:	2b01      	cmp	r3, #1
 8003582:	d105      	bne.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003584:	4b88      	ldr	r3, [pc, #544]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	4a87      	ldr	r2, [pc, #540]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800358a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800358e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b00      	cmp	r3, #0
 800359a:	d008      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800359c:	4b82      	ldr	r3, [pc, #520]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800359e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a0:	f023 0203 	bic.w	r2, r3, #3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	497f      	ldr	r1, [pc, #508]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d008      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035ba:	4b7b      	ldr	r3, [pc, #492]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	4978      	ldr	r1, [pc, #480]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d008      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035d8:	4b73      	ldr	r3, [pc, #460]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	4970      	ldr	r1, [pc, #448]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0320 	and.w	r3, r3, #32
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d008      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035f6:	4b6c      	ldr	r3, [pc, #432]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fa:	f023 0210 	bic.w	r2, r3, #16
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	4969      	ldr	r1, [pc, #420]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003604:	4313      	orrs	r3, r2
 8003606:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d008      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003614:	4b64      	ldr	r3, [pc, #400]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003620:	4961      	ldr	r1, [pc, #388]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003622:	4313      	orrs	r3, r2
 8003624:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362e:	2b00      	cmp	r3, #0
 8003630:	d008      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003632:	4b5d      	ldr	r3, [pc, #372]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003636:	f023 0220 	bic.w	r2, r3, #32
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	495a      	ldr	r1, [pc, #360]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003640:	4313      	orrs	r3, r2
 8003642:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d008      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003650:	4b55      	ldr	r3, [pc, #340]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003654:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	4952      	ldr	r1, [pc, #328]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800365e:	4313      	orrs	r3, r2
 8003660:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	2b00      	cmp	r3, #0
 800366c:	d008      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800366e:	4b4e      	ldr	r3, [pc, #312]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003672:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	494b      	ldr	r1, [pc, #300]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800367c:	4313      	orrs	r3, r2
 800367e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0310 	and.w	r3, r3, #16
 8003688:	2b00      	cmp	r3, #0
 800368a:	d008      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800368c:	4b46      	ldr	r3, [pc, #280]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800368e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003690:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	4943      	ldr	r1, [pc, #268]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800369a:	4313      	orrs	r3, r2
 800369c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d008      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80036aa:	4b3f      	ldr	r3, [pc, #252]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b6:	493c      	ldr	r1, [pc, #240]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d008      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80036c8:	4b37      	ldr	r3, [pc, #220]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036cc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d4:	4934      	ldr	r1, [pc, #208]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d008      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80036e6:	4b30      	ldr	r3, [pc, #192]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ea:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f2:	492d      	ldr	r1, [pc, #180]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d008      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003704:	4b28      	ldr	r3, [pc, #160]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003708:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003710:	4925      	ldr	r1, [pc, #148]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003712:	4313      	orrs	r3, r2
 8003714:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d008      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003722:	4b21      	ldr	r3, [pc, #132]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003726:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	491e      	ldr	r1, [pc, #120]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003730:	4313      	orrs	r3, r2
 8003732:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d008      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003740:	4b19      	ldr	r3, [pc, #100]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003744:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374c:	4916      	ldr	r1, [pc, #88]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800374e:	4313      	orrs	r3, r2
 8003750:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d008      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800375e:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003762:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376a:	490f      	ldr	r1, [pc, #60]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800376c:	4313      	orrs	r3, r2
 800376e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d008      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800377c:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800377e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003780:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003788:	4907      	ldr	r1, [pc, #28]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800378a:	4313      	orrs	r3, r2
 800378c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00c      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800379a:	4b03      	ldr	r3, [pc, #12]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	e002      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80037a6:	bf00      	nop
 80037a8:	40021000 	.word	0x40021000
 80037ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ae:	4913      	ldr	r1, [pc, #76]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d008      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80037c0:	4b0e      	ldr	r3, [pc, #56]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037cc:	490b      	ldr	r1, [pc, #44]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d008      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80037de:	4b07      	ldr	r3, [pc, #28]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ea:	4904      	ldr	r1, [pc, #16]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3748      	adds	r7, #72	; 0x48
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	40021000 	.word	0x40021000

08003800 <__libc_init_array>:
 8003800:	b570      	push	{r4, r5, r6, lr}
 8003802:	4d0d      	ldr	r5, [pc, #52]	; (8003838 <__libc_init_array+0x38>)
 8003804:	4c0d      	ldr	r4, [pc, #52]	; (800383c <__libc_init_array+0x3c>)
 8003806:	1b64      	subs	r4, r4, r5
 8003808:	10a4      	asrs	r4, r4, #2
 800380a:	2600      	movs	r6, #0
 800380c:	42a6      	cmp	r6, r4
 800380e:	d109      	bne.n	8003824 <__libc_init_array+0x24>
 8003810:	4d0b      	ldr	r5, [pc, #44]	; (8003840 <__libc_init_array+0x40>)
 8003812:	4c0c      	ldr	r4, [pc, #48]	; (8003844 <__libc_init_array+0x44>)
 8003814:	f000 f820 	bl	8003858 <_init>
 8003818:	1b64      	subs	r4, r4, r5
 800381a:	10a4      	asrs	r4, r4, #2
 800381c:	2600      	movs	r6, #0
 800381e:	42a6      	cmp	r6, r4
 8003820:	d105      	bne.n	800382e <__libc_init_array+0x2e>
 8003822:	bd70      	pop	{r4, r5, r6, pc}
 8003824:	f855 3b04 	ldr.w	r3, [r5], #4
 8003828:	4798      	blx	r3
 800382a:	3601      	adds	r6, #1
 800382c:	e7ee      	b.n	800380c <__libc_init_array+0xc>
 800382e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003832:	4798      	blx	r3
 8003834:	3601      	adds	r6, #1
 8003836:	e7f2      	b.n	800381e <__libc_init_array+0x1e>
 8003838:	080038a0 	.word	0x080038a0
 800383c:	080038a0 	.word	0x080038a0
 8003840:	080038a0 	.word	0x080038a0
 8003844:	080038a4 	.word	0x080038a4

08003848 <memset>:
 8003848:	4402      	add	r2, r0
 800384a:	4603      	mov	r3, r0
 800384c:	4293      	cmp	r3, r2
 800384e:	d100      	bne.n	8003852 <memset+0xa>
 8003850:	4770      	bx	lr
 8003852:	f803 1b01 	strb.w	r1, [r3], #1
 8003856:	e7f9      	b.n	800384c <memset+0x4>

08003858 <_init>:
 8003858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385a:	bf00      	nop
 800385c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800385e:	bc08      	pop	{r3}
 8003860:	469e      	mov	lr, r3
 8003862:	4770      	bx	lr

08003864 <_fini>:
 8003864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003866:	bf00      	nop
 8003868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800386a:	bc08      	pop	{r3}
 800386c:	469e      	mov	lr, r3
 800386e:	4770      	bx	lr
